

================================================================
== Vivado HLS Report for 'sha256_transform'
================================================================
* Date:           Wed Apr  7 17:47:18 2021

* Version:        2019.1 (Build 2552052 on Fri May 24 15:28:33 MDT 2019)
* Project:        SHA
* Solution:       solution2_array_partition
* Product family: zynq
* Target device:  xc7z020-clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|     7.625|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |  419|  419|  419|  419|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +----------+-----+-----+----------+-----------+-----------+------+----------+
        |          |  Latency  | Iteration|  Initiation Interval  | Trip |          |
        | Loop Name| min | max |  Latency |  achieved |   target  | Count| Pipelined|
        +----------+-----+-----+----------+-----------+-----------+------+----------+
        |- Loop 1  |   32|   32|         2|          -|          -|    16|    no    |
        |- Loop 2  |  192|  192|         4|          -|          -|    48|    no    |
        |- Loop 3  |  192|  192|         3|          -|          -|    64|    no    |
        +----------+-----+-----+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 10
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 4 
3 --> 2 
4 --> 5 8 
5 --> 6 
6 --> 7 
7 --> 4 
8 --> 9 
9 --> 10 
10 --> 8 

* FSM state operations: 

State 1 <SV = 0> <Delay = 1.76>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%ctx_state_7_read_1 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %ctx_state_7_read)"   --->   Operation 11 'read' 'ctx_state_7_read_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%ctx_state_6_read_1 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %ctx_state_6_read)"   --->   Operation 12 'read' 'ctx_state_6_read_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%ctx_state_5_read_1 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %ctx_state_5_read)"   --->   Operation 13 'read' 'ctx_state_5_read_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "%ctx_state_4_read_1 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %ctx_state_4_read)"   --->   Operation 14 'read' 'ctx_state_4_read_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "%ctx_state_3_read_1 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %ctx_state_3_read)"   --->   Operation 15 'read' 'ctx_state_3_read_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "%ctx_state_2_read_1 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %ctx_state_2_read)"   --->   Operation 16 'read' 'ctx_state_2_read_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "%ctx_state_1_read_1 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %ctx_state_1_read)"   --->   Operation 17 'read' 'ctx_state_1_read_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%ctx_state_0_read_1 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %ctx_state_0_read)"   --->   Operation 18 'read' 'ctx_state_0_read_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "%m = alloca [64 x i32], align 16" [SHA_new/SHA_new/sha256_impl.c:32]   --->   Operation 19 'alloca' 'm' <Predicate = true> <Delay = 0.00> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 64> <RAM>
ST_1 : Operation 20 [1/1] (1.76ns)   --->   "br label %1" [SHA_new/SHA_new/sha256_impl.c:34]   --->   Operation 20 'br' <Predicate = true> <Delay = 1.76>

State 2 <SV = 1> <Delay = 2.32>
ST_2 : Operation 21 [1/1] (0.00ns)   --->   "%i_0 = phi i5 [ 0, %0 ], [ %add_ln34, %2 ]" [SHA_new/SHA_new/sha256_impl.c:34]   --->   Operation 21 'phi' 'i_0' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 22 [1/1] (1.36ns)   --->   "%icmp_ln34 = icmp eq i5 %i_0, -16" [SHA_new/SHA_new/sha256_impl.c:34]   --->   Operation 22 'icmp' 'icmp_ln34' <Predicate = true> <Delay = 1.36> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.48> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 23 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopTripCount(i64 16, i64 16, i64 16)"   --->   Operation 23 'speclooptripcount' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 24 [1/1] (1.78ns)   --->   "%add_ln34 = add i5 %i_0, 1" [SHA_new/SHA_new/sha256_impl.c:34]   --->   Operation 24 'add' 'add_ln34' <Predicate = true> <Delay = 1.78> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 25 [1/1] (0.00ns)   --->   "br i1 %icmp_ln34, label %.preheader.preheader, label %2" [SHA_new/SHA_new/sha256_impl.c:34]   --->   Operation 25 'br' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 26 [1/1] (0.00ns)   --->   "%zext_ln36 = zext i5 %i_0 to i64" [SHA_new/SHA_new/sha256_impl.c:36]   --->   Operation 26 'zext' 'zext_ln36' <Predicate = (!icmp_ln34)> <Delay = 0.00>
ST_2 : Operation 27 [1/1] (0.00ns)   --->   "%data_0_addr = getelementptr [16 x i8]* %data_0, i64 0, i64 %zext_ln36" [SHA_new/SHA_new/sha256_impl.c:36]   --->   Operation 27 'getelementptr' 'data_0_addr' <Predicate = (!icmp_ln34)> <Delay = 0.00>
ST_2 : Operation 28 [2/2] (2.32ns)   --->   "%data_0_load = load i8* %data_0_addr, align 1" [SHA_new/SHA_new/sha256_impl.c:36]   --->   Operation 28 'load' 'data_0_load' <Predicate = (!icmp_ln34)> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 64> <RAM>
ST_2 : Operation 29 [1/1] (0.00ns)   --->   "%data_1_addr = getelementptr [16 x i8]* %data_1, i64 0, i64 %zext_ln36" [SHA_new/SHA_new/sha256_impl.c:36]   --->   Operation 29 'getelementptr' 'data_1_addr' <Predicate = (!icmp_ln34)> <Delay = 0.00>
ST_2 : Operation 30 [2/2] (2.32ns)   --->   "%data_1_load = load i8* %data_1_addr, align 1" [SHA_new/SHA_new/sha256_impl.c:36]   --->   Operation 30 'load' 'data_1_load' <Predicate = (!icmp_ln34)> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 64> <RAM>
ST_2 : Operation 31 [1/1] (0.00ns)   --->   "%data_2_addr = getelementptr [16 x i8]* %data_2, i64 0, i64 %zext_ln36" [SHA_new/SHA_new/sha256_impl.c:36]   --->   Operation 31 'getelementptr' 'data_2_addr' <Predicate = (!icmp_ln34)> <Delay = 0.00>
ST_2 : Operation 32 [2/2] (2.32ns)   --->   "%data_2_load = load i8* %data_2_addr, align 1" [SHA_new/SHA_new/sha256_impl.c:36]   --->   Operation 32 'load' 'data_2_load' <Predicate = (!icmp_ln34)> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 64> <RAM>
ST_2 : Operation 33 [1/1] (0.00ns)   --->   "%data_3_addr = getelementptr [16 x i8]* %data_3, i64 0, i64 %zext_ln36" [SHA_new/SHA_new/sha256_impl.c:36]   --->   Operation 33 'getelementptr' 'data_3_addr' <Predicate = (!icmp_ln34)> <Delay = 0.00>
ST_2 : Operation 34 [2/2] (2.32ns)   --->   "%data_3_load = load i8* %data_3_addr, align 1" [SHA_new/SHA_new/sha256_impl.c:36]   --->   Operation 34 'load' 'data_3_load' <Predicate = (!icmp_ln34)> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 64> <RAM>
ST_2 : Operation 35 [1/1] (1.76ns)   --->   "br label %.preheader" [SHA_new/SHA_new/sha256_impl.c:38]   --->   Operation 35 'br' <Predicate = (icmp_ln34)> <Delay = 1.76>

State 3 <SV = 2> <Delay = 5.57>
ST_3 : Operation 36 [1/2] (2.32ns)   --->   "%data_0_load = load i8* %data_0_addr, align 1" [SHA_new/SHA_new/sha256_impl.c:36]   --->   Operation 36 'load' 'data_0_load' <Predicate = true> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 64> <RAM>
ST_3 : Operation 37 [1/2] (2.32ns)   --->   "%data_1_load = load i8* %data_1_addr, align 1" [SHA_new/SHA_new/sha256_impl.c:36]   --->   Operation 37 'load' 'data_1_load' <Predicate = true> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 64> <RAM>
ST_3 : Operation 38 [1/2] (2.32ns)   --->   "%data_2_load = load i8* %data_2_addr, align 1" [SHA_new/SHA_new/sha256_impl.c:36]   --->   Operation 38 'load' 'data_2_load' <Predicate = true> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 64> <RAM>
ST_3 : Operation 39 [1/2] (2.32ns)   --->   "%data_3_load = load i8* %data_3_addr, align 1" [SHA_new/SHA_new/sha256_impl.c:36]   --->   Operation 39 'load' 'data_3_load' <Predicate = true> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 64> <RAM>
ST_3 : Operation 40 [1/1] (0.00ns)   --->   "%or_ln36_5 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %data_0_load, i8 %data_1_load, i8 %data_2_load, i8 %data_3_load)" [SHA_new/SHA_new/sha256_impl.c:36]   --->   Operation 40 'bitconcatenate' 'or_ln36_5' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 41 [1/1] (0.00ns)   --->   "%m_addr = getelementptr inbounds [64 x i32]* %m, i64 0, i64 %zext_ln36" [SHA_new/SHA_new/sha256_impl.c:36]   --->   Operation 41 'getelementptr' 'm_addr' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 42 [1/1] (3.25ns)   --->   "store i32 %or_ln36_5, i32* %m_addr, align 4" [SHA_new/SHA_new/sha256_impl.c:36]   --->   Operation 42 'store' <Predicate = true> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 64> <RAM>
ST_3 : Operation 43 [1/1] (0.00ns)   --->   "br label %1" [SHA_new/SHA_new/sha256_impl.c:34]   --->   Operation 43 'br' <Predicate = true> <Delay = 0.00>

State 4 <SV = 2> <Delay = 5.12>
ST_4 : Operation 44 [1/1] (0.00ns)   --->   "%i_1 = phi i7 [ %i, %3 ], [ 16, %.preheader.preheader ]"   --->   Operation 44 'phi' 'i_1' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 45 [1/1] (1.48ns)   --->   "%icmp_ln38 = icmp eq i7 %i_1, -64" [SHA_new/SHA_new/sha256_impl.c:38]   --->   Operation 45 'icmp' 'icmp_ln38' <Predicate = true> <Delay = 1.48> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.48> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 46 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopTripCount(i64 48, i64 48, i64 48)"   --->   Operation 46 'speclooptripcount' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 47 [1/1] (0.00ns)   --->   "br i1 %icmp_ln38, label %.preheader8.preheader, label %3" [SHA_new/SHA_new/sha256_impl.c:38]   --->   Operation 47 'br' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 48 [1/1] (1.87ns)   --->   "%add_ln40 = add i7 -2, %i_1" [SHA_new/SHA_new/sha256_impl.c:40]   --->   Operation 48 'add' 'add_ln40' <Predicate = (!icmp_ln38)> <Delay = 1.87> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 49 [1/1] (0.00ns)   --->   "%zext_ln40 = zext i7 %add_ln40 to i64" [SHA_new/SHA_new/sha256_impl.c:40]   --->   Operation 49 'zext' 'zext_ln40' <Predicate = (!icmp_ln38)> <Delay = 0.00>
ST_4 : Operation 50 [1/1] (0.00ns)   --->   "%m_addr_1 = getelementptr inbounds [64 x i32]* %m, i64 0, i64 %zext_ln40" [SHA_new/SHA_new/sha256_impl.c:40]   --->   Operation 50 'getelementptr' 'm_addr_1' <Predicate = (!icmp_ln38)> <Delay = 0.00>
ST_4 : Operation 51 [2/2] (3.25ns)   --->   "%m_load = load i32* %m_addr_1, align 4" [SHA_new/SHA_new/sha256_impl.c:40]   --->   Operation 51 'load' 'm_load' <Predicate = (!icmp_ln38)> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 64> <RAM>
ST_4 : Operation 52 [1/1] (1.87ns)   --->   "%add_ln40_1 = add i7 -7, %i_1" [SHA_new/SHA_new/sha256_impl.c:40]   --->   Operation 52 'add' 'add_ln40_1' <Predicate = (!icmp_ln38)> <Delay = 1.87> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 53 [1/1] (0.00ns)   --->   "%zext_ln40_1 = zext i7 %add_ln40_1 to i64" [SHA_new/SHA_new/sha256_impl.c:40]   --->   Operation 53 'zext' 'zext_ln40_1' <Predicate = (!icmp_ln38)> <Delay = 0.00>
ST_4 : Operation 54 [1/1] (0.00ns)   --->   "%m_addr_2 = getelementptr inbounds [64 x i32]* %m, i64 0, i64 %zext_ln40_1" [SHA_new/SHA_new/sha256_impl.c:40]   --->   Operation 54 'getelementptr' 'm_addr_2' <Predicate = (!icmp_ln38)> <Delay = 0.00>
ST_4 : Operation 55 [2/2] (3.25ns)   --->   "%m_load_1 = load i32* %m_addr_2, align 4" [SHA_new/SHA_new/sha256_impl.c:40]   --->   Operation 55 'load' 'm_load_1' <Predicate = (!icmp_ln38)> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 64> <RAM>
ST_4 : Operation 56 [1/1] (1.76ns)   --->   "br label %.preheader8" [SHA_new/SHA_new/sha256_impl.c:51]   --->   Operation 56 'br' <Predicate = (icmp_ln38)> <Delay = 1.76>

State 5 <SV = 3> <Delay = 5.12>
ST_5 : Operation 57 [1/2] (3.25ns)   --->   "%m_load = load i32* %m_addr_1, align 4" [SHA_new/SHA_new/sha256_impl.c:40]   --->   Operation 57 'load' 'm_load' <Predicate = true> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 64> <RAM>
ST_5 : Operation 58 [1/2] (3.25ns)   --->   "%m_load_1 = load i32* %m_addr_2, align 4" [SHA_new/SHA_new/sha256_impl.c:40]   --->   Operation 58 'load' 'm_load_1' <Predicate = true> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 64> <RAM>
ST_5 : Operation 59 [1/1] (1.87ns)   --->   "%add_ln40_2 = add i7 -15, %i_1" [SHA_new/SHA_new/sha256_impl.c:40]   --->   Operation 59 'add' 'add_ln40_2' <Predicate = true> <Delay = 1.87> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 60 [1/1] (0.00ns)   --->   "%zext_ln40_2 = zext i7 %add_ln40_2 to i64" [SHA_new/SHA_new/sha256_impl.c:40]   --->   Operation 60 'zext' 'zext_ln40_2' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 61 [1/1] (0.00ns)   --->   "%m_addr_3 = getelementptr inbounds [64 x i32]* %m, i64 0, i64 %zext_ln40_2" [SHA_new/SHA_new/sha256_impl.c:40]   --->   Operation 61 'getelementptr' 'm_addr_3' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 62 [2/2] (3.25ns)   --->   "%m_load_2 = load i32* %m_addr_3, align 4" [SHA_new/SHA_new/sha256_impl.c:40]   --->   Operation 62 'load' 'm_load_2' <Predicate = true> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 64> <RAM>
ST_5 : Operation 63 [1/1] (1.87ns)   --->   "%add_ln40_3 = add i7 -16, %i_1" [SHA_new/SHA_new/sha256_impl.c:40]   --->   Operation 63 'add' 'add_ln40_3' <Predicate = true> <Delay = 1.87> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 64 [1/1] (0.00ns)   --->   "%zext_ln40_3 = zext i7 %add_ln40_3 to i64" [SHA_new/SHA_new/sha256_impl.c:40]   --->   Operation 64 'zext' 'zext_ln40_3' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 65 [1/1] (0.00ns)   --->   "%m_addr_4 = getelementptr inbounds [64 x i32]* %m, i64 0, i64 %zext_ln40_3" [SHA_new/SHA_new/sha256_impl.c:40]   --->   Operation 65 'getelementptr' 'm_addr_4' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 66 [2/2] (3.25ns)   --->   "%m_load_3 = load i32* %m_addr_4, align 4" [SHA_new/SHA_new/sha256_impl.c:40]   --->   Operation 66 'load' 'm_load_3' <Predicate = true> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 64> <RAM>

State 6 <SV = 4> <Delay = 5.80>
ST_6 : Operation 67 [1/1] (0.00ns) (grouped into LUT with out node add_ln40_5)   --->   "%lshr_ln = call i15 @_ssdm_op_PartSelect.i15.i32.i32.i32(i32 %m_load, i32 17, i32 31)" [SHA_new/SHA_new/sha256_impl.c:40]   --->   Operation 67 'partselect' 'lshr_ln' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 68 [1/1] (0.00ns) (grouped into LUT with out node add_ln40_5)   --->   "%trunc_ln40 = trunc i32 %m_load to i17" [SHA_new/SHA_new/sha256_impl.c:40]   --->   Operation 68 'trunc' 'trunc_ln40' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 69 [1/1] (0.00ns) (grouped into LUT with out node add_ln40_5)   --->   "%or_ln = call i32 @_ssdm_op_BitConcatenate.i32.i17.i15(i17 %trunc_ln40, i15 %lshr_ln)" [SHA_new/SHA_new/sha256_impl.c:40]   --->   Operation 69 'bitconcatenate' 'or_ln' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 70 [1/1] (0.00ns) (grouped into LUT with out node add_ln40_5)   --->   "%lshr_ln40_1 = call i13 @_ssdm_op_PartSelect.i13.i32.i32.i32(i32 %m_load, i32 19, i32 31)" [SHA_new/SHA_new/sha256_impl.c:40]   --->   Operation 70 'partselect' 'lshr_ln40_1' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 71 [1/1] (0.00ns) (grouped into LUT with out node add_ln40_5)   --->   "%trunc_ln40_1 = trunc i32 %m_load to i19" [SHA_new/SHA_new/sha256_impl.c:40]   --->   Operation 71 'trunc' 'trunc_ln40_1' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 72 [1/1] (0.00ns) (grouped into LUT with out node add_ln40_5)   --->   "%or_ln40_1 = call i32 @_ssdm_op_BitConcatenate.i32.i19.i13(i19 %trunc_ln40_1, i13 %lshr_ln40_1)" [SHA_new/SHA_new/sha256_impl.c:40]   --->   Operation 72 'bitconcatenate' 'or_ln40_1' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 73 [1/1] (0.00ns) (grouped into LUT with out node add_ln40_5)   --->   "%lshr_ln40_2 = call i22 @_ssdm_op_PartSelect.i22.i32.i32.i32(i32 %m_load, i32 10, i32 31)" [SHA_new/SHA_new/sha256_impl.c:40]   --->   Operation 73 'partselect' 'lshr_ln40_2' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 74 [1/1] (0.00ns) (grouped into LUT with out node add_ln40_5)   --->   "%zext_ln40_5 = zext i22 %lshr_ln40_2 to i32" [SHA_new/SHA_new/sha256_impl.c:40]   --->   Operation 74 'zext' 'zext_ln40_5' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 75 [1/1] (0.00ns) (grouped into LUT with out node add_ln40_5)   --->   "%xor_ln40 = xor i32 %zext_ln40_5, %or_ln40_1" [SHA_new/SHA_new/sha256_impl.c:40]   --->   Operation 75 'xor' 'xor_ln40' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.99> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 76 [1/1] (0.00ns) (grouped into LUT with out node add_ln40_5)   --->   "%xor_ln40_1 = xor i32 %xor_ln40, %or_ln" [SHA_new/SHA_new/sha256_impl.c:40]   --->   Operation 76 'xor' 'xor_ln40_1' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.99> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 77 [1/2] (3.25ns)   --->   "%m_load_2 = load i32* %m_addr_3, align 4" [SHA_new/SHA_new/sha256_impl.c:40]   --->   Operation 77 'load' 'm_load_2' <Predicate = true> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 64> <RAM>
ST_6 : Operation 78 [1/1] (0.00ns) (grouped into LUT with out node add_ln40_5)   --->   "%lshr_ln40_3 = call i25 @_ssdm_op_PartSelect.i25.i32.i32.i32(i32 %m_load_2, i32 7, i32 31)" [SHA_new/SHA_new/sha256_impl.c:40]   --->   Operation 78 'partselect' 'lshr_ln40_3' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 79 [1/1] (0.00ns) (grouped into LUT with out node add_ln40_5)   --->   "%trunc_ln40_2 = trunc i32 %m_load_2 to i7" [SHA_new/SHA_new/sha256_impl.c:40]   --->   Operation 79 'trunc' 'trunc_ln40_2' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 80 [1/1] (0.00ns) (grouped into LUT with out node add_ln40_5)   --->   "%or_ln40_2 = call i32 @_ssdm_op_BitConcatenate.i32.i7.i25(i7 %trunc_ln40_2, i25 %lshr_ln40_3)" [SHA_new/SHA_new/sha256_impl.c:40]   --->   Operation 80 'bitconcatenate' 'or_ln40_2' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 81 [1/1] (0.00ns) (grouped into LUT with out node add_ln40_5)   --->   "%lshr_ln40_4 = call i14 @_ssdm_op_PartSelect.i14.i32.i32.i32(i32 %m_load_2, i32 18, i32 31)" [SHA_new/SHA_new/sha256_impl.c:40]   --->   Operation 81 'partselect' 'lshr_ln40_4' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 82 [1/1] (0.00ns) (grouped into LUT with out node add_ln40_5)   --->   "%trunc_ln40_3 = trunc i32 %m_load_2 to i18" [SHA_new/SHA_new/sha256_impl.c:40]   --->   Operation 82 'trunc' 'trunc_ln40_3' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 83 [1/1] (0.00ns) (grouped into LUT with out node add_ln40_5)   --->   "%or_ln40_3 = call i32 @_ssdm_op_BitConcatenate.i32.i18.i14(i18 %trunc_ln40_3, i14 %lshr_ln40_4)" [SHA_new/SHA_new/sha256_impl.c:40]   --->   Operation 83 'bitconcatenate' 'or_ln40_3' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 84 [1/1] (0.00ns) (grouped into LUT with out node add_ln40_5)   --->   "%lshr_ln40_5 = call i29 @_ssdm_op_PartSelect.i29.i32.i32.i32(i32 %m_load_2, i32 3, i32 31)" [SHA_new/SHA_new/sha256_impl.c:40]   --->   Operation 84 'partselect' 'lshr_ln40_5' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 85 [1/1] (0.00ns) (grouped into LUT with out node add_ln40_5)   --->   "%zext_ln40_6 = zext i29 %lshr_ln40_5 to i32" [SHA_new/SHA_new/sha256_impl.c:40]   --->   Operation 85 'zext' 'zext_ln40_6' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 86 [1/1] (0.00ns) (grouped into LUT with out node add_ln40_5)   --->   "%xor_ln40_2 = xor i32 %zext_ln40_6, %or_ln40_3" [SHA_new/SHA_new/sha256_impl.c:40]   --->   Operation 86 'xor' 'xor_ln40_2' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.99> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 87 [1/1] (0.00ns) (grouped into LUT with out node add_ln40_5)   --->   "%xor_ln40_3 = xor i32 %xor_ln40_2, %or_ln40_2" [SHA_new/SHA_new/sha256_impl.c:40]   --->   Operation 87 'xor' 'xor_ln40_3' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.99> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 88 [1/2] (3.25ns)   --->   "%m_load_3 = load i32* %m_addr_4, align 4" [SHA_new/SHA_new/sha256_impl.c:40]   --->   Operation 88 'load' 'm_load_3' <Predicate = true> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 64> <RAM>
ST_6 : Operation 89 [1/1] (2.55ns) (out node of the LUT)   --->   "%add_ln40_5 = add i32 %xor_ln40_1, %xor_ln40_3" [SHA_new/SHA_new/sha256_impl.c:40]   --->   Operation 89 'add' 'add_ln40_5' <Predicate = true> <Delay = 2.55> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>

State 7 <SV = 5> <Delay = 7.62>
ST_7 : Operation 90 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln40_4 = add i32 %m_load_1, %m_load_3" [SHA_new/SHA_new/sha256_impl.c:40]   --->   Operation 90 'add' 'add_ln40_4' <Predicate = true> <Delay = 0.00> <Core = "TAddSub">   --->   Core 83 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_7 : Operation 91 [1/1] (4.37ns) (root node of TernaryAdder)   --->   "%add_ln40_6 = add i32 %add_ln40_5, %add_ln40_4" [SHA_new/SHA_new/sha256_impl.c:40]   --->   Operation 91 'add' 'add_ln40_6' <Predicate = true> <Delay = 4.37> <Core = "TAddSub">   --->   Core 83 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_7 : Operation 92 [1/1] (0.00ns)   --->   "%zext_ln40_4 = zext i7 %i_1 to i64" [SHA_new/SHA_new/sha256_impl.c:40]   --->   Operation 92 'zext' 'zext_ln40_4' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 93 [1/1] (0.00ns)   --->   "%m_addr_5 = getelementptr inbounds [64 x i32]* %m, i64 0, i64 %zext_ln40_4" [SHA_new/SHA_new/sha256_impl.c:40]   --->   Operation 93 'getelementptr' 'm_addr_5' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 94 [1/1] (3.25ns)   --->   "store i32 %add_ln40_6, i32* %m_addr_5, align 4" [SHA_new/SHA_new/sha256_impl.c:40]   --->   Operation 94 'store' <Predicate = true> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 64> <RAM>
ST_7 : Operation 95 [1/1] (1.87ns)   --->   "%i = add i7 1, %i_1" [SHA_new/SHA_new/sha256_impl.c:38]   --->   Operation 95 'add' 'i' <Predicate = true> <Delay = 1.87> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 96 [1/1] (0.00ns)   --->   "br label %.preheader" [SHA_new/SHA_new/sha256_impl.c:38]   --->   Operation 96 'br' <Predicate = true> <Delay = 0.00>

State 8 <SV = 3> <Delay = 5.36>
ST_8 : Operation 97 [1/1] (0.00ns)   --->   "%h_0 = phi i32 [ %h, %4 ], [ %ctx_state_7_read_1, %.preheader8.preheader ]"   --->   Operation 97 'phi' 'h_0' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 98 [1/1] (0.00ns)   --->   "%h = phi i32 [ %g, %4 ], [ %ctx_state_6_read_1, %.preheader8.preheader ]"   --->   Operation 98 'phi' 'h' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 99 [1/1] (0.00ns)   --->   "%g = phi i32 [ %f, %4 ], [ %ctx_state_5_read_1, %.preheader8.preheader ]"   --->   Operation 99 'phi' 'g' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 100 [1/1] (0.00ns)   --->   "%f = phi i32 [ %e, %4 ], [ %ctx_state_4_read_1, %.preheader8.preheader ]"   --->   Operation 100 'phi' 'f' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 101 [1/1] (0.00ns)   --->   "%d_0 = phi i32 [ %d, %4 ], [ %ctx_state_3_read_1, %.preheader8.preheader ]"   --->   Operation 101 'phi' 'd_0' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 102 [1/1] (0.00ns)   --->   "%d = phi i32 [ %c, %4 ], [ %ctx_state_2_read_1, %.preheader8.preheader ]"   --->   Operation 102 'phi' 'd' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 103 [1/1] (0.00ns)   --->   "%c = phi i32 [ %b, %4 ], [ %ctx_state_1_read_1, %.preheader8.preheader ]"   --->   Operation 103 'phi' 'c' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 104 [1/1] (0.00ns)   --->   "%b = phi i32 [ %a, %4 ], [ %ctx_state_0_read_1, %.preheader8.preheader ]"   --->   Operation 104 'phi' 'b' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 105 [1/1] (0.00ns)   --->   "%i_2 = phi i7 [ %i_3, %4 ], [ 0, %.preheader8.preheader ]"   --->   Operation 105 'phi' 'i_2' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 106 [1/1] (1.48ns)   --->   "%icmp_ln51 = icmp eq i7 %i_2, -64" [SHA_new/SHA_new/sha256_impl.c:51]   --->   Operation 106 'icmp' 'icmp_ln51' <Predicate = true> <Delay = 1.48> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.48> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 107 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopTripCount(i64 64, i64 64, i64 64)"   --->   Operation 107 'speclooptripcount' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 108 [1/1] (1.87ns)   --->   "%i_3 = add i7 %i_2, 1" [SHA_new/SHA_new/sha256_impl.c:51]   --->   Operation 108 'add' 'i_3' <Predicate = true> <Delay = 1.87> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 109 [1/1] (0.00ns)   --->   "br i1 %icmp_ln51, label %5, label %4" [SHA_new/SHA_new/sha256_impl.c:51]   --->   Operation 109 'br' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 110 [1/1] (0.00ns) (grouped into LUT with out node xor_ln53_1)   --->   "%lshr_ln1 = call i26 @_ssdm_op_PartSelect.i26.i32.i32.i32(i32 %f, i32 6, i32 31)" [SHA_new/SHA_new/sha256_impl.c:53]   --->   Operation 110 'partselect' 'lshr_ln1' <Predicate = (!icmp_ln51)> <Delay = 0.00>
ST_8 : Operation 111 [1/1] (0.00ns) (grouped into LUT with out node xor_ln53_1)   --->   "%trunc_ln53 = trunc i32 %f to i6" [SHA_new/SHA_new/sha256_impl.c:53]   --->   Operation 111 'trunc' 'trunc_ln53' <Predicate = (!icmp_ln51)> <Delay = 0.00>
ST_8 : Operation 112 [1/1] (0.00ns) (grouped into LUT with out node xor_ln53_1)   --->   "%or_ln1 = call i32 @_ssdm_op_BitConcatenate.i32.i6.i26(i6 %trunc_ln53, i26 %lshr_ln1)" [SHA_new/SHA_new/sha256_impl.c:53]   --->   Operation 112 'bitconcatenate' 'or_ln1' <Predicate = (!icmp_ln51)> <Delay = 0.00>
ST_8 : Operation 113 [1/1] (0.00ns) (grouped into LUT with out node xor_ln53_1)   --->   "%lshr_ln53_1 = call i21 @_ssdm_op_PartSelect.i21.i32.i32.i32(i32 %f, i32 11, i32 31)" [SHA_new/SHA_new/sha256_impl.c:53]   --->   Operation 113 'partselect' 'lshr_ln53_1' <Predicate = (!icmp_ln51)> <Delay = 0.00>
ST_8 : Operation 114 [1/1] (0.00ns) (grouped into LUT with out node xor_ln53_1)   --->   "%trunc_ln53_1 = trunc i32 %f to i11" [SHA_new/SHA_new/sha256_impl.c:53]   --->   Operation 114 'trunc' 'trunc_ln53_1' <Predicate = (!icmp_ln51)> <Delay = 0.00>
ST_8 : Operation 115 [1/1] (0.00ns) (grouped into LUT with out node xor_ln53_1)   --->   "%or_ln53_1 = call i32 @_ssdm_op_BitConcatenate.i32.i11.i21(i11 %trunc_ln53_1, i21 %lshr_ln53_1)" [SHA_new/SHA_new/sha256_impl.c:53]   --->   Operation 115 'bitconcatenate' 'or_ln53_1' <Predicate = (!icmp_ln51)> <Delay = 0.00>
ST_8 : Operation 116 [1/1] (0.00ns) (grouped into LUT with out node xor_ln53_1)   --->   "%lshr_ln53_2 = call i7 @_ssdm_op_PartSelect.i7.i32.i32.i32(i32 %f, i32 25, i32 31)" [SHA_new/SHA_new/sha256_impl.c:53]   --->   Operation 116 'partselect' 'lshr_ln53_2' <Predicate = (!icmp_ln51)> <Delay = 0.00>
ST_8 : Operation 117 [1/1] (0.00ns) (grouped into LUT with out node xor_ln53_1)   --->   "%trunc_ln53_2 = trunc i32 %f to i25" [SHA_new/SHA_new/sha256_impl.c:53]   --->   Operation 117 'trunc' 'trunc_ln53_2' <Predicate = (!icmp_ln51)> <Delay = 0.00>
ST_8 : Operation 118 [1/1] (0.00ns) (grouped into LUT with out node xor_ln53_1)   --->   "%or_ln53_2 = call i32 @_ssdm_op_BitConcatenate.i32.i25.i7(i25 %trunc_ln53_2, i7 %lshr_ln53_2)" [SHA_new/SHA_new/sha256_impl.c:53]   --->   Operation 118 'bitconcatenate' 'or_ln53_2' <Predicate = (!icmp_ln51)> <Delay = 0.00>
ST_8 : Operation 119 [1/1] (0.00ns) (grouped into LUT with out node xor_ln53_1)   --->   "%xor_ln53 = xor i32 %or_ln1, %or_ln53_1" [SHA_new/SHA_new/sha256_impl.c:53]   --->   Operation 119 'xor' 'xor_ln53' <Predicate = (!icmp_ln51)> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.99> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 120 [1/1] (0.99ns) (out node of the LUT)   --->   "%xor_ln53_1 = xor i32 %xor_ln53, %or_ln53_2" [SHA_new/SHA_new/sha256_impl.c:53]   --->   Operation 120 'xor' 'xor_ln53_1' <Predicate = (!icmp_ln51)> <Delay = 0.99> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.99> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 121 [1/1] (0.00ns) (grouped into LUT with out node xor_ln53_3)   --->   "%and_ln53 = and i32 %f, %g" [SHA_new/SHA_new/sha256_impl.c:53]   --->   Operation 121 'and' 'and_ln53' <Predicate = (!icmp_ln51)> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.99> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 122 [1/1] (0.00ns) (grouped into LUT with out node xor_ln53_3)   --->   "%xor_ln53_2 = xor i32 %f, -1" [SHA_new/SHA_new/sha256_impl.c:53]   --->   Operation 122 'xor' 'xor_ln53_2' <Predicate = (!icmp_ln51)> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.99> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 123 [1/1] (0.00ns) (grouped into LUT with out node xor_ln53_3)   --->   "%and_ln53_1 = and i32 %h, %xor_ln53_2" [SHA_new/SHA_new/sha256_impl.c:53]   --->   Operation 123 'and' 'and_ln53_1' <Predicate = (!icmp_ln51)> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.99> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 124 [1/1] (0.99ns) (out node of the LUT)   --->   "%xor_ln53_3 = xor i32 %and_ln53, %and_ln53_1" [SHA_new/SHA_new/sha256_impl.c:53]   --->   Operation 124 'xor' 'xor_ln53_3' <Predicate = (!icmp_ln51)> <Delay = 0.99> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.99> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 125 [1/1] (0.00ns)   --->   "%zext_ln53 = zext i7 %i_2 to i64" [SHA_new/SHA_new/sha256_impl.c:53]   --->   Operation 125 'zext' 'zext_ln53' <Predicate = (!icmp_ln51)> <Delay = 0.00>
ST_8 : Operation 126 [1/1] (0.00ns)   --->   "%k_addr = getelementptr inbounds [64 x i32]* @k, i64 0, i64 %zext_ln53" [SHA_new/SHA_new/sha256_impl.c:53]   --->   Operation 126 'getelementptr' 'k_addr' <Predicate = (!icmp_ln51)> <Delay = 0.00>
ST_8 : Operation 127 [2/2] (3.25ns)   --->   "%k_load = load i32* %k_addr, align 4" [SHA_new/SHA_new/sha256_impl.c:53]   --->   Operation 127 'load' 'k_load' <Predicate = (!icmp_ln51)> <Delay = 3.25> <Core = "ROM_nP">   --->   Core 52 'ROM_nP' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load'> <Ports = 0> <Width = 32> <Depth = 64> <ROM>
ST_8 : Operation 128 [1/1] (0.00ns)   --->   "%m_addr_6 = getelementptr inbounds [64 x i32]* %m, i64 0, i64 %zext_ln53" [SHA_new/SHA_new/sha256_impl.c:53]   --->   Operation 128 'getelementptr' 'm_addr_6' <Predicate = (!icmp_ln51)> <Delay = 0.00>
ST_8 : Operation 129 [2/2] (3.25ns)   --->   "%m_load_4 = load i32* %m_addr_6, align 4" [SHA_new/SHA_new/sha256_impl.c:53]   --->   Operation 129 'load' 'm_load_4' <Predicate = (!icmp_ln51)> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 64> <RAM>
ST_8 : Operation 130 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln53_1 = add i32 %xor_ln53_1, %xor_ln53_3" [SHA_new/SHA_new/sha256_impl.c:53]   --->   Operation 130 'add' 'add_ln53_1' <Predicate = (!icmp_ln51)> <Delay = 0.00> <Core = "TAddSub">   --->   Core 83 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_8 : Operation 131 [1/1] (4.37ns) (root node of TernaryAdder)   --->   "%add_ln53_2 = add i32 %add_ln53_1, %h_0" [SHA_new/SHA_new/sha256_impl.c:53]   --->   Operation 131 'add' 'add_ln53_2' <Predicate = (!icmp_ln51)> <Delay = 4.37> <Core = "TAddSub">   --->   Core 83 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_8 : Operation 132 [1/1] (0.00ns) (grouped into LUT with out node xor_ln54_3)   --->   "%xor_ln54_2 = xor i32 %c, %d" [SHA_new/SHA_new/sha256_impl.c:54]   --->   Operation 132 'xor' 'xor_ln54_2' <Predicate = (!icmp_ln51)> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.99> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 133 [1/1] (0.00ns) (grouped into LUT with out node xor_ln54_3)   --->   "%and_ln54 = and i32 %b, %xor_ln54_2" [SHA_new/SHA_new/sha256_impl.c:54]   --->   Operation 133 'and' 'and_ln54' <Predicate = (!icmp_ln51)> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.99> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 134 [1/1] (0.00ns) (grouped into LUT with out node xor_ln54_3)   --->   "%and_ln54_1 = and i32 %c, %d" [SHA_new/SHA_new/sha256_impl.c:54]   --->   Operation 134 'and' 'and_ln54_1' <Predicate = (!icmp_ln51)> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.99> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 135 [1/1] (0.99ns) (out node of the LUT)   --->   "%xor_ln54_3 = xor i32 %and_ln54, %and_ln54_1" [SHA_new/SHA_new/sha256_impl.c:54]   --->   Operation 135 'xor' 'xor_ln54_3' <Predicate = (!icmp_ln51)> <Delay = 0.99> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.99> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 136 [1/1] (2.55ns)   --->   "%add_ln65 = add i32 %b, %ctx_state_0_read_1" [SHA_new/SHA_new/sha256_impl.c:65]   --->   Operation 136 'add' 'add_ln65' <Predicate = (icmp_ln51)> <Delay = 2.55> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 137 [1/1] (2.55ns)   --->   "%add_ln66 = add i32 %c, %ctx_state_1_read_1" [SHA_new/SHA_new/sha256_impl.c:66]   --->   Operation 137 'add' 'add_ln66' <Predicate = (icmp_ln51)> <Delay = 2.55> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 138 [1/1] (2.55ns)   --->   "%add_ln67 = add i32 %d, %ctx_state_2_read_1" [SHA_new/SHA_new/sha256_impl.c:67]   --->   Operation 138 'add' 'add_ln67' <Predicate = (icmp_ln51)> <Delay = 2.55> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 139 [1/1] (2.55ns)   --->   "%add_ln68 = add i32 %d_0, %ctx_state_3_read_1" [SHA_new/SHA_new/sha256_impl.c:68]   --->   Operation 139 'add' 'add_ln68' <Predicate = (icmp_ln51)> <Delay = 2.55> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 140 [1/1] (2.55ns)   --->   "%add_ln69 = add i32 %f, %ctx_state_4_read_1" [SHA_new/SHA_new/sha256_impl.c:69]   --->   Operation 140 'add' 'add_ln69' <Predicate = (icmp_ln51)> <Delay = 2.55> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 141 [1/1] (2.55ns)   --->   "%add_ln70 = add i32 %g, %ctx_state_5_read_1" [SHA_new/SHA_new/sha256_impl.c:70]   --->   Operation 141 'add' 'add_ln70' <Predicate = (icmp_ln51)> <Delay = 2.55> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 142 [1/1] (2.55ns)   --->   "%add_ln71 = add i32 %h, %ctx_state_6_read_1" [SHA_new/SHA_new/sha256_impl.c:71]   --->   Operation 142 'add' 'add_ln71' <Predicate = (icmp_ln51)> <Delay = 2.55> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 143 [1/1] (2.55ns)   --->   "%add_ln72 = add i32 %h_0, %ctx_state_7_read_1" [SHA_new/SHA_new/sha256_impl.c:72]   --->   Operation 143 'add' 'add_ln72' <Predicate = (icmp_ln51)> <Delay = 2.55> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 144 [1/1] (0.00ns)   --->   "%mrv = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32 } undef, i32 %add_ln65, 0" [SHA_new/SHA_new/sha256_impl.c:73]   --->   Operation 144 'insertvalue' 'mrv' <Predicate = (icmp_ln51)> <Delay = 0.00>
ST_8 : Operation 145 [1/1] (0.00ns)   --->   "%mrv_1 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %mrv, i32 %add_ln66, 1" [SHA_new/SHA_new/sha256_impl.c:73]   --->   Operation 145 'insertvalue' 'mrv_1' <Predicate = (icmp_ln51)> <Delay = 0.00>
ST_8 : Operation 146 [1/1] (0.00ns)   --->   "%mrv_2 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_1, i32 %add_ln67, 2" [SHA_new/SHA_new/sha256_impl.c:73]   --->   Operation 146 'insertvalue' 'mrv_2' <Predicate = (icmp_ln51)> <Delay = 0.00>
ST_8 : Operation 147 [1/1] (0.00ns)   --->   "%mrv_3 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_2, i32 %add_ln68, 3" [SHA_new/SHA_new/sha256_impl.c:73]   --->   Operation 147 'insertvalue' 'mrv_3' <Predicate = (icmp_ln51)> <Delay = 0.00>
ST_8 : Operation 148 [1/1] (0.00ns)   --->   "%mrv_4 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_3, i32 %add_ln69, 4" [SHA_new/SHA_new/sha256_impl.c:73]   --->   Operation 148 'insertvalue' 'mrv_4' <Predicate = (icmp_ln51)> <Delay = 0.00>
ST_8 : Operation 149 [1/1] (0.00ns)   --->   "%mrv_5 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_4, i32 %add_ln70, 5" [SHA_new/SHA_new/sha256_impl.c:73]   --->   Operation 149 'insertvalue' 'mrv_5' <Predicate = (icmp_ln51)> <Delay = 0.00>
ST_8 : Operation 150 [1/1] (0.00ns)   --->   "%mrv_6 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_5, i32 %add_ln71, 6" [SHA_new/SHA_new/sha256_impl.c:73]   --->   Operation 150 'insertvalue' 'mrv_6' <Predicate = (icmp_ln51)> <Delay = 0.00>
ST_8 : Operation 151 [1/1] (0.00ns)   --->   "%mrv_7 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_6, i32 %add_ln72, 7" [SHA_new/SHA_new/sha256_impl.c:73]   --->   Operation 151 'insertvalue' 'mrv_7' <Predicate = (icmp_ln51)> <Delay = 0.00>
ST_8 : Operation 152 [1/1] (0.00ns)   --->   "ret { i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_7" [SHA_new/SHA_new/sha256_impl.c:73]   --->   Operation 152 'ret' <Predicate = (icmp_ln51)> <Delay = 0.00>

State 9 <SV = 4> <Delay = 7.62>
ST_9 : Operation 153 [1/2] (3.25ns)   --->   "%k_load = load i32* %k_addr, align 4" [SHA_new/SHA_new/sha256_impl.c:53]   --->   Operation 153 'load' 'k_load' <Predicate = true> <Delay = 3.25> <Core = "ROM_nP">   --->   Core 52 'ROM_nP' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load'> <Ports = 0> <Width = 32> <Depth = 64> <ROM>
ST_9 : Operation 154 [1/2] (3.25ns)   --->   "%m_load_4 = load i32* %m_addr_6, align 4" [SHA_new/SHA_new/sha256_impl.c:53]   --->   Operation 154 'load' 'm_load_4' <Predicate = true> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 64> <RAM>
ST_9 : Operation 155 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln53 = add i32 %k_load, %m_load_4" [SHA_new/SHA_new/sha256_impl.c:53]   --->   Operation 155 'add' 'add_ln53' <Predicate = true> <Delay = 0.00> <Core = "TAddSub">   --->   Core 83 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_9 : Operation 156 [1/1] (4.37ns) (root node of TernaryAdder)   --->   "%t1 = add i32 %add_ln53_2, %add_ln53" [SHA_new/SHA_new/sha256_impl.c:53]   --->   Operation 156 'add' 't1' <Predicate = true> <Delay = 4.37> <Core = "TAddSub">   --->   Core 83 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>

State 10 <SV = 5> <Delay = 5.36>
ST_10 : Operation 157 [1/1] (0.00ns) (grouped into LUT with out node xor_ln54_1)   --->   "%lshr_ln2 = call i30 @_ssdm_op_PartSelect.i30.i32.i32.i32(i32 %b, i32 2, i32 31)" [SHA_new/SHA_new/sha256_impl.c:54]   --->   Operation 157 'partselect' 'lshr_ln2' <Predicate = true> <Delay = 0.00>
ST_10 : Operation 158 [1/1] (0.00ns) (grouped into LUT with out node xor_ln54_1)   --->   "%trunc_ln54 = trunc i32 %b to i2" [SHA_new/SHA_new/sha256_impl.c:54]   --->   Operation 158 'trunc' 'trunc_ln54' <Predicate = true> <Delay = 0.00>
ST_10 : Operation 159 [1/1] (0.00ns) (grouped into LUT with out node xor_ln54_1)   --->   "%or_ln2 = call i32 @_ssdm_op_BitConcatenate.i32.i2.i30(i2 %trunc_ln54, i30 %lshr_ln2)" [SHA_new/SHA_new/sha256_impl.c:54]   --->   Operation 159 'bitconcatenate' 'or_ln2' <Predicate = true> <Delay = 0.00>
ST_10 : Operation 160 [1/1] (0.00ns) (grouped into LUT with out node xor_ln54_1)   --->   "%lshr_ln54_1 = call i19 @_ssdm_op_PartSelect.i19.i32.i32.i32(i32 %b, i32 13, i32 31)" [SHA_new/SHA_new/sha256_impl.c:54]   --->   Operation 160 'partselect' 'lshr_ln54_1' <Predicate = true> <Delay = 0.00>
ST_10 : Operation 161 [1/1] (0.00ns) (grouped into LUT with out node xor_ln54_1)   --->   "%trunc_ln54_1 = trunc i32 %b to i13" [SHA_new/SHA_new/sha256_impl.c:54]   --->   Operation 161 'trunc' 'trunc_ln54_1' <Predicate = true> <Delay = 0.00>
ST_10 : Operation 162 [1/1] (0.00ns) (grouped into LUT with out node xor_ln54_1)   --->   "%or_ln54_1 = call i32 @_ssdm_op_BitConcatenate.i32.i13.i19(i13 %trunc_ln54_1, i19 %lshr_ln54_1)" [SHA_new/SHA_new/sha256_impl.c:54]   --->   Operation 162 'bitconcatenate' 'or_ln54_1' <Predicate = true> <Delay = 0.00>
ST_10 : Operation 163 [1/1] (0.00ns) (grouped into LUT with out node xor_ln54_1)   --->   "%lshr_ln54_2 = call i10 @_ssdm_op_PartSelect.i10.i32.i32.i32(i32 %b, i32 22, i32 31)" [SHA_new/SHA_new/sha256_impl.c:54]   --->   Operation 163 'partselect' 'lshr_ln54_2' <Predicate = true> <Delay = 0.00>
ST_10 : Operation 164 [1/1] (0.00ns) (grouped into LUT with out node xor_ln54_1)   --->   "%trunc_ln54_2 = trunc i32 %b to i22" [SHA_new/SHA_new/sha256_impl.c:54]   --->   Operation 164 'trunc' 'trunc_ln54_2' <Predicate = true> <Delay = 0.00>
ST_10 : Operation 165 [1/1] (0.00ns) (grouped into LUT with out node xor_ln54_1)   --->   "%or_ln54_2 = call i32 @_ssdm_op_BitConcatenate.i32.i22.i10(i22 %trunc_ln54_2, i10 %lshr_ln54_2)" [SHA_new/SHA_new/sha256_impl.c:54]   --->   Operation 165 'bitconcatenate' 'or_ln54_2' <Predicate = true> <Delay = 0.00>
ST_10 : Operation 166 [1/1] (0.00ns) (grouped into LUT with out node xor_ln54_1)   --->   "%xor_ln54 = xor i32 %or_ln2, %or_ln54_1" [SHA_new/SHA_new/sha256_impl.c:54]   --->   Operation 166 'xor' 'xor_ln54' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.99> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_10 : Operation 167 [1/1] (0.99ns) (out node of the LUT)   --->   "%xor_ln54_1 = xor i32 %xor_ln54, %or_ln54_2" [SHA_new/SHA_new/sha256_impl.c:54]   --->   Operation 167 'xor' 'xor_ln54_1' <Predicate = true> <Delay = 0.99> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.99> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_10 : Operation 168 [1/1] (2.55ns)   --->   "%e = add i32 %t1, %d_0" [SHA_new/SHA_new/sha256_impl.c:58]   --->   Operation 168 'add' 'e' <Predicate = true> <Delay = 2.55> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_10 : Operation 169 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln62 = add i32 %xor_ln54_3, %t1" [SHA_new/SHA_new/sha256_impl.c:62]   --->   Operation 169 'add' 'add_ln62' <Predicate = true> <Delay = 0.00> <Core = "TAddSub">   --->   Core 83 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_10 : Operation 170 [1/1] (4.37ns) (root node of TernaryAdder)   --->   "%a = add i32 %add_ln62, %xor_ln54_1" [SHA_new/SHA_new/sha256_impl.c:62]   --->   Operation 170 'add' 'a' <Predicate = true> <Delay = 4.37> <Core = "TAddSub">   --->   Core 83 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_10 : Operation 171 [1/1] (0.00ns)   --->   "br label %.preheader8" [SHA_new/SHA_new/sha256_impl.c:51]   --->   Operation 171 'br' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 1.77ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('i_0', SHA_new/SHA_new/sha256_impl.c:34) with incoming values : ('add_ln34', SHA_new/SHA_new/sha256_impl.c:34) [25]  (1.77 ns)

 <State 2>: 2.32ns
The critical path consists of the following:
	'phi' operation ('i_0', SHA_new/SHA_new/sha256_impl.c:34) with incoming values : ('add_ln34', SHA_new/SHA_new/sha256_impl.c:34) [25]  (0 ns)
	'getelementptr' operation ('data_0_addr', SHA_new/SHA_new/sha256_impl.c:36) [32]  (0 ns)
	'load' operation ('data_0_load', SHA_new/SHA_new/sha256_impl.c:36) on array 'data_0' [33]  (2.32 ns)

 <State 3>: 5.58ns
The critical path consists of the following:
	'load' operation ('data_0_load', SHA_new/SHA_new/sha256_impl.c:36) on array 'data_0' [33]  (2.32 ns)
	'store' operation ('store_ln36', SHA_new/SHA_new/sha256_impl.c:36) of variable 'or_ln36_5', SHA_new/SHA_new/sha256_impl.c:36 on array 'm', SHA_new/SHA_new/sha256_impl.c:32 [42]  (3.25 ns)

 <State 4>: 5.12ns
The critical path consists of the following:
	'phi' operation ('i') with incoming values : ('i', SHA_new/SHA_new/sha256_impl.c:38) [47]  (0 ns)
	'add' operation ('add_ln40', SHA_new/SHA_new/sha256_impl.c:40) [52]  (1.87 ns)
	'getelementptr' operation ('m_addr_1', SHA_new/SHA_new/sha256_impl.c:40) [54]  (0 ns)
	'load' operation ('m_load', SHA_new/SHA_new/sha256_impl.c:40) on array 'm', SHA_new/SHA_new/sha256_impl.c:32 [55]  (3.25 ns)

 <State 5>: 5.12ns
The critical path consists of the following:
	'add' operation ('add_ln40_2', SHA_new/SHA_new/sha256_impl.c:40) [70]  (1.87 ns)
	'getelementptr' operation ('m_addr_3', SHA_new/SHA_new/sha256_impl.c:40) [72]  (0 ns)
	'load' operation ('m_load_2', SHA_new/SHA_new/sha256_impl.c:40) on array 'm', SHA_new/SHA_new/sha256_impl.c:32 [73]  (3.25 ns)

 <State 6>: 5.81ns
The critical path consists of the following:
	'load' operation ('m_load_2', SHA_new/SHA_new/sha256_impl.c:40) on array 'm', SHA_new/SHA_new/sha256_impl.c:32 [73]  (3.25 ns)
	'xor' operation ('xor_ln40_3', SHA_new/SHA_new/sha256_impl.c:40) [83]  (0 ns)
	'add' operation ('add_ln40_5', SHA_new/SHA_new/sha256_impl.c:40) [89]  (2.55 ns)

 <State 7>: 7.63ns
The critical path consists of the following:
	'add' operation ('add_ln40_4', SHA_new/SHA_new/sha256_impl.c:40) [88]  (0 ns)
	'add' operation ('add_ln40_6', SHA_new/SHA_new/sha256_impl.c:40) [90]  (4.37 ns)
	'store' operation ('store_ln40', SHA_new/SHA_new/sha256_impl.c:40) of variable 'add_ln40_6', SHA_new/SHA_new/sha256_impl.c:40 on array 'm', SHA_new/SHA_new/sha256_impl.c:32 [93]  (3.25 ns)

 <State 8>: 5.36ns
The critical path consists of the following:
	'phi' operation ('g') with incoming values : ('ctx_state_6_read_1') ('ctx_state_5_read_1') ('ctx_state_4_read_1') ('e', SHA_new/SHA_new/sha256_impl.c:58) [100]  (0 ns)
	'and' operation ('and_ln53_1', SHA_new/SHA_new/sha256_impl.c:53) [126]  (0 ns)
	'xor' operation ('xor_ln53_3', SHA_new/SHA_new/sha256_impl.c:53) [127]  (0.993 ns)
	'add' operation ('add_ln53_1', SHA_new/SHA_new/sha256_impl.c:53) [134]  (0 ns)
	'add' operation ('add_ln53_2', SHA_new/SHA_new/sha256_impl.c:53) [135]  (4.37 ns)

 <State 9>: 7.63ns
The critical path consists of the following:
	'load' operation ('k_load', SHA_new/SHA_new/sha256_impl.c:53) on array 'k' [130]  (3.25 ns)
	'add' operation ('add_ln53', SHA_new/SHA_new/sha256_impl.c:53) [133]  (0 ns)
	'add' operation ('t1', SHA_new/SHA_new/sha256_impl.c:53) [136]  (4.37 ns)

 <State 10>: 5.36ns
The critical path consists of the following:
	'xor' operation ('xor_ln54', SHA_new/SHA_new/sha256_impl.c:54) [146]  (0 ns)
	'xor' operation ('xor_ln54_1', SHA_new/SHA_new/sha256_impl.c:54) [147]  (0.993 ns)
	'add' operation ('a', SHA_new/SHA_new/sha256_impl.c:62) [154]  (4.37 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
