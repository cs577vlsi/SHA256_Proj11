

================================================================
== Vivado HLS Report for 'sha256'
================================================================
* Date:           Wed Apr  7 17:47:18 2021

* Version:        2019.1 (Build 2552052 on Fri May 24 15:28:33 MDT 2019)
* Project:        SHA
* Solution:       solution2_array_partition
* Product family: zynq
* Target device:  xc7z020-clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|     8.522|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-------+-----+-------+---------+
    |   Latency   |   Interval  | Pipeline|
    | min |  max  | min |  max  |   Type  |
    +-----+-------+-----+-------+---------+
    |  843|  56491|  843|  56491|   none  |
    +-----+-------+-----+-------+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-------------+-----+-------+----------+-----------+-----------+----------+----------+
        |             |   Latency   | Iteration|  Initiation Interval  |   Trip   |          |
        |  Loop Name  | min |  max  |  Latency |  achieved |   target  |   Count  | Pipelined|
        +-------------+-----+-------+----------+-----------+-----------+----------+----------+
        |- Loop 1     |  336|  55500| 28 ~ 555 |          -|          -| 12 ~ 100 |    no    |
        | + Loop 1.1  |  128|    128|         2|          -|          -|        64|    no    |
        | + Loop 1.2  |   24|    126|         2|          -|          -|  12 ~ 63 |    no    |
        |- Loop 2     |   64|     64|         2|          -|          -|        32|    no    |
        +-------------+-----+-------+----------+-----------+-----------+----------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 10
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 8 3 6 
3 --> 4 5 
4 --> 3 
5 --> 2 
6 --> 5 7 
7 --> 6 
8 --> 9 
9 --> 10 
10 --> 9 

* FSM state operations: 

State 1 <SV = 0> <Delay = 2.81>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%n_0 = alloca i32"   --->   Operation 11 'alloca' 'n_0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%sha256ctx_datalen_1 = alloca i32"   --->   Operation 12 'alloca' 'sha256ctx_datalen_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%sha256ctx_bitlen_0_2 = alloca i32"   --->   Operation 13 'alloca' 'sha256ctx_bitlen_0_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "%sha256ctx_bitlen_1_2 = alloca i32"   --->   Operation 14 'alloca' 'sha256ctx_bitlen_1_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "%sha256ctx_state_0_2 = alloca i32"   --->   Operation 15 'alloca' 'sha256ctx_state_0_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "%sha256ctx_state_1_2 = alloca i32"   --->   Operation 16 'alloca' 'sha256ctx_state_1_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "%sha256ctx_state_2_2 = alloca i32"   --->   Operation 17 'alloca' 'sha256ctx_state_2_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%sha256ctx_state_3_2 = alloca i32"   --->   Operation 18 'alloca' 'sha256ctx_state_3_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "%sha256ctx_state_4_2 = alloca i32"   --->   Operation 19 'alloca' 'sha256ctx_state_4_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "%sha256ctx_state_5_2 = alloca i32"   --->   Operation 20 'alloca' 'sha256ctx_state_5_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "%sha256ctx_state_6_2 = alloca i32"   --->   Operation 21 'alloca' 'sha256ctx_state_6_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "%sha256ctx_state_7_2 = alloca i32"   --->   Operation 22 'alloca' 'sha256ctx_state_7_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 23 [1/1] (0.00ns)   --->   "%seg_offset_1 = alloca i32"   --->   Operation 23 'alloca' 'seg_offset_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap([256 x i8]* %data) nounwind, !map !27"   --->   Operation 24 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 25 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i32 %base_offset) nounwind, !map !33"   --->   Operation 25 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 26 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i32 %bytes) nounwind, !map !39"   --->   Operation 26 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 27 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap([32 x i8]* %digest) nounwind, !map !43"   --->   Operation 27 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 28 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecTopModule([7 x i8]* @sha256_str) nounwind"   --->   Operation 28 'spectopmodule' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 29 [1/1] (1.00ns)   --->   "%bytes_read = call i32 @_ssdm_op_Read.s_axilite.i32(i32 %bytes) nounwind"   --->   Operation 29 'read' 'bytes_read' <Predicate = true> <Delay = 1.00> <Core = "s_axilite">   --->   Core 10 's_axilite' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write'>
ST_1 : Operation 30 [1/1] (1.00ns)   --->   "%base_offset_read = call i32 @_ssdm_op_Read.s_axilite.i32(i32 %base_offset) nounwind"   --->   Operation 30 'read' 'base_offset_read' <Predicate = true> <Delay = 1.00> <Core = "s_axilite">   --->   Core 10 's_axilite' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write'>
ST_1 : Operation 31 [1/1] (0.00ns)   --->   "%seg_buf = alloca [64 x i8], align 16" [SHA_new/SHA_new/sha256.c:22]   --->   Operation 31 'alloca' 'seg_buf' <Predicate = true> <Delay = 0.00> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 64> <RAM>
ST_1 : Operation 32 [1/1] (0.00ns)   --->   "%sha256ctx_data_0 = alloca [16 x i8], align 1" [SHA_new/SHA_new/sha256.c:28]   --->   Operation 32 'alloca' 'sha256ctx_data_0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 33 [1/1] (0.00ns)   --->   "%sha256ctx_data_1 = alloca [16 x i8], align 1" [SHA_new/SHA_new/sha256.c:28]   --->   Operation 33 'alloca' 'sha256ctx_data_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 34 [1/1] (0.00ns)   --->   "%sha256ctx_data_2 = alloca [16 x i8], align 1" [SHA_new/SHA_new/sha256.c:28]   --->   Operation 34 'alloca' 'sha256ctx_data_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 35 [1/1] (0.00ns)   --->   "%sha256ctx_data_3 = alloca [16 x i8], align 1" [SHA_new/SHA_new/sha256.c:28]   --->   Operation 35 'alloca' 'sha256ctx_data_3' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 36 [1/1] (0.00ns)   --->   "%empty = call i32 (...)* @_ssdm_op_SpecMemCore([256 x i8]* %data, [1 x i8]* @p_str, [7 x i8]* @RAM_1P_str, [1 x i8]* @p_str, i32 -1, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str) nounwind" [SHA_new/SHA_new/sha256.c:15]   --->   Operation 36 'specmemcore' 'empty' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 37 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface([256 x i8]* %data, [10 x i8]* @p_str6, i32 0, i32 0, [1 x i8]* @p_str17, i32 0, i32 0, [1 x i8]* @p_str17, [1 x i8]* @p_str17, [1 x i8]* @p_str17, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str17, [1 x i8]* @p_str17) nounwind" [SHA_new/SHA_new/sha256.c:15]   --->   Operation 37 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 38 [1/1] (0.00ns)   --->   "%empty_13 = call i32 (...)* @_ssdm_op_SpecMemCore([32 x i8]* %digest, [1 x i8]* @p_str, [7 x i8]* @RAM_1P_str, [1 x i8]* @p_str, i32 -1, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str) nounwind" [SHA_new/SHA_new/sha256.c:16]   --->   Operation 38 'specmemcore' 'empty_13' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 39 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface([32 x i8]* %digest, [10 x i8]* @p_str6, i32 0, i32 0, [1 x i8]* @p_str17, i32 0, i32 0, [1 x i8]* @p_str17, [1 x i8]* @p_str17, [1 x i8]* @p_str17, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str17, [1 x i8]* @p_str17) nounwind" [SHA_new/SHA_new/sha256.c:16]   --->   Operation 39 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 40 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i32 %base_offset, [10 x i8]* @p_str6, i32 0, i32 0, [1 x i8]* @p_str17, i32 0, i32 0, [1 x i8]* @p_str17, [1 x i8]* @p_str17, [1 x i8]* @p_str17, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str17, [1 x i8]* @p_str17) nounwind" [SHA_new/SHA_new/sha256.c:17]   --->   Operation 40 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 41 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i32 %bytes, [10 x i8]* @p_str6, i32 0, i32 0, [1 x i8]* @p_str17, i32 0, i32 0, [1 x i8]* @p_str17, [1 x i8]* @p_str17, [1 x i8]* @p_str17, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str17, [1 x i8]* @p_str17) nounwind" [SHA_new/SHA_new/sha256.c:18]   --->   Operation 41 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 42 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i32 0, [10 x i8]* @p_str6, i32 0, i32 0, [1 x i8]* @p_str17, i32 0, i32 0, [1 x i8]* @p_str17, [1 x i8]* @p_str17, [1 x i8]* @p_str17, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str17, [1 x i8]* @p_str17) nounwind" [SHA_new/SHA_new/sha256.c:19]   --->   Operation 42 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 43 [1/1] (0.00ns)   --->   "%trunc_ln32 = trunc i32 %base_offset_read to i10" [SHA_new/SHA_new/sha256.c:32]   --->   Operation 43 'trunc' 'trunc_ln32' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 44 [1/1] (1.76ns)   --->   "store i32 0, i32* %seg_offset_1" [SHA_new/SHA_new/sha256.c:32]   --->   Operation 44 'store' <Predicate = true> <Delay = 1.76>
ST_1 : Operation 45 [1/1] (1.81ns)   --->   "store i32 1541459225, i32* %sha256ctx_state_7_2" [SHA_new/SHA_new/sha256.c:32]   --->   Operation 45 'store' <Predicate = true> <Delay = 1.81>
ST_1 : Operation 46 [1/1] (1.81ns)   --->   "store i32 528734635, i32* %sha256ctx_state_6_2" [SHA_new/SHA_new/sha256.c:32]   --->   Operation 46 'store' <Predicate = true> <Delay = 1.81>
ST_1 : Operation 47 [1/1] (1.81ns)   --->   "store i32 -1694144372, i32* %sha256ctx_state_5_2" [SHA_new/SHA_new/sha256.c:32]   --->   Operation 47 'store' <Predicate = true> <Delay = 1.81>
ST_1 : Operation 48 [1/1] (1.81ns)   --->   "store i32 1359893119, i32* %sha256ctx_state_4_2" [SHA_new/SHA_new/sha256.c:32]   --->   Operation 48 'store' <Predicate = true> <Delay = 1.81>
ST_1 : Operation 49 [1/1] (1.81ns)   --->   "store i32 -1521486534, i32* %sha256ctx_state_3_2" [SHA_new/SHA_new/sha256.c:32]   --->   Operation 49 'store' <Predicate = true> <Delay = 1.81>
ST_1 : Operation 50 [1/1] (1.81ns)   --->   "store i32 1013904242, i32* %sha256ctx_state_2_2" [SHA_new/SHA_new/sha256.c:32]   --->   Operation 50 'store' <Predicate = true> <Delay = 1.81>
ST_1 : Operation 51 [1/1] (1.81ns)   --->   "store i32 -1150833019, i32* %sha256ctx_state_1_2" [SHA_new/SHA_new/sha256.c:32]   --->   Operation 51 'store' <Predicate = true> <Delay = 1.81>
ST_1 : Operation 52 [1/1] (1.81ns)   --->   "store i32 1779033703, i32* %sha256ctx_state_0_2" [SHA_new/SHA_new/sha256.c:32]   --->   Operation 52 'store' <Predicate = true> <Delay = 1.81>
ST_1 : Operation 53 [1/1] (1.81ns)   --->   "store i32 0, i32* %sha256ctx_bitlen_1_2" [SHA_new/SHA_new/sha256.c:32]   --->   Operation 53 'store' <Predicate = true> <Delay = 1.81>
ST_1 : Operation 54 [1/1] (1.81ns)   --->   "store i32 0, i32* %sha256ctx_bitlen_0_2" [SHA_new/SHA_new/sha256.c:32]   --->   Operation 54 'store' <Predicate = true> <Delay = 1.81>
ST_1 : Operation 55 [1/1] (1.81ns)   --->   "store i32 0, i32* %sha256ctx_datalen_1" [SHA_new/SHA_new/sha256.c:32]   --->   Operation 55 'store' <Predicate = true> <Delay = 1.81>
ST_1 : Operation 56 [1/1] (1.81ns)   --->   "store i32 %bytes_read, i32* %n_0" [SHA_new/SHA_new/sha256.c:32]   --->   Operation 56 'store' <Predicate = true> <Delay = 1.81>
ST_1 : Operation 57 [1/1] (0.00ns)   --->   "br label %1" [SHA_new/SHA_new/sha256.c:32]   --->   Operation 57 'br' <Predicate = true> <Delay = 0.00>

State 2 <SV = 1> <Delay = 2.47>
ST_2 : Operation 58 [1/1] (0.00ns)   --->   "%n_0_load = load i32* %n_0" [SHA_new/SHA_new/sha256.c:39]   --->   Operation 58 'load' 'n_0_load' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 59 [1/1] (2.47ns)   --->   "%icmp_ln32 = icmp eq i32 %n_0_load, 0" [SHA_new/SHA_new/sha256.c:32]   --->   Operation 59 'icmp' 'icmp_ln32' <Predicate = true> <Delay = 2.47> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.42> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 60 [1/1] (0.00ns)   --->   "br i1 %icmp_ln32, label %6, label %hls_label_0_begin" [SHA_new/SHA_new/sha256.c:32]   --->   Operation 60 'br' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 61 [1/1] (0.00ns)   --->   "%seg_offset_1_load = load i32* %seg_offset_1" [SHA_new/SHA_new/sha256.c:35]   --->   Operation 61 'load' 'seg_offset_1_load' <Predicate = (!icmp_ln32)> <Delay = 0.00>
ST_2 : Operation 62 [1/1] (0.00ns)   --->   "%tmp = call i32 (...)* @_ssdm_op_SpecRegionBegin([12 x i8]* @p_str28) nounwind" [SHA_new/SHA_new/sha256.c:33]   --->   Operation 62 'specregionbegin' 'tmp' <Predicate = (!icmp_ln32)> <Delay = 0.00>
ST_2 : Operation 63 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopTripCount(i32 12, i32 100, i32 56, [1 x i8]* @p_str17) nounwind" [SHA_new/SHA_new/sha256.c:34]   --->   Operation 63 'speclooptripcount' <Predicate = (!icmp_ln32)> <Delay = 0.00>
ST_2 : Operation 64 [1/1] (0.00ns)   --->   "%tmp_3 = call i26 @_ssdm_op_PartSelect.i26.i32.i32.i32(i32 %n_0_load, i32 6, i32 31)" [SHA_new/SHA_new/sha256.c:35]   --->   Operation 64 'partselect' 'tmp_3' <Predicate = (!icmp_ln32)> <Delay = 0.00>
ST_2 : Operation 65 [1/1] (2.45ns)   --->   "%icmp_ln35 = icmp eq i26 %tmp_3, 0" [SHA_new/SHA_new/sha256.c:35]   --->   Operation 65 'icmp' 'icmp_ln35' <Predicate = (!icmp_ln32)> <Delay = 2.45> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.42> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 66 [1/1] (0.00ns)   --->   "%trunc_ln35 = trunc i32 %seg_offset_1_load to i10" [SHA_new/SHA_new/sha256.c:35]   --->   Operation 66 'trunc' 'trunc_ln35' <Predicate = (!icmp_ln32)> <Delay = 0.00>
ST_2 : Operation 67 [1/1] (0.00ns)   --->   "br i1 %icmp_ln35, label %.preheader.preheader, label %.preheader4.preheader" [SHA_new/SHA_new/sha256.c:35]   --->   Operation 67 'br' <Predicate = (!icmp_ln32)> <Delay = 0.00>
ST_2 : Operation 68 [1/1] (1.76ns)   --->   "br label %.preheader4" [SHA_new/SHA_new/sha256.c:37]   --->   Operation 68 'br' <Predicate = (!icmp_ln32 & !icmp_ln35)> <Delay = 1.76>
ST_2 : Operation 69 [1/1] (1.76ns)   --->   "br label %.preheader" [SHA_new/SHA_new/sha256.c:45]   --->   Operation 69 'br' <Predicate = (!icmp_ln32 & icmp_ln35)> <Delay = 1.76>
ST_2 : Operation 70 [1/1] (0.00ns)   --->   "%sha256ctx_datalen_1_2 = load i32* %sha256ctx_datalen_1" [SHA_new/SHA_new/sha256.c:54]   --->   Operation 70 'load' 'sha256ctx_datalen_1_2' <Predicate = (icmp_ln32)> <Delay = 0.00>
ST_2 : Operation 71 [1/1] (0.00ns)   --->   "%sha256ctx_bitlen_0_2_17 = load i32* %sha256ctx_bitlen_0_2" [SHA_new/SHA_new/sha256.c:54]   --->   Operation 71 'load' 'sha256ctx_bitlen_0_2_17' <Predicate = (icmp_ln32)> <Delay = 0.00>
ST_2 : Operation 72 [1/1] (0.00ns)   --->   "%sha256ctx_bitlen_1_2_18 = load i32* %sha256ctx_bitlen_1_2" [SHA_new/SHA_new/sha256.c:54]   --->   Operation 72 'load' 'sha256ctx_bitlen_1_2_18' <Predicate = (icmp_ln32)> <Delay = 0.00>
ST_2 : Operation 73 [1/1] (0.00ns)   --->   "%sha256ctx_state_0_2_3 = load i32* %sha256ctx_state_0_2" [SHA_new/SHA_new/sha256.c:54]   --->   Operation 73 'load' 'sha256ctx_state_0_2_3' <Predicate = (icmp_ln32)> <Delay = 0.00>
ST_2 : Operation 74 [1/1] (0.00ns)   --->   "%sha256ctx_state_1_2_3 = load i32* %sha256ctx_state_1_2" [SHA_new/SHA_new/sha256.c:54]   --->   Operation 74 'load' 'sha256ctx_state_1_2_3' <Predicate = (icmp_ln32)> <Delay = 0.00>
ST_2 : Operation 75 [1/1] (0.00ns)   --->   "%sha256ctx_state_2_2_3 = load i32* %sha256ctx_state_2_2" [SHA_new/SHA_new/sha256.c:54]   --->   Operation 75 'load' 'sha256ctx_state_2_2_3' <Predicate = (icmp_ln32)> <Delay = 0.00>
ST_2 : Operation 76 [1/1] (0.00ns)   --->   "%sha256ctx_state_3_2_3 = load i32* %sha256ctx_state_3_2" [SHA_new/SHA_new/sha256.c:54]   --->   Operation 76 'load' 'sha256ctx_state_3_2_3' <Predicate = (icmp_ln32)> <Delay = 0.00>
ST_2 : Operation 77 [1/1] (0.00ns)   --->   "%sha256ctx_state_4_2_3 = load i32* %sha256ctx_state_4_2" [SHA_new/SHA_new/sha256.c:54]   --->   Operation 77 'load' 'sha256ctx_state_4_2_3' <Predicate = (icmp_ln32)> <Delay = 0.00>
ST_2 : Operation 78 [1/1] (0.00ns)   --->   "%sha256ctx_state_5_2_3 = load i32* %sha256ctx_state_5_2" [SHA_new/SHA_new/sha256.c:54]   --->   Operation 78 'load' 'sha256ctx_state_5_2_3' <Predicate = (icmp_ln32)> <Delay = 0.00>
ST_2 : Operation 79 [1/1] (0.00ns)   --->   "%sha256ctx_state_6_2_3 = load i32* %sha256ctx_state_6_2" [SHA_new/SHA_new/sha256.c:54]   --->   Operation 79 'load' 'sha256ctx_state_6_2_3' <Predicate = (icmp_ln32)> <Delay = 0.00>
ST_2 : Operation 80 [1/1] (0.00ns)   --->   "%sha256ctx_state_7_2_3 = load i32* %sha256ctx_state_7_2" [SHA_new/SHA_new/sha256.c:54]   --->   Operation 80 'load' 'sha256ctx_state_7_2_3' <Predicate = (icmp_ln32)> <Delay = 0.00>
ST_2 : Operation 81 [2/2] (2.47ns)   --->   "call fastcc void @sha256_final([16 x i8]* %sha256ctx_data_0, [16 x i8]* %sha256ctx_data_1, [16 x i8]* %sha256ctx_data_2, [16 x i8]* %sha256ctx_data_3, i32 %sha256ctx_datalen_1_2, i32 %sha256ctx_bitlen_0_2_17, i32 %sha256ctx_bitlen_1_2_18, i32 %sha256ctx_state_0_2_3, i32 %sha256ctx_state_1_2_3, i32 %sha256ctx_state_2_2_3, i32 %sha256ctx_state_3_2_3, i32 %sha256ctx_state_4_2_3, i32 %sha256ctx_state_5_2_3, i32 %sha256ctx_state_6_2_3, i32 %sha256ctx_state_7_2_3, [64 x i8]* %seg_buf) nounwind" [SHA_new/SHA_new/sha256.c:54]   --->   Operation 81 'call' <Predicate = (icmp_ln32)> <Delay = 2.47> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 3 <SV = 2> <Delay = 5.99>
ST_3 : Operation 82 [1/1] (0.00ns)   --->   "%i_0 = phi i7 [ %i_8, %2 ], [ 0, %.preheader4.preheader ]"   --->   Operation 82 'phi' 'i_0' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 83 [1/1] (1.48ns)   --->   "%icmp_ln37 = icmp eq i7 %i_0, -64" [SHA_new/SHA_new/sha256.c:37]   --->   Operation 83 'icmp' 'icmp_ln37' <Predicate = true> <Delay = 1.48> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.42> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 84 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopTripCount(i64 64, i64 64, i64 64)"   --->   Operation 84 'speclooptripcount' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 85 [1/1] (1.87ns)   --->   "%i_8 = add i7 %i_0, 1" [SHA_new/SHA_new/sha256.c:37]   --->   Operation 85 'add' 'i_8' <Predicate = true> <Delay = 1.87> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.82> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 86 [1/1] (0.00ns)   --->   "br i1 %icmp_ln37, label %3, label %2" [SHA_new/SHA_new/sha256.c:37]   --->   Operation 86 'br' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 87 [1/1] (0.00ns)   --->   "%zext_ln38_1 = zext i7 %i_0 to i10" [SHA_new/SHA_new/sha256.c:38]   --->   Operation 87 'zext' 'zext_ln38_1' <Predicate = (!icmp_ln37)> <Delay = 0.00>
ST_3 : Operation 88 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln38 = add i10 %trunc_ln35, %zext_ln38_1" [SHA_new/SHA_new/sha256.c:38]   --->   Operation 88 'add' 'add_ln38' <Predicate = (!icmp_ln37)> <Delay = 0.00> <Core = "TAddSub">   --->   Core 83 'TAddSub' <Latency = 0> <II = 1> <Delay = 1.86> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 89 [1/1] (3.72ns) (root node of TernaryAdder)   --->   "%add_ln38_1 = add i10 %add_ln38, %trunc_ln32" [SHA_new/SHA_new/sha256.c:38]   --->   Operation 89 'add' 'add_ln38_1' <Predicate = (!icmp_ln37)> <Delay = 3.72> <Core = "TAddSub">   --->   Core 83 'TAddSub' <Latency = 0> <II = 1> <Delay = 1.86> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 90 [1/1] (0.00ns)   --->   "%zext_ln38_2 = zext i10 %add_ln38_1 to i64" [SHA_new/SHA_new/sha256.c:38]   --->   Operation 90 'zext' 'zext_ln38_2' <Predicate = (!icmp_ln37)> <Delay = 0.00>
ST_3 : Operation 91 [1/1] (0.00ns)   --->   "%data_addr = getelementptr [256 x i8]* %data, i64 0, i64 %zext_ln38_2" [SHA_new/SHA_new/sha256.c:38]   --->   Operation 91 'getelementptr' 'data_addr' <Predicate = (!icmp_ln37)> <Delay = 0.00>
ST_3 : Operation 92 [2/2] (2.26ns)   --->   "%data_load = load i8* %data_addr, align 1" [SHA_new/SHA_new/sha256.c:38]   --->   Operation 92 'load' 'data_load' <Predicate = (!icmp_ln37)> <Delay = 2.26> <Core = "RAM_1P">   --->   Core 44 'RAM_1P' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 1> <Width = 8> <Depth = 32> <RAM>
ST_3 : Operation 93 [1/1] (0.00ns)   --->   "%sha256ctx_datalen_1_s = load i32* %sha256ctx_datalen_1" [SHA_new/SHA_new/sha256.c:41]   --->   Operation 93 'load' 'sha256ctx_datalen_1_s' <Predicate = (icmp_ln37)> <Delay = 0.00>
ST_3 : Operation 94 [1/1] (0.00ns)   --->   "%sha256ctx_bitlen_0_s = load i32* %sha256ctx_bitlen_0_2" [SHA_new/SHA_new/sha256.c:41]   --->   Operation 94 'load' 'sha256ctx_bitlen_0_s' <Predicate = (icmp_ln37)> <Delay = 0.00>
ST_3 : Operation 95 [1/1] (0.00ns)   --->   "%sha256ctx_bitlen_1_s = load i32* %sha256ctx_bitlen_1_2" [SHA_new/SHA_new/sha256.c:41]   --->   Operation 95 'load' 'sha256ctx_bitlen_1_s' <Predicate = (icmp_ln37)> <Delay = 0.00>
ST_3 : Operation 96 [1/1] (0.00ns)   --->   "%sha256ctx_state_0_2_1 = load i32* %sha256ctx_state_0_2" [SHA_new/SHA_new/sha256.c:41]   --->   Operation 96 'load' 'sha256ctx_state_0_2_1' <Predicate = (icmp_ln37)> <Delay = 0.00>
ST_3 : Operation 97 [1/1] (0.00ns)   --->   "%sha256ctx_state_1_2_1 = load i32* %sha256ctx_state_1_2" [SHA_new/SHA_new/sha256.c:41]   --->   Operation 97 'load' 'sha256ctx_state_1_2_1' <Predicate = (icmp_ln37)> <Delay = 0.00>
ST_3 : Operation 98 [1/1] (0.00ns)   --->   "%sha256ctx_state_2_2_1 = load i32* %sha256ctx_state_2_2" [SHA_new/SHA_new/sha256.c:41]   --->   Operation 98 'load' 'sha256ctx_state_2_2_1' <Predicate = (icmp_ln37)> <Delay = 0.00>
ST_3 : Operation 99 [1/1] (0.00ns)   --->   "%sha256ctx_state_3_2_1 = load i32* %sha256ctx_state_3_2" [SHA_new/SHA_new/sha256.c:41]   --->   Operation 99 'load' 'sha256ctx_state_3_2_1' <Predicate = (icmp_ln37)> <Delay = 0.00>
ST_3 : Operation 100 [1/1] (0.00ns)   --->   "%sha256ctx_state_4_2_1 = load i32* %sha256ctx_state_4_2" [SHA_new/SHA_new/sha256.c:41]   --->   Operation 100 'load' 'sha256ctx_state_4_2_1' <Predicate = (icmp_ln37)> <Delay = 0.00>
ST_3 : Operation 101 [1/1] (0.00ns)   --->   "%sha256ctx_state_5_2_1 = load i32* %sha256ctx_state_5_2" [SHA_new/SHA_new/sha256.c:41]   --->   Operation 101 'load' 'sha256ctx_state_5_2_1' <Predicate = (icmp_ln37)> <Delay = 0.00>
ST_3 : Operation 102 [1/1] (0.00ns)   --->   "%sha256ctx_state_6_2_1 = load i32* %sha256ctx_state_6_2" [SHA_new/SHA_new/sha256.c:41]   --->   Operation 102 'load' 'sha256ctx_state_6_2_1' <Predicate = (icmp_ln37)> <Delay = 0.00>
ST_3 : Operation 103 [1/1] (0.00ns)   --->   "%sha256ctx_state_7_2_1 = load i32* %sha256ctx_state_7_2" [SHA_new/SHA_new/sha256.c:41]   --->   Operation 103 'load' 'sha256ctx_state_7_2_1' <Predicate = (icmp_ln37)> <Delay = 0.00>
ST_3 : Operation 104 [1/1] (2.55ns)   --->   "%n = add i32 %n_0_load, -64" [SHA_new/SHA_new/sha256.c:39]   --->   Operation 104 'add' 'n' <Predicate = (icmp_ln37)> <Delay = 2.55> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.82> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 105 [2/2] (3.58ns)   --->   "%call_ret = call fastcc { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } @sha256_update([16 x i8]* %sha256ctx_data_0, [16 x i8]* %sha256ctx_data_1, [16 x i8]* %sha256ctx_data_2, [16 x i8]* %sha256ctx_data_3, i32 %sha256ctx_datalen_1_s, i32 %sha256ctx_bitlen_0_s, i32 %sha256ctx_bitlen_1_s, i32 %sha256ctx_state_0_2_1, i32 %sha256ctx_state_1_2_1, i32 %sha256ctx_state_2_2_1, i32 %sha256ctx_state_3_2_1, i32 %sha256ctx_state_4_2_1, i32 %sha256ctx_state_5_2_1, i32 %sha256ctx_state_6_2_1, i32 %sha256ctx_state_7_2_1, [64 x i8]* %seg_buf, i32 64) nounwind" [SHA_new/SHA_new/sha256.c:41]   --->   Operation 105 'call' 'call_ret' <Predicate = (icmp_ln37)> <Delay = 3.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_3 : Operation 106 [1/1] (1.81ns)   --->   "store i32 %n, i32* %n_0" [SHA_new/SHA_new/sha256.c:42]   --->   Operation 106 'store' <Predicate = (icmp_ln37)> <Delay = 1.81>

State 4 <SV = 3> <Delay = 4.58>
ST_4 : Operation 107 [1/1] (0.00ns)   --->   "%zext_ln38 = zext i7 %i_0 to i64" [SHA_new/SHA_new/sha256.c:38]   --->   Operation 107 'zext' 'zext_ln38' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 108 [1/2] (2.26ns)   --->   "%data_load = load i8* %data_addr, align 1" [SHA_new/SHA_new/sha256.c:38]   --->   Operation 108 'load' 'data_load' <Predicate = true> <Delay = 2.26> <Core = "RAM_1P">   --->   Core 44 'RAM_1P' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 1> <Width = 8> <Depth = 32> <RAM>
ST_4 : Operation 109 [1/1] (0.00ns)   --->   "%seg_buf_addr_1 = getelementptr inbounds [64 x i8]* %seg_buf, i64 0, i64 %zext_ln38" [SHA_new/SHA_new/sha256.c:38]   --->   Operation 109 'getelementptr' 'seg_buf_addr_1' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 110 [1/1] (2.32ns)   --->   "store i8 %data_load, i8* %seg_buf_addr_1, align 1" [SHA_new/SHA_new/sha256.c:38]   --->   Operation 110 'store' <Predicate = true> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 64> <RAM>
ST_4 : Operation 111 [1/1] (0.00ns)   --->   "br label %.preheader4" [SHA_new/SHA_new/sha256.c:37]   --->   Operation 111 'br' <Predicate = true> <Delay = 0.00>

State 5 <SV = 3> <Delay = 4.32>
ST_5 : Operation 112 [1/1] (0.00ns)   --->   "%seg_offset_1_load_1 = load i32* %seg_offset_1" [SHA_new/SHA_new/sha256.c:40]   --->   Operation 112 'load' 'seg_offset_1_load_1' <Predicate = (!icmp_ln35)> <Delay = 0.00>
ST_5 : Operation 113 [1/1] (2.55ns)   --->   "%seg_offset = add i32 %seg_offset_1_load_1, 64" [SHA_new/SHA_new/sha256.c:40]   --->   Operation 113 'add' 'seg_offset' <Predicate = (!icmp_ln35)> <Delay = 2.55> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.82> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 114 [1/2] (0.00ns)   --->   "%call_ret = call fastcc { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } @sha256_update([16 x i8]* %sha256ctx_data_0, [16 x i8]* %sha256ctx_data_1, [16 x i8]* %sha256ctx_data_2, [16 x i8]* %sha256ctx_data_3, i32 %sha256ctx_datalen_1_s, i32 %sha256ctx_bitlen_0_s, i32 %sha256ctx_bitlen_1_s, i32 %sha256ctx_state_0_2_1, i32 %sha256ctx_state_1_2_1, i32 %sha256ctx_state_2_2_1, i32 %sha256ctx_state_3_2_1, i32 %sha256ctx_state_4_2_1, i32 %sha256ctx_state_5_2_1, i32 %sha256ctx_state_6_2_1, i32 %sha256ctx_state_7_2_1, [64 x i8]* %seg_buf, i32 64) nounwind" [SHA_new/SHA_new/sha256.c:41]   --->   Operation 114 'call' 'call_ret' <Predicate = (!icmp_ln35)> <Delay = 0.00> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_5 : Operation 115 [1/1] (0.00ns)   --->   "%sha256ctx_datalen = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 0" [SHA_new/SHA_new/sha256.c:41]   --->   Operation 115 'extractvalue' 'sha256ctx_datalen' <Predicate = (!icmp_ln35)> <Delay = 0.00>
ST_5 : Operation 116 [1/1] (0.00ns)   --->   "%sha256ctx_bitlen_0 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 1" [SHA_new/SHA_new/sha256.c:41]   --->   Operation 116 'extractvalue' 'sha256ctx_bitlen_0' <Predicate = (!icmp_ln35)> <Delay = 0.00>
ST_5 : Operation 117 [1/1] (0.00ns)   --->   "%sha256ctx_bitlen_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 2" [SHA_new/SHA_new/sha256.c:41]   --->   Operation 117 'extractvalue' 'sha256ctx_bitlen_1' <Predicate = (!icmp_ln35)> <Delay = 0.00>
ST_5 : Operation 118 [1/1] (0.00ns)   --->   "%sha256ctx_state_0 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 3" [SHA_new/SHA_new/sha256.c:41]   --->   Operation 118 'extractvalue' 'sha256ctx_state_0' <Predicate = (!icmp_ln35)> <Delay = 0.00>
ST_5 : Operation 119 [1/1] (0.00ns)   --->   "%sha256ctx_state_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 4" [SHA_new/SHA_new/sha256.c:41]   --->   Operation 119 'extractvalue' 'sha256ctx_state_1' <Predicate = (!icmp_ln35)> <Delay = 0.00>
ST_5 : Operation 120 [1/1] (0.00ns)   --->   "%sha256ctx_state_2 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 5" [SHA_new/SHA_new/sha256.c:41]   --->   Operation 120 'extractvalue' 'sha256ctx_state_2' <Predicate = (!icmp_ln35)> <Delay = 0.00>
ST_5 : Operation 121 [1/1] (0.00ns)   --->   "%sha256ctx_state_3 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 6" [SHA_new/SHA_new/sha256.c:41]   --->   Operation 121 'extractvalue' 'sha256ctx_state_3' <Predicate = (!icmp_ln35)> <Delay = 0.00>
ST_5 : Operation 122 [1/1] (0.00ns)   --->   "%sha256ctx_state_4 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 7" [SHA_new/SHA_new/sha256.c:41]   --->   Operation 122 'extractvalue' 'sha256ctx_state_4' <Predicate = (!icmp_ln35)> <Delay = 0.00>
ST_5 : Operation 123 [1/1] (0.00ns)   --->   "%sha256ctx_state_5 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 8" [SHA_new/SHA_new/sha256.c:41]   --->   Operation 123 'extractvalue' 'sha256ctx_state_5' <Predicate = (!icmp_ln35)> <Delay = 0.00>
ST_5 : Operation 124 [1/1] (0.00ns)   --->   "%sha256ctx_state_6 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 9" [SHA_new/SHA_new/sha256.c:41]   --->   Operation 124 'extractvalue' 'sha256ctx_state_6' <Predicate = (!icmp_ln35)> <Delay = 0.00>
ST_5 : Operation 125 [1/1] (0.00ns)   --->   "%sha256ctx_state_7 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 10" [SHA_new/SHA_new/sha256.c:41]   --->   Operation 125 'extractvalue' 'sha256ctx_state_7' <Predicate = (!icmp_ln35)> <Delay = 0.00>
ST_5 : Operation 126 [1/1] (1.76ns)   --->   "store i32 %seg_offset, i32* %seg_offset_1" [SHA_new/SHA_new/sha256.c:42]   --->   Operation 126 'store' <Predicate = (!icmp_ln35)> <Delay = 1.76>
ST_5 : Operation 127 [1/1] (1.81ns)   --->   "store i32 %sha256ctx_state_7, i32* %sha256ctx_state_7_2" [SHA_new/SHA_new/sha256.c:42]   --->   Operation 127 'store' <Predicate = (!icmp_ln35)> <Delay = 1.81>
ST_5 : Operation 128 [1/1] (1.81ns)   --->   "store i32 %sha256ctx_state_6, i32* %sha256ctx_state_6_2" [SHA_new/SHA_new/sha256.c:42]   --->   Operation 128 'store' <Predicate = (!icmp_ln35)> <Delay = 1.81>
ST_5 : Operation 129 [1/1] (1.81ns)   --->   "store i32 %sha256ctx_state_5, i32* %sha256ctx_state_5_2" [SHA_new/SHA_new/sha256.c:42]   --->   Operation 129 'store' <Predicate = (!icmp_ln35)> <Delay = 1.81>
ST_5 : Operation 130 [1/1] (1.81ns)   --->   "store i32 %sha256ctx_state_4, i32* %sha256ctx_state_4_2" [SHA_new/SHA_new/sha256.c:42]   --->   Operation 130 'store' <Predicate = (!icmp_ln35)> <Delay = 1.81>
ST_5 : Operation 131 [1/1] (1.81ns)   --->   "store i32 %sha256ctx_state_3, i32* %sha256ctx_state_3_2" [SHA_new/SHA_new/sha256.c:42]   --->   Operation 131 'store' <Predicate = (!icmp_ln35)> <Delay = 1.81>
ST_5 : Operation 132 [1/1] (1.81ns)   --->   "store i32 %sha256ctx_state_2, i32* %sha256ctx_state_2_2" [SHA_new/SHA_new/sha256.c:42]   --->   Operation 132 'store' <Predicate = (!icmp_ln35)> <Delay = 1.81>
ST_5 : Operation 133 [1/1] (1.81ns)   --->   "store i32 %sha256ctx_state_1, i32* %sha256ctx_state_1_2" [SHA_new/SHA_new/sha256.c:42]   --->   Operation 133 'store' <Predicate = (!icmp_ln35)> <Delay = 1.81>
ST_5 : Operation 134 [1/1] (1.81ns)   --->   "store i32 %sha256ctx_state_0, i32* %sha256ctx_state_0_2" [SHA_new/SHA_new/sha256.c:42]   --->   Operation 134 'store' <Predicate = (!icmp_ln35)> <Delay = 1.81>
ST_5 : Operation 135 [1/1] (1.81ns)   --->   "store i32 %sha256ctx_bitlen_1, i32* %sha256ctx_bitlen_1_2" [SHA_new/SHA_new/sha256.c:42]   --->   Operation 135 'store' <Predicate = (!icmp_ln35)> <Delay = 1.81>
ST_5 : Operation 136 [1/1] (1.81ns)   --->   "store i32 %sha256ctx_bitlen_0, i32* %sha256ctx_bitlen_0_2" [SHA_new/SHA_new/sha256.c:42]   --->   Operation 136 'store' <Predicate = (!icmp_ln35)> <Delay = 1.81>
ST_5 : Operation 137 [1/1] (1.81ns)   --->   "store i32 %sha256ctx_datalen, i32* %sha256ctx_datalen_1" [SHA_new/SHA_new/sha256.c:42]   --->   Operation 137 'store' <Predicate = (!icmp_ln35)> <Delay = 1.81>
ST_5 : Operation 138 [1/1] (0.00ns)   --->   "br label %hls_label_0_end" [SHA_new/SHA_new/sha256.c:42]   --->   Operation 138 'br' <Predicate = (!icmp_ln35)> <Delay = 0.00>
ST_5 : Operation 139 [1/2] (0.00ns)   --->   "%call_ret2 = call fastcc { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } @sha256_update([16 x i8]* %sha256ctx_data_0, [16 x i8]* %sha256ctx_data_1, [16 x i8]* %sha256ctx_data_2, [16 x i8]* %sha256ctx_data_3, i32 %sha256ctx_datalen_1_1, i32 %sha256ctx_bitlen_0_1, i32 %sha256ctx_bitlen_1_1, i32 %sha256ctx_state_0_2_2, i32 %sha256ctx_state_1_2_2, i32 %sha256ctx_state_2_2_2, i32 %sha256ctx_state_3_2_2, i32 %sha256ctx_state_4_2_2, i32 %sha256ctx_state_5_2_2, i32 %sha256ctx_state_6_2_2, i32 %sha256ctx_state_7_2_2, [64 x i8]* %seg_buf, i32 %n_0_load) nounwind" [SHA_new/SHA_new/sha256.c:48]   --->   Operation 139 'call' 'call_ret2' <Predicate = (icmp_ln35)> <Delay = 0.00> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_5 : Operation 140 [1/1] (0.00ns)   --->   "%sha256ctx_datalen_2 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret2, 0" [SHA_new/SHA_new/sha256.c:48]   --->   Operation 140 'extractvalue' 'sha256ctx_datalen_2' <Predicate = (icmp_ln35)> <Delay = 0.00>
ST_5 : Operation 141 [1/1] (0.00ns)   --->   "%sha256ctx_bitlen_0_1_14 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret2, 1" [SHA_new/SHA_new/sha256.c:48]   --->   Operation 141 'extractvalue' 'sha256ctx_bitlen_0_1_14' <Predicate = (icmp_ln35)> <Delay = 0.00>
ST_5 : Operation 142 [1/1] (0.00ns)   --->   "%sha256ctx_bitlen_1_1_15 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret2, 2" [SHA_new/SHA_new/sha256.c:48]   --->   Operation 142 'extractvalue' 'sha256ctx_bitlen_1_1_15' <Predicate = (icmp_ln35)> <Delay = 0.00>
ST_5 : Operation 143 [1/1] (0.00ns)   --->   "%sha256ctx_state_0_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret2, 3" [SHA_new/SHA_new/sha256.c:48]   --->   Operation 143 'extractvalue' 'sha256ctx_state_0_1' <Predicate = (icmp_ln35)> <Delay = 0.00>
ST_5 : Operation 144 [1/1] (0.00ns)   --->   "%sha256ctx_state_1_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret2, 4" [SHA_new/SHA_new/sha256.c:48]   --->   Operation 144 'extractvalue' 'sha256ctx_state_1_1' <Predicate = (icmp_ln35)> <Delay = 0.00>
ST_5 : Operation 145 [1/1] (0.00ns)   --->   "%sha256ctx_state_2_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret2, 5" [SHA_new/SHA_new/sha256.c:48]   --->   Operation 145 'extractvalue' 'sha256ctx_state_2_1' <Predicate = (icmp_ln35)> <Delay = 0.00>
ST_5 : Operation 146 [1/1] (0.00ns)   --->   "%sha256ctx_state_3_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret2, 6" [SHA_new/SHA_new/sha256.c:48]   --->   Operation 146 'extractvalue' 'sha256ctx_state_3_1' <Predicate = (icmp_ln35)> <Delay = 0.00>
ST_5 : Operation 147 [1/1] (0.00ns)   --->   "%sha256ctx_state_4_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret2, 7" [SHA_new/SHA_new/sha256.c:48]   --->   Operation 147 'extractvalue' 'sha256ctx_state_4_1' <Predicate = (icmp_ln35)> <Delay = 0.00>
ST_5 : Operation 148 [1/1] (0.00ns)   --->   "%sha256ctx_state_5_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret2, 8" [SHA_new/SHA_new/sha256.c:48]   --->   Operation 148 'extractvalue' 'sha256ctx_state_5_1' <Predicate = (icmp_ln35)> <Delay = 0.00>
ST_5 : Operation 149 [1/1] (0.00ns)   --->   "%sha256ctx_state_6_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret2, 9" [SHA_new/SHA_new/sha256.c:48]   --->   Operation 149 'extractvalue' 'sha256ctx_state_6_1' <Predicate = (icmp_ln35)> <Delay = 0.00>
ST_5 : Operation 150 [1/1] (0.00ns)   --->   "%sha256ctx_state_7_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret2, 10" [SHA_new/SHA_new/sha256.c:48]   --->   Operation 150 'extractvalue' 'sha256ctx_state_7_1' <Predicate = (icmp_ln35)> <Delay = 0.00>
ST_5 : Operation 151 [1/1] (1.81ns)   --->   "store i32 %sha256ctx_state_7_1, i32* %sha256ctx_state_7_2" [SHA_new/SHA_new/sha256.c:48]   --->   Operation 151 'store' <Predicate = (icmp_ln35)> <Delay = 1.81>
ST_5 : Operation 152 [1/1] (1.81ns)   --->   "store i32 %sha256ctx_state_6_1, i32* %sha256ctx_state_6_2" [SHA_new/SHA_new/sha256.c:48]   --->   Operation 152 'store' <Predicate = (icmp_ln35)> <Delay = 1.81>
ST_5 : Operation 153 [1/1] (1.81ns)   --->   "store i32 %sha256ctx_state_5_1, i32* %sha256ctx_state_5_2" [SHA_new/SHA_new/sha256.c:48]   --->   Operation 153 'store' <Predicate = (icmp_ln35)> <Delay = 1.81>
ST_5 : Operation 154 [1/1] (1.81ns)   --->   "store i32 %sha256ctx_state_4_1, i32* %sha256ctx_state_4_2" [SHA_new/SHA_new/sha256.c:48]   --->   Operation 154 'store' <Predicate = (icmp_ln35)> <Delay = 1.81>
ST_5 : Operation 155 [1/1] (1.81ns)   --->   "store i32 %sha256ctx_state_3_1, i32* %sha256ctx_state_3_2" [SHA_new/SHA_new/sha256.c:48]   --->   Operation 155 'store' <Predicate = (icmp_ln35)> <Delay = 1.81>
ST_5 : Operation 156 [1/1] (1.81ns)   --->   "store i32 %sha256ctx_state_2_1, i32* %sha256ctx_state_2_2" [SHA_new/SHA_new/sha256.c:48]   --->   Operation 156 'store' <Predicate = (icmp_ln35)> <Delay = 1.81>
ST_5 : Operation 157 [1/1] (1.81ns)   --->   "store i32 %sha256ctx_state_1_1, i32* %sha256ctx_state_1_2" [SHA_new/SHA_new/sha256.c:48]   --->   Operation 157 'store' <Predicate = (icmp_ln35)> <Delay = 1.81>
ST_5 : Operation 158 [1/1] (1.81ns)   --->   "store i32 %sha256ctx_state_0_1, i32* %sha256ctx_state_0_2" [SHA_new/SHA_new/sha256.c:48]   --->   Operation 158 'store' <Predicate = (icmp_ln35)> <Delay = 1.81>
ST_5 : Operation 159 [1/1] (1.81ns)   --->   "store i32 %sha256ctx_bitlen_1_1_15, i32* %sha256ctx_bitlen_1_2" [SHA_new/SHA_new/sha256.c:48]   --->   Operation 159 'store' <Predicate = (icmp_ln35)> <Delay = 1.81>
ST_5 : Operation 160 [1/1] (1.81ns)   --->   "store i32 %sha256ctx_bitlen_0_1_14, i32* %sha256ctx_bitlen_0_2" [SHA_new/SHA_new/sha256.c:48]   --->   Operation 160 'store' <Predicate = (icmp_ln35)> <Delay = 1.81>
ST_5 : Operation 161 [1/1] (1.81ns)   --->   "store i32 %sha256ctx_datalen_2, i32* %sha256ctx_datalen_1" [SHA_new/SHA_new/sha256.c:48]   --->   Operation 161 'store' <Predicate = (icmp_ln35)> <Delay = 1.81>
ST_5 : Operation 162 [1/1] (0.00ns)   --->   "br label %hls_label_0_end"   --->   Operation 162 'br' <Predicate = (icmp_ln35)> <Delay = 0.00>
ST_5 : Operation 163 [1/1] (0.00ns)   --->   "%empty_16 = call i32 (...)* @_ssdm_op_SpecRegionEnd([12 x i8]* @p_str28, i32 %tmp) nounwind" [SHA_new/SHA_new/sha256.c:51]   --->   Operation 163 'specregionend' 'empty_16' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 164 [1/1] (0.00ns)   --->   "br label %1" [SHA_new/SHA_new/sha256.c:51]   --->   Operation 164 'br' <Predicate = true> <Delay = 0.00>

State 6 <SV = 2> <Delay = 5.99>
ST_6 : Operation 165 [1/1] (0.00ns)   --->   "%i_1 = phi i6 [ %i_7, %4 ], [ 0, %.preheader.preheader ]"   --->   Operation 165 'phi' 'i_1' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 166 [1/1] (0.00ns)   --->   "%zext_ln45 = zext i6 %i_1 to i32" [SHA_new/SHA_new/sha256.c:45]   --->   Operation 166 'zext' 'zext_ln45' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 167 [1/1] (2.47ns)   --->   "%icmp_ln45 = icmp eq i32 %zext_ln45, %n_0_load" [SHA_new/SHA_new/sha256.c:45]   --->   Operation 167 'icmp' 'icmp_ln45' <Predicate = true> <Delay = 2.47> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.42> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 168 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopTripCount(i64 12, i64 63, i64 56)"   --->   Operation 168 'speclooptripcount' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 169 [1/1] (1.82ns)   --->   "%i_7 = add i6 %i_1, 1" [SHA_new/SHA_new/sha256.c:45]   --->   Operation 169 'add' 'i_7' <Predicate = true> <Delay = 1.82> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.82> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 170 [1/1] (0.00ns)   --->   "br i1 %icmp_ln45, label %5, label %4" [SHA_new/SHA_new/sha256.c:45]   --->   Operation 170 'br' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 171 [1/1] (0.00ns)   --->   "%zext_ln47_1 = zext i6 %i_1 to i10" [SHA_new/SHA_new/sha256.c:47]   --->   Operation 171 'zext' 'zext_ln47_1' <Predicate = (!icmp_ln45)> <Delay = 0.00>
ST_6 : Operation 172 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln47 = add i10 %trunc_ln35, %zext_ln47_1" [SHA_new/SHA_new/sha256.c:47]   --->   Operation 172 'add' 'add_ln47' <Predicate = (!icmp_ln45)> <Delay = 0.00> <Core = "TAddSub">   --->   Core 83 'TAddSub' <Latency = 0> <II = 1> <Delay = 1.86> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_6 : Operation 173 [1/1] (3.72ns) (root node of TernaryAdder)   --->   "%add_ln47_1 = add i10 %add_ln47, %trunc_ln32" [SHA_new/SHA_new/sha256.c:47]   --->   Operation 173 'add' 'add_ln47_1' <Predicate = (!icmp_ln45)> <Delay = 3.72> <Core = "TAddSub">   --->   Core 83 'TAddSub' <Latency = 0> <II = 1> <Delay = 1.86> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_6 : Operation 174 [1/1] (0.00ns)   --->   "%zext_ln47_2 = zext i10 %add_ln47_1 to i64" [SHA_new/SHA_new/sha256.c:47]   --->   Operation 174 'zext' 'zext_ln47_2' <Predicate = (!icmp_ln45)> <Delay = 0.00>
ST_6 : Operation 175 [1/1] (0.00ns)   --->   "%data_addr_1 = getelementptr [256 x i8]* %data, i64 0, i64 %zext_ln47_2" [SHA_new/SHA_new/sha256.c:47]   --->   Operation 175 'getelementptr' 'data_addr_1' <Predicate = (!icmp_ln45)> <Delay = 0.00>
ST_6 : Operation 176 [2/2] (2.26ns)   --->   "%data_load_1 = load i8* %data_addr_1, align 1" [SHA_new/SHA_new/sha256.c:47]   --->   Operation 176 'load' 'data_load_1' <Predicate = (!icmp_ln45)> <Delay = 2.26> <Core = "RAM_1P">   --->   Core 44 'RAM_1P' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 1> <Width = 8> <Depth = 32> <RAM>
ST_6 : Operation 177 [1/1] (0.00ns)   --->   "%sha256ctx_datalen_1_1 = load i32* %sha256ctx_datalen_1" [SHA_new/SHA_new/sha256.c:48]   --->   Operation 177 'load' 'sha256ctx_datalen_1_1' <Predicate = (icmp_ln45)> <Delay = 0.00>
ST_6 : Operation 178 [1/1] (0.00ns)   --->   "%sha256ctx_bitlen_0_1 = load i32* %sha256ctx_bitlen_0_2" [SHA_new/SHA_new/sha256.c:48]   --->   Operation 178 'load' 'sha256ctx_bitlen_0_1' <Predicate = (icmp_ln45)> <Delay = 0.00>
ST_6 : Operation 179 [1/1] (0.00ns)   --->   "%sha256ctx_bitlen_1_1 = load i32* %sha256ctx_bitlen_1_2" [SHA_new/SHA_new/sha256.c:48]   --->   Operation 179 'load' 'sha256ctx_bitlen_1_1' <Predicate = (icmp_ln45)> <Delay = 0.00>
ST_6 : Operation 180 [1/1] (0.00ns)   --->   "%sha256ctx_state_0_2_2 = load i32* %sha256ctx_state_0_2" [SHA_new/SHA_new/sha256.c:48]   --->   Operation 180 'load' 'sha256ctx_state_0_2_2' <Predicate = (icmp_ln45)> <Delay = 0.00>
ST_6 : Operation 181 [1/1] (0.00ns)   --->   "%sha256ctx_state_1_2_2 = load i32* %sha256ctx_state_1_2" [SHA_new/SHA_new/sha256.c:48]   --->   Operation 181 'load' 'sha256ctx_state_1_2_2' <Predicate = (icmp_ln45)> <Delay = 0.00>
ST_6 : Operation 182 [1/1] (0.00ns)   --->   "%sha256ctx_state_2_2_2 = load i32* %sha256ctx_state_2_2" [SHA_new/SHA_new/sha256.c:48]   --->   Operation 182 'load' 'sha256ctx_state_2_2_2' <Predicate = (icmp_ln45)> <Delay = 0.00>
ST_6 : Operation 183 [1/1] (0.00ns)   --->   "%sha256ctx_state_3_2_2 = load i32* %sha256ctx_state_3_2" [SHA_new/SHA_new/sha256.c:48]   --->   Operation 183 'load' 'sha256ctx_state_3_2_2' <Predicate = (icmp_ln45)> <Delay = 0.00>
ST_6 : Operation 184 [1/1] (0.00ns)   --->   "%sha256ctx_state_4_2_2 = load i32* %sha256ctx_state_4_2" [SHA_new/SHA_new/sha256.c:48]   --->   Operation 184 'load' 'sha256ctx_state_4_2_2' <Predicate = (icmp_ln45)> <Delay = 0.00>
ST_6 : Operation 185 [1/1] (0.00ns)   --->   "%sha256ctx_state_5_2_2 = load i32* %sha256ctx_state_5_2" [SHA_new/SHA_new/sha256.c:48]   --->   Operation 185 'load' 'sha256ctx_state_5_2_2' <Predicate = (icmp_ln45)> <Delay = 0.00>
ST_6 : Operation 186 [1/1] (0.00ns)   --->   "%sha256ctx_state_6_2_2 = load i32* %sha256ctx_state_6_2" [SHA_new/SHA_new/sha256.c:48]   --->   Operation 186 'load' 'sha256ctx_state_6_2_2' <Predicate = (icmp_ln45)> <Delay = 0.00>
ST_6 : Operation 187 [1/1] (0.00ns)   --->   "%sha256ctx_state_7_2_2 = load i32* %sha256ctx_state_7_2" [SHA_new/SHA_new/sha256.c:48]   --->   Operation 187 'load' 'sha256ctx_state_7_2_2' <Predicate = (icmp_ln45)> <Delay = 0.00>
ST_6 : Operation 188 [2/2] (3.58ns)   --->   "%call_ret2 = call fastcc { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } @sha256_update([16 x i8]* %sha256ctx_data_0, [16 x i8]* %sha256ctx_data_1, [16 x i8]* %sha256ctx_data_2, [16 x i8]* %sha256ctx_data_3, i32 %sha256ctx_datalen_1_1, i32 %sha256ctx_bitlen_0_1, i32 %sha256ctx_bitlen_1_1, i32 %sha256ctx_state_0_2_2, i32 %sha256ctx_state_1_2_2, i32 %sha256ctx_state_2_2_2, i32 %sha256ctx_state_3_2_2, i32 %sha256ctx_state_4_2_2, i32 %sha256ctx_state_5_2_2, i32 %sha256ctx_state_6_2_2, i32 %sha256ctx_state_7_2_2, [64 x i8]* %seg_buf, i32 %n_0_load) nounwind" [SHA_new/SHA_new/sha256.c:48]   --->   Operation 188 'call' 'call_ret2' <Predicate = (icmp_ln45)> <Delay = 3.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_6 : Operation 189 [1/1] (1.81ns)   --->   "store i32 0, i32* %n_0"   --->   Operation 189 'store' <Predicate = (icmp_ln45)> <Delay = 1.81>

State 7 <SV = 3> <Delay = 4.58>
ST_7 : Operation 190 [1/1] (0.00ns)   --->   "%zext_ln47 = zext i6 %i_1 to i64" [SHA_new/SHA_new/sha256.c:47]   --->   Operation 190 'zext' 'zext_ln47' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 191 [1/2] (2.26ns)   --->   "%data_load_1 = load i8* %data_addr_1, align 1" [SHA_new/SHA_new/sha256.c:47]   --->   Operation 191 'load' 'data_load_1' <Predicate = true> <Delay = 2.26> <Core = "RAM_1P">   --->   Core 44 'RAM_1P' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 1> <Width = 8> <Depth = 32> <RAM>
ST_7 : Operation 192 [1/1] (0.00ns)   --->   "%seg_buf_addr_2 = getelementptr inbounds [64 x i8]* %seg_buf, i64 0, i64 %zext_ln47" [SHA_new/SHA_new/sha256.c:47]   --->   Operation 192 'getelementptr' 'seg_buf_addr_2' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 193 [1/1] (2.32ns)   --->   "store i8 %data_load_1, i8* %seg_buf_addr_2, align 1" [SHA_new/SHA_new/sha256.c:47]   --->   Operation 193 'store' <Predicate = true> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 64> <RAM>
ST_7 : Operation 194 [1/1] (0.00ns)   --->   "br label %.preheader" [SHA_new/SHA_new/sha256.c:45]   --->   Operation 194 'br' <Predicate = true> <Delay = 0.00>

State 8 <SV = 2> <Delay = 1.76>
ST_8 : Operation 195 [1/2] (0.00ns)   --->   "call fastcc void @sha256_final([16 x i8]* %sha256ctx_data_0, [16 x i8]* %sha256ctx_data_1, [16 x i8]* %sha256ctx_data_2, [16 x i8]* %sha256ctx_data_3, i32 %sha256ctx_datalen_1_2, i32 %sha256ctx_bitlen_0_2_17, i32 %sha256ctx_bitlen_1_2_18, i32 %sha256ctx_state_0_2_3, i32 %sha256ctx_state_1_2_3, i32 %sha256ctx_state_2_2_3, i32 %sha256ctx_state_3_2_3, i32 %sha256ctx_state_4_2_3, i32 %sha256ctx_state_5_2_3, i32 %sha256ctx_state_6_2_3, i32 %sha256ctx_state_7_2_3, [64 x i8]* %seg_buf) nounwind" [SHA_new/SHA_new/sha256.c:54]   --->   Operation 195 'call' <Predicate = true> <Delay = 0.00> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_8 : Operation 196 [1/1] (1.76ns)   --->   "br label %7" [SHA_new/SHA_new/sha256.c:56]   --->   Operation 196 'br' <Predicate = true> <Delay = 1.76>

State 9 <SV = 3> <Delay = 2.32>
ST_9 : Operation 197 [1/1] (0.00ns)   --->   "%i_2 = phi i6 [ 0, %6 ], [ %i, %8 ]"   --->   Operation 197 'phi' 'i_2' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 198 [1/1] (1.42ns)   --->   "%icmp_ln56 = icmp eq i6 %i_2, -32" [SHA_new/SHA_new/sha256.c:56]   --->   Operation 198 'icmp' 'icmp_ln56' <Predicate = true> <Delay = 1.42> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.42> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_9 : Operation 199 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopTripCount(i64 32, i64 32, i64 32)"   --->   Operation 199 'speclooptripcount' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 200 [1/1] (1.82ns)   --->   "%i = add i6 %i_2, 1" [SHA_new/SHA_new/sha256.c:56]   --->   Operation 200 'add' 'i' <Predicate = true> <Delay = 1.82> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.82> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_9 : Operation 201 [1/1] (0.00ns)   --->   "br i1 %icmp_ln56, label %9, label %8" [SHA_new/SHA_new/sha256.c:56]   --->   Operation 201 'br' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 202 [1/1] (0.00ns)   --->   "%zext_ln59 = zext i6 %i_2 to i64" [SHA_new/SHA_new/sha256.c:59]   --->   Operation 202 'zext' 'zext_ln59' <Predicate = (!icmp_ln56)> <Delay = 0.00>
ST_9 : Operation 203 [1/1] (0.00ns)   --->   "%seg_buf_addr = getelementptr inbounds [64 x i8]* %seg_buf, i64 0, i64 %zext_ln59" [SHA_new/SHA_new/sha256.c:59]   --->   Operation 203 'getelementptr' 'seg_buf_addr' <Predicate = (!icmp_ln56)> <Delay = 0.00>
ST_9 : Operation 204 [2/2] (2.32ns)   --->   "%seg_buf_load = load i8* %seg_buf_addr, align 1" [SHA_new/SHA_new/sha256.c:59]   --->   Operation 204 'load' 'seg_buf_load' <Predicate = (!icmp_ln56)> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 64> <RAM>
ST_9 : Operation 205 [1/1] (0.00ns)   --->   "ret void" [SHA_new/SHA_new/sha256.c:61]   --->   Operation 205 'ret' <Predicate = (icmp_ln56)> <Delay = 0.00>

State 10 <SV = 4> <Delay = 4.64>
ST_10 : Operation 206 [1/2] (2.32ns)   --->   "%seg_buf_load = load i8* %seg_buf_addr, align 1" [SHA_new/SHA_new/sha256.c:59]   --->   Operation 206 'load' 'seg_buf_load' <Predicate = true> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 64> <RAM>
ST_10 : Operation 207 [1/1] (0.00ns)   --->   "%digest_addr = getelementptr [32 x i8]* %digest, i64 0, i64 %zext_ln59" [SHA_new/SHA_new/sha256.c:59]   --->   Operation 207 'getelementptr' 'digest_addr' <Predicate = true> <Delay = 0.00>
ST_10 : Operation 208 [1/1] (2.32ns)   --->   "store i8 %seg_buf_load, i8* %digest_addr, align 1" [SHA_new/SHA_new/sha256.c:59]   --->   Operation 208 'store' <Predicate = true> <Delay = 2.32> <Core = "RAM_1P">   --->   Core 44 'RAM_1P' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 1> <Width = 8> <Depth = 32> <RAM>
ST_10 : Operation 209 [1/1] (0.00ns)   --->   "br label %7" [SHA_new/SHA_new/sha256.c:56]   --->   Operation 209 'br' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 2.81ns
The critical path consists of the following:
	s_axi read on port 'bytes' [24]  (1 ns)
	'store' operation ('store_ln32', SHA_new/SHA_new/sha256.c:32) of variable 'bytes' on local variable 'bytes' [51]  (1.81 ns)

 <State 2>: 2.47ns
The critical path consists of the following:
	'load' operation ('n_0_load', SHA_new/SHA_new/sha256.c:39) on local variable 'bytes' [54]  (0 ns)
	'icmp' operation ('icmp_ln32', SHA_new/SHA_new/sha256.c:32) [55]  (2.47 ns)

 <State 3>: 5.99ns
The critical path consists of the following:
	'phi' operation ('i') with incoming values : ('i', SHA_new/SHA_new/sha256.c:37) [68]  (0 ns)
	'add' operation ('add_ln38', SHA_new/SHA_new/sha256.c:38) [76]  (0 ns)
	'add' operation ('add_ln38_1', SHA_new/SHA_new/sha256.c:38) [77]  (3.73 ns)
	'getelementptr' operation ('data_addr', SHA_new/SHA_new/sha256.c:38) [79]  (0 ns)
	'load' operation ('data_load', SHA_new/SHA_new/sha256.c:38) on array 'data' [80]  (2.27 ns)

 <State 4>: 4.59ns
The critical path consists of the following:
	'load' operation ('data_load', SHA_new/SHA_new/sha256.c:38) on array 'data' [80]  (2.27 ns)
	'store' operation ('store_ln38', SHA_new/SHA_new/sha256.c:38) of variable 'data_load', SHA_new/SHA_new/sha256.c:38 on array 'seg_buf', SHA_new/SHA_new/sha256.c:22 [82]  (2.32 ns)

 <State 5>: 4.32ns
The critical path consists of the following:
	'load' operation ('seg_offset_1_load_1', SHA_new/SHA_new/sha256.c:40) on local variable 'seg_offset' [96]  (0 ns)
	'add' operation ('seg_offset', SHA_new/SHA_new/sha256.c:40) [98]  (2.55 ns)
	'store' operation ('store_ln42', SHA_new/SHA_new/sha256.c:42) of variable 'seg_offset', SHA_new/SHA_new/sha256.c:40 on local variable 'seg_offset' [111]  (1.77 ns)

 <State 6>: 5.99ns
The critical path consists of the following:
	'phi' operation ('i') with incoming values : ('i', SHA_new/SHA_new/sha256.c:45) [128]  (0 ns)
	'add' operation ('add_ln47', SHA_new/SHA_new/sha256.c:47) [137]  (0 ns)
	'add' operation ('add_ln47_1', SHA_new/SHA_new/sha256.c:47) [138]  (3.73 ns)
	'getelementptr' operation ('data_addr_1', SHA_new/SHA_new/sha256.c:47) [140]  (0 ns)
	'load' operation ('data_load_1', SHA_new/SHA_new/sha256.c:47) on array 'data' [141]  (2.27 ns)

 <State 7>: 4.59ns
The critical path consists of the following:
	'load' operation ('data_load_1', SHA_new/SHA_new/sha256.c:47) on array 'data' [141]  (2.27 ns)
	'store' operation ('store_ln47', SHA_new/SHA_new/sha256.c:47) of variable 'data_load_1', SHA_new/SHA_new/sha256.c:47 on array 'seg_buf', SHA_new/SHA_new/sha256.c:22 [143]  (2.32 ns)

 <State 8>: 1.77ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('i') with incoming values : ('i', SHA_new/SHA_new/sha256.c:56) [200]  (1.77 ns)

 <State 9>: 2.32ns
The critical path consists of the following:
	'phi' operation ('i') with incoming values : ('i', SHA_new/SHA_new/sha256.c:56) [200]  (0 ns)
	'getelementptr' operation ('seg_buf_addr', SHA_new/SHA_new/sha256.c:59) [207]  (0 ns)
	'load' operation ('seg_buf_load', SHA_new/SHA_new/sha256.c:59) on array 'seg_buf', SHA_new/SHA_new/sha256.c:22 [208]  (2.32 ns)

 <State 10>: 4.64ns
The critical path consists of the following:
	'load' operation ('seg_buf_load', SHA_new/SHA_new/sha256.c:59) on array 'seg_buf', SHA_new/SHA_new/sha256.c:22 [208]  (2.32 ns)
	'store' operation ('store_ln59', SHA_new/SHA_new/sha256.c:59) of variable 'seg_buf_load', SHA_new/SHA_new/sha256.c:59 on array 'digest' [210]  (2.32 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
