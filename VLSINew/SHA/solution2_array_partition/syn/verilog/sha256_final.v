// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sha256_final (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ctx_data_0_address0,
        ctx_data_0_ce0,
        ctx_data_0_we0,
        ctx_data_0_d0,
        ctx_data_0_q0,
        ctx_data_0_address1,
        ctx_data_0_ce1,
        ctx_data_0_we1,
        ctx_data_0_d1,
        ctx_data_1_address0,
        ctx_data_1_ce0,
        ctx_data_1_we0,
        ctx_data_1_d0,
        ctx_data_1_q0,
        ctx_data_1_address1,
        ctx_data_1_ce1,
        ctx_data_1_we1,
        ctx_data_1_d1,
        ctx_data_2_address0,
        ctx_data_2_ce0,
        ctx_data_2_we0,
        ctx_data_2_d0,
        ctx_data_2_q0,
        ctx_data_2_address1,
        ctx_data_2_ce1,
        ctx_data_2_we1,
        ctx_data_2_d1,
        ctx_data_3_address0,
        ctx_data_3_ce0,
        ctx_data_3_we0,
        ctx_data_3_d0,
        ctx_data_3_q0,
        ctx_data_3_address1,
        ctx_data_3_ce1,
        ctx_data_3_we1,
        ctx_data_3_d1,
        ctx_datalen_read,
        ctx_bitlen_0_read,
        p_read3,
        p_read2,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        p_read8,
        p_read9,
        p_read10,
        hash_address0,
        hash_ce0,
        hash_we0,
        hash_d0,
        hash_address1,
        hash_ce1,
        hash_we1,
        hash_d1
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] ctx_data_0_address0;
output   ctx_data_0_ce0;
output   ctx_data_0_we0;
output  [7:0] ctx_data_0_d0;
input  [7:0] ctx_data_0_q0;
output  [3:0] ctx_data_0_address1;
output   ctx_data_0_ce1;
output   ctx_data_0_we1;
output  [7:0] ctx_data_0_d1;
output  [3:0] ctx_data_1_address0;
output   ctx_data_1_ce0;
output   ctx_data_1_we0;
output  [7:0] ctx_data_1_d0;
input  [7:0] ctx_data_1_q0;
output  [3:0] ctx_data_1_address1;
output   ctx_data_1_ce1;
output   ctx_data_1_we1;
output  [7:0] ctx_data_1_d1;
output  [3:0] ctx_data_2_address0;
output   ctx_data_2_ce0;
output   ctx_data_2_we0;
output  [7:0] ctx_data_2_d0;
input  [7:0] ctx_data_2_q0;
output  [3:0] ctx_data_2_address1;
output   ctx_data_2_ce1;
output   ctx_data_2_we1;
output  [7:0] ctx_data_2_d1;
output  [3:0] ctx_data_3_address0;
output   ctx_data_3_ce0;
output   ctx_data_3_we0;
output  [7:0] ctx_data_3_d0;
input  [7:0] ctx_data_3_q0;
output  [3:0] ctx_data_3_address1;
output   ctx_data_3_ce1;
output   ctx_data_3_we1;
output  [7:0] ctx_data_3_d1;
input  [31:0] ctx_datalen_read;
input  [31:0] ctx_bitlen_0_read;
input  [31:0] p_read3;
input  [31:0] p_read2;
input  [31:0] p_read4;
input  [31:0] p_read5;
input  [31:0] p_read6;
input  [31:0] p_read7;
input  [31:0] p_read8;
input  [31:0] p_read9;
input  [31:0] p_read10;
output  [5:0] hash_address0;
output   hash_ce0;
output   hash_we0;
output  [7:0] hash_d0;
output  [5:0] hash_address1;
output   hash_ce1;
output   hash_we1;
output  [7:0] hash_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] ctx_data_0_address0;
reg ctx_data_0_ce0;
reg ctx_data_0_we0;
reg[7:0] ctx_data_0_d0;
reg[3:0] ctx_data_0_address1;
reg ctx_data_0_ce1;
reg ctx_data_0_we1;
reg[7:0] ctx_data_0_d1;
reg[3:0] ctx_data_1_address0;
reg ctx_data_1_ce0;
reg ctx_data_1_we0;
reg[7:0] ctx_data_1_d0;
reg[3:0] ctx_data_1_address1;
reg ctx_data_1_ce1;
reg ctx_data_1_we1;
reg[7:0] ctx_data_1_d1;
reg[3:0] ctx_data_2_address0;
reg ctx_data_2_ce0;
reg ctx_data_2_we0;
reg[7:0] ctx_data_2_d0;
reg[3:0] ctx_data_2_address1;
reg ctx_data_2_ce1;
reg ctx_data_2_we1;
reg[7:0] ctx_data_2_d1;
reg[3:0] ctx_data_3_address0;
reg ctx_data_3_ce0;
reg ctx_data_3_we0;
reg[7:0] ctx_data_3_d0;
reg[3:0] ctx_data_3_address1;
reg ctx_data_3_ce1;
reg ctx_data_3_we1;
reg[7:0] ctx_data_3_d1;
reg[5:0] hash_address0;
reg hash_ce0;
reg hash_we0;
reg[7:0] hash_d0;
reg[5:0] hash_address1;
reg hash_ce1;
reg hash_we1;
reg[7:0] hash_d1;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_716;
wire    ap_CS_fsm_state3;
wire    grp_sha256_transform_fu_654_ap_ready;
wire    grp_sha256_transform_fu_654_ap_done;
wire    ap_CS_fsm_state7;
reg   [31:0] reg_721;
reg   [31:0] reg_726;
reg   [31:0] reg_731;
reg   [31:0] reg_736;
reg   [31:0] reg_741;
reg   [31:0] reg_746;
reg   [31:0] reg_751;
wire   [0:0] icmp_ln113_fu_756_p2;
reg   [0:0] icmp_ln113_reg_1330;
wire   [31:0] i_4_fu_784_p2;
wire    ap_CS_fsm_state2;
wire   [5:0] i_5_fu_834_p2;
wire    ap_CS_fsm_state4;
wire   [31:0] i_fu_1027_p2;
wire    ap_CS_fsm_state5;
wire   [4:0] zext_ln147_fu_1061_p1;
reg   [4:0] zext_ln147_reg_1370;
wire    ap_CS_fsm_state8;
wire   [2:0] i_6_fu_1071_p2;
reg   [2:0] i_6_reg_1378;
wire   [7:0] trunc_ln149_1_fu_1105_p1;
reg   [7:0] trunc_ln149_1_reg_1383;
wire   [0:0] icmp_ln147_fu_1065_p2;
wire  signed [2:0] xor_ln150_fu_1120_p2;
reg  signed [2:0] xor_ln150_reg_1388;
wire  signed [3:0] or_ln_fu_1142_p3;
reg  signed [3:0] or_ln_reg_1394;
wire   [7:0] trunc_ln152_fu_1161_p1;
reg   [7:0] trunc_ln152_reg_1399;
wire   [7:0] trunc_ln153_fu_1171_p1;
reg   [7:0] trunc_ln153_reg_1404;
wire   [7:0] trunc_ln154_fu_1181_p1;
reg   [7:0] trunc_ln154_reg_1409;
wire   [7:0] trunc_ln155_fu_1191_p1;
reg   [7:0] trunc_ln155_reg_1414;
wire   [7:0] trunc_ln156_fu_1201_p1;
reg   [7:0] trunc_ln156_reg_1419;
wire    grp_sha256_transform_fu_654_ap_start;
wire    grp_sha256_transform_fu_654_ap_idle;
reg   [31:0] grp_sha256_transform_fu_654_ctx_state_0_read;
reg   [31:0] grp_sha256_transform_fu_654_ctx_state_1_read;
reg   [31:0] grp_sha256_transform_fu_654_ctx_state_2_read;
reg   [31:0] grp_sha256_transform_fu_654_ctx_state_3_read;
reg   [31:0] grp_sha256_transform_fu_654_ctx_state_4_read;
reg   [31:0] grp_sha256_transform_fu_654_ctx_state_5_read;
reg   [31:0] grp_sha256_transform_fu_654_ctx_state_6_read;
reg   [31:0] grp_sha256_transform_fu_654_ctx_state_7_read;
wire   [3:0] grp_sha256_transform_fu_654_data_0_address0;
wire    grp_sha256_transform_fu_654_data_0_ce0;
wire   [3:0] grp_sha256_transform_fu_654_data_1_address0;
wire    grp_sha256_transform_fu_654_data_1_ce0;
wire   [3:0] grp_sha256_transform_fu_654_data_2_address0;
wire    grp_sha256_transform_fu_654_data_2_ce0;
wire   [3:0] grp_sha256_transform_fu_654_data_3_address0;
wire    grp_sha256_transform_fu_654_data_3_ce0;
wire   [31:0] grp_sha256_transform_fu_654_ap_return_0;
wire   [31:0] grp_sha256_transform_fu_654_ap_return_1;
wire   [31:0] grp_sha256_transform_fu_654_ap_return_2;
wire   [31:0] grp_sha256_transform_fu_654_ap_return_3;
wire   [31:0] grp_sha256_transform_fu_654_ap_return_4;
wire   [31:0] grp_sha256_transform_fu_654_ap_return_5;
wire   [31:0] grp_sha256_transform_fu_654_ap_return_6;
wire   [31:0] grp_sha256_transform_fu_654_ap_return_7;
reg   [31:0] i_1_in_reg_533;
wire   [0:0] icmp_ln122_fu_800_p2;
reg   [5:0] i_2_reg_542;
wire   [0:0] icmp_ln127_fu_828_p2;
reg   [31:0] i_0_in_reg_553;
wire   [0:0] icmp_ln115_fu_1033_p2;
reg   [31:0] ctx_state_0_0_reg_562;
reg   [31:0] ctx_state_1_0_reg_572;
reg   [31:0] ctx_state_2_0_reg_582;
reg   [31:0] ctx_state_3_0_reg_592;
reg   [31:0] ctx_state_4_0_reg_602;
reg   [31:0] ctx_state_5_0_reg_612;
reg   [31:0] ctx_state_6_0_reg_622;
reg   [31:0] ctx_state_7_0_reg_632;
reg   [2:0] i_3_reg_642;
wire    ap_CS_fsm_state11;
reg    grp_sha256_transform_fu_654_ap_start_reg;
wire    ap_CS_fsm_state6;
wire   [63:0] zext_ln114_fu_776_p1;
wire   [63:0] zext_ln124_fu_820_p1;
wire   [63:0] zext_ln128_fu_854_p1;
wire   [63:0] zext_ln117_fu_1053_p1;
wire   [63:0] zext_ln150_fu_1126_p1;
wire   [63:0] zext_ln151_fu_1150_p1;
wire   [63:0] zext_ln149_fu_1205_p1;
wire    ap_CS_fsm_state9;
wire   [63:0] zext_ln152_fu_1213_p1;
wire   [63:0] zext_ln153_fu_1226_p1;
wire    ap_CS_fsm_state10;
wire   [63:0] zext_ln154_fu_1236_p1;
wire   [63:0] zext_ln155_fu_1244_p1;
wire   [63:0] zext_ln156_fu_1252_p1;
wire   [1:0] trunc_ln114_fu_762_p1;
wire   [1:0] trunc_ln124_fu_806_p1;
wire   [1:0] trunc_ln128_fu_840_p1;
wire   [1:0] trunc_ln117_fu_1039_p1;
wire   [7:0] add_ln135_fu_949_p2;
wire   [7:0] trunc_ln139_fu_989_p1;
wire   [7:0] trunc_ln150_fu_1115_p1;
wire   [7:0] trunc_ln151_fu_1137_p1;
wire   [29:0] lshr_ln_fu_766_p4;
wire   [25:0] tmp_2_fu_790_p4;
wire   [29:0] lshr_ln4_fu_810_p4;
wire   [3:0] lshr_ln5_fu_844_p4;
wire   [31:0] shl_ln134_fu_862_p2;
wire   [31:0] xor_ln134_fu_867_p2;
wire   [0:0] icmp_ln134_fu_873_p2;
wire   [31:0] add_ln134_fu_878_p2;
wire   [4:0] trunc_ln134_2_fu_893_p1;
wire   [12:0] trunc_ln134_4_fu_907_p1;
wire   [20:0] trunc_ln134_8_fu_921_p1;
wire   [23:0] trunc_ln134_7_fu_924_p3;
wire   [23:0] trunc_ln134_6_fu_918_p1;
wire   [15:0] trunc_ln134_5_fu_910_p3;
wire   [15:0] trunc_ln134_3_fu_904_p1;
wire   [7:0] trunc_ln134_fu_890_p1;
wire   [7:0] trunc_ln134_1_fu_896_p3;
wire   [15:0] add_ln135_2_fu_943_p2;
wire   [23:0] add_ln135_1_fu_937_p2;
wire   [31:0] add_ln134_1_fu_932_p2;
wire   [31:0] select_ln134_fu_883_p3;
wire   [29:0] lshr_ln3_fu_1043_p4;
wire   [1:0] trunc_ln149_fu_1077_p1;
wire   [4:0] shl_ln1_fu_1081_p3;
wire   [4:0] sub_ln149_fu_1089_p2;
wire   [31:0] zext_ln149_1_fu_1095_p1;
wire   [31:0] lshr_ln149_fu_1099_p2;
wire   [31:0] lshr_ln150_fu_1109_p2;
wire   [31:0] lshr_ln151_fu_1131_p2;
wire   [31:0] lshr_ln152_fu_1155_p2;
wire   [31:0] lshr_ln153_fu_1165_p2;
wire   [31:0] lshr_ln154_fu_1175_p2;
wire   [31:0] lshr_ln155_fu_1185_p2;
wire   [31:0] lshr_ln156_fu_1195_p2;
wire  signed [3:0] sext_ln152_fu_1210_p1;
wire   [4:0] or_ln3_fu_1218_p3;
wire   [4:0] add_ln154_fu_1231_p2;
wire  signed [4:0] sext_ln155_fu_1241_p1;
wire  signed [4:0] sext_ln156_fu_1249_p1;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 grp_sha256_transform_fu_654_ap_start_reg = 1'b0;
end

sha256_transform grp_sha256_transform_fu_654(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_sha256_transform_fu_654_ap_start),
    .ap_done(grp_sha256_transform_fu_654_ap_done),
    .ap_idle(grp_sha256_transform_fu_654_ap_idle),
    .ap_ready(grp_sha256_transform_fu_654_ap_ready),
    .ctx_state_0_read(grp_sha256_transform_fu_654_ctx_state_0_read),
    .ctx_state_1_read(grp_sha256_transform_fu_654_ctx_state_1_read),
    .ctx_state_2_read(grp_sha256_transform_fu_654_ctx_state_2_read),
    .ctx_state_3_read(grp_sha256_transform_fu_654_ctx_state_3_read),
    .ctx_state_4_read(grp_sha256_transform_fu_654_ctx_state_4_read),
    .ctx_state_5_read(grp_sha256_transform_fu_654_ctx_state_5_read),
    .ctx_state_6_read(grp_sha256_transform_fu_654_ctx_state_6_read),
    .ctx_state_7_read(grp_sha256_transform_fu_654_ctx_state_7_read),
    .data_0_address0(grp_sha256_transform_fu_654_data_0_address0),
    .data_0_ce0(grp_sha256_transform_fu_654_data_0_ce0),
    .data_0_q0(ctx_data_0_q0),
    .data_1_address0(grp_sha256_transform_fu_654_data_1_address0),
    .data_1_ce0(grp_sha256_transform_fu_654_data_1_ce0),
    .data_1_q0(ctx_data_1_q0),
    .data_2_address0(grp_sha256_transform_fu_654_data_2_address0),
    .data_2_ce0(grp_sha256_transform_fu_654_data_2_ce0),
    .data_2_q0(ctx_data_2_q0),
    .data_3_address0(grp_sha256_transform_fu_654_data_3_address0),
    .data_3_ce0(grp_sha256_transform_fu_654_data_3_ce0),
    .data_3_q0(ctx_data_3_q0),
    .ap_return_0(grp_sha256_transform_fu_654_ap_return_0),
    .ap_return_1(grp_sha256_transform_fu_654_ap_return_1),
    .ap_return_2(grp_sha256_transform_fu_654_ap_return_2),
    .ap_return_3(grp_sha256_transform_fu_654_ap_return_3),
    .ap_return_4(grp_sha256_transform_fu_654_ap_return_4),
    .ap_return_5(grp_sha256_transform_fu_654_ap_return_5),
    .ap_return_6(grp_sha256_transform_fu_654_ap_return_6),
    .ap_return_7(grp_sha256_transform_fu_654_ap_return_7)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_sha256_transform_fu_654_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln122_fu_800_p2 == 1'd0)))) begin
            grp_sha256_transform_fu_654_ap_start_reg <= 1'b1;
        end else if ((grp_sha256_transform_fu_654_ap_ready == 1'b1)) begin
            grp_sha256_transform_fu_654_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln115_fu_1033_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ctx_state_0_0_reg_562 <= p_read2;
    end else if (((icmp_ln127_fu_828_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln113_reg_1330 == 1'd0))) begin
        ctx_state_0_0_reg_562 <= reg_716;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln115_fu_1033_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ctx_state_1_0_reg_572 <= p_read4;
    end else if (((icmp_ln127_fu_828_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln113_reg_1330 == 1'd0))) begin
        ctx_state_1_0_reg_572 <= reg_721;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln115_fu_1033_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ctx_state_2_0_reg_582 <= p_read5;
    end else if (((icmp_ln127_fu_828_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln113_reg_1330 == 1'd0))) begin
        ctx_state_2_0_reg_582 <= reg_726;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln115_fu_1033_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ctx_state_3_0_reg_592 <= p_read6;
    end else if (((icmp_ln127_fu_828_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln113_reg_1330 == 1'd0))) begin
        ctx_state_3_0_reg_592 <= reg_731;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln115_fu_1033_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ctx_state_4_0_reg_602 <= p_read7;
    end else if (((icmp_ln127_fu_828_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln113_reg_1330 == 1'd0))) begin
        ctx_state_4_0_reg_602 <= reg_736;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln115_fu_1033_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ctx_state_5_0_reg_612 <= p_read8;
    end else if (((icmp_ln127_fu_828_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln113_reg_1330 == 1'd0))) begin
        ctx_state_5_0_reg_612 <= reg_741;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln115_fu_1033_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ctx_state_6_0_reg_622 <= p_read9;
    end else if (((icmp_ln127_fu_828_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln113_reg_1330 == 1'd0))) begin
        ctx_state_6_0_reg_622 <= reg_746;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln115_fu_1033_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ctx_state_7_0_reg_632 <= p_read10;
    end else if (((icmp_ln127_fu_828_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln113_reg_1330 == 1'd0))) begin
        ctx_state_7_0_reg_632 <= reg_751;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (icmp_ln113_fu_756_p2 == 1'd1))) begin
        i_0_in_reg_553 <= ctx_datalen_read;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln115_fu_1033_p2 == 1'd0))) begin
        i_0_in_reg_553 <= i_fu_1027_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (icmp_ln113_fu_756_p2 == 1'd0))) begin
        i_1_in_reg_533 <= ctx_datalen_read;
    end else if (((icmp_ln122_fu_800_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_in_reg_533 <= i_4_fu_784_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln127_fu_828_p2 == 1'd0) & (icmp_ln113_reg_1330 == 1'd0))) begin
        i_2_reg_542 <= i_5_fu_834_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (grp_sha256_transform_fu_654_ap_done == 1'b1))) begin
        i_2_reg_542 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_3_reg_642 <= i_6_reg_1378;
    end else if (((1'b1 == ap_CS_fsm_state7) & (grp_sha256_transform_fu_654_ap_done == 1'b1))) begin
        i_3_reg_642 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_6_reg_1378 <= i_6_fu_1071_p2;
        zext_ln147_reg_1370[2 : 0] <= zext_ln147_fu_1061_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        icmp_ln113_reg_1330 <= icmp_ln113_fu_756_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln147_fu_1065_p2 == 1'd0))) begin
        or_ln_reg_1394[2 : 0] <= or_ln_fu_1142_p3[2 : 0];
        trunc_ln149_1_reg_1383 <= trunc_ln149_1_fu_1105_p1;
        trunc_ln152_reg_1399 <= trunc_ln152_fu_1161_p1;
        trunc_ln153_reg_1404 <= trunc_ln153_fu_1171_p1;
        trunc_ln154_reg_1409 <= trunc_ln154_fu_1181_p1;
        trunc_ln155_reg_1414 <= trunc_ln155_fu_1191_p1;
        trunc_ln156_reg_1419 <= trunc_ln156_fu_1201_p1;
        xor_ln150_reg_1388 <= xor_ln150_fu_1120_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state7) & (grp_sha256_transform_fu_654_ap_done == 1'b1)) | ((1'b1 == ap_CS_fsm_state3) & (grp_sha256_transform_fu_654_ap_done == 1'b1)))) begin
        reg_716 <= grp_sha256_transform_fu_654_ap_return_0;
        reg_721 <= grp_sha256_transform_fu_654_ap_return_1;
        reg_726 <= grp_sha256_transform_fu_654_ap_return_2;
        reg_731 <= grp_sha256_transform_fu_654_ap_return_3;
        reg_736 <= grp_sha256_transform_fu_654_ap_return_4;
        reg_741 <= grp_sha256_transform_fu_654_ap_return_5;
        reg_746 <= grp_sha256_transform_fu_654_ap_return_6;
        reg_751 <= grp_sha256_transform_fu_654_ap_return_7;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state8) & (icmp_ln147_fu_1065_p2 == 1'd1)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln147_fu_1065_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & ((icmp_ln127_fu_828_p2 == 1'd1) | (icmp_ln113_reg_1330 == 1'd1)))) begin
        ctx_data_0_address0 = 64'd15;
    end else if (((trunc_ln128_fu_840_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln127_fu_828_p2 == 1'd0) & (icmp_ln113_reg_1330 == 1'd0))) begin
        ctx_data_0_address0 = zext_ln128_fu_854_p1;
    end else if (((trunc_ln124_fu_806_p1 == 2'd3) & (icmp_ln122_fu_800_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ctx_data_0_address0 = zext_ln124_fu_820_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        ctx_data_0_address0 = zext_ln114_fu_776_p1;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3))) begin
        ctx_data_0_address0 = grp_sha256_transform_fu_654_data_0_address0;
    end else begin
        ctx_data_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ctx_data_0_address1 = zext_ln117_fu_1053_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_data_0_address1 = 64'd14;
    end else begin
        ctx_data_0_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((1'b1 == ap_CS_fsm_state4) & ((icmp_ln127_fu_828_p2 == 1'd1) | (icmp_ln113_reg_1330 == 1'd1))) | ((trunc_ln128_fu_840_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln127_fu_828_p2 == 1'd0) & (icmp_ln113_reg_1330 == 1'd0)) | ((trunc_ln124_fu_806_p1 == 2'd3) & (icmp_ln122_fu_800_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ctx_data_0_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3))) begin
        ctx_data_0_ce0 = grp_sha256_transform_fu_654_data_0_ce0;
    end else begin
        ctx_data_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        ctx_data_0_ce1 = 1'b1;
    end else begin
        ctx_data_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & ((icmp_ln127_fu_828_p2 == 1'd1) | (icmp_ln113_reg_1330 == 1'd1)))) begin
        ctx_data_0_d0 = {{add_ln134_1_fu_932_p2[31:24]}};
    end else if ((((trunc_ln128_fu_840_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln127_fu_828_p2 == 1'd0) & (icmp_ln113_reg_1330 == 1'd0)) | ((trunc_ln124_fu_806_p1 == 2'd3) & (icmp_ln122_fu_800_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ctx_data_0_d0 = 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        ctx_data_0_d0 = 8'd128;
    end else begin
        ctx_data_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ctx_data_0_d1 = 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_data_0_d1 = {{select_ln134_fu_883_p3[31:24]}};
    end else begin
        ctx_data_0_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((trunc_ln114_fu_762_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((1'b1 == ap_CS_fsm_state4) & ((icmp_ln127_fu_828_p2 == 1'd1) | (icmp_ln113_reg_1330 == 1'd1))) | ((trunc_ln128_fu_840_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln127_fu_828_p2 == 1'd0) & (icmp_ln113_reg_1330 == 1'd0)) | ((trunc_ln124_fu_806_p1 == 2'd3) & (icmp_ln122_fu_800_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ctx_data_0_we0 = 1'b1;
    end else begin
        ctx_data_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((trunc_ln117_fu_1039_p1 == 2'd3) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln115_fu_1033_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state4) & ((icmp_ln127_fu_828_p2 == 1'd1) | (icmp_ln113_reg_1330 == 1'd1))))) begin
        ctx_data_0_we1 = 1'b1;
    end else begin
        ctx_data_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & ((icmp_ln127_fu_828_p2 == 1'd1) | (icmp_ln113_reg_1330 == 1'd1)))) begin
        ctx_data_1_address0 = 64'd15;
    end else if (((trunc_ln128_fu_840_p1 == 2'd1) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln127_fu_828_p2 == 1'd0) & (icmp_ln113_reg_1330 == 1'd0))) begin
        ctx_data_1_address0 = zext_ln128_fu_854_p1;
    end else if (((trunc_ln124_fu_806_p1 == 2'd0) & (icmp_ln122_fu_800_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ctx_data_1_address0 = zext_ln124_fu_820_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        ctx_data_1_address0 = zext_ln114_fu_776_p1;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3))) begin
        ctx_data_1_address0 = grp_sha256_transform_fu_654_data_1_address0;
    end else begin
        ctx_data_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ctx_data_1_address1 = zext_ln117_fu_1053_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_data_1_address1 = 64'd14;
    end else begin
        ctx_data_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((1'b1 == ap_CS_fsm_state4) & ((icmp_ln127_fu_828_p2 == 1'd1) | (icmp_ln113_reg_1330 == 1'd1))) | ((trunc_ln128_fu_840_p1 == 2'd1) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln127_fu_828_p2 == 1'd0) & (icmp_ln113_reg_1330 == 1'd0)) | ((trunc_ln124_fu_806_p1 == 2'd0) & (icmp_ln122_fu_800_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ctx_data_1_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3))) begin
        ctx_data_1_ce0 = grp_sha256_transform_fu_654_data_1_ce0;
    end else begin
        ctx_data_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        ctx_data_1_ce1 = 1'b1;
    end else begin
        ctx_data_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & ((icmp_ln127_fu_828_p2 == 1'd1) | (icmp_ln113_reg_1330 == 1'd1)))) begin
        ctx_data_1_d0 = {{add_ln135_1_fu_937_p2[23:16]}};
    end else if ((((trunc_ln128_fu_840_p1 == 2'd1) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln127_fu_828_p2 == 1'd0) & (icmp_ln113_reg_1330 == 1'd0)) | ((trunc_ln124_fu_806_p1 == 2'd0) & (icmp_ln122_fu_800_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ctx_data_1_d0 = 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        ctx_data_1_d0 = 8'd128;
    end else begin
        ctx_data_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ctx_data_1_d1 = 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_data_1_d1 = {{select_ln134_fu_883_p3[23:16]}};
    end else begin
        ctx_data_1_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((trunc_ln114_fu_762_p1 == 2'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((1'b1 == ap_CS_fsm_state4) & ((icmp_ln127_fu_828_p2 == 1'd1) | (icmp_ln113_reg_1330 == 1'd1))) | ((trunc_ln128_fu_840_p1 == 2'd1) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln127_fu_828_p2 == 1'd0) & (icmp_ln113_reg_1330 == 1'd0)) | ((trunc_ln124_fu_806_p1 == 2'd0) & (icmp_ln122_fu_800_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ctx_data_1_we0 = 1'b1;
    end else begin
        ctx_data_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((trunc_ln117_fu_1039_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln115_fu_1033_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state4) & ((icmp_ln127_fu_828_p2 == 1'd1) | (icmp_ln113_reg_1330 == 1'd1))))) begin
        ctx_data_1_we1 = 1'b1;
    end else begin
        ctx_data_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & ((icmp_ln127_fu_828_p2 == 1'd1) | (icmp_ln113_reg_1330 == 1'd1)))) begin
        ctx_data_2_address0 = 64'd15;
    end else if (((trunc_ln128_fu_840_p1 == 2'd2) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln127_fu_828_p2 == 1'd0) & (icmp_ln113_reg_1330 == 1'd0))) begin
        ctx_data_2_address0 = zext_ln128_fu_854_p1;
    end else if (((trunc_ln124_fu_806_p1 == 2'd1) & (icmp_ln122_fu_800_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ctx_data_2_address0 = zext_ln124_fu_820_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        ctx_data_2_address0 = zext_ln114_fu_776_p1;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3))) begin
        ctx_data_2_address0 = grp_sha256_transform_fu_654_data_2_address0;
    end else begin
        ctx_data_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ctx_data_2_address1 = zext_ln117_fu_1053_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_data_2_address1 = 64'd14;
    end else begin
        ctx_data_2_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((1'b1 == ap_CS_fsm_state4) & ((icmp_ln127_fu_828_p2 == 1'd1) | (icmp_ln113_reg_1330 == 1'd1))) | ((trunc_ln128_fu_840_p1 == 2'd2) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln127_fu_828_p2 == 1'd0) & (icmp_ln113_reg_1330 == 1'd0)) | ((trunc_ln124_fu_806_p1 == 2'd1) & (icmp_ln122_fu_800_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ctx_data_2_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3))) begin
        ctx_data_2_ce0 = grp_sha256_transform_fu_654_data_2_ce0;
    end else begin
        ctx_data_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        ctx_data_2_ce1 = 1'b1;
    end else begin
        ctx_data_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & ((icmp_ln127_fu_828_p2 == 1'd1) | (icmp_ln113_reg_1330 == 1'd1)))) begin
        ctx_data_2_d0 = {{add_ln135_2_fu_943_p2[15:8]}};
    end else if ((((trunc_ln128_fu_840_p1 == 2'd2) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln127_fu_828_p2 == 1'd0) & (icmp_ln113_reg_1330 == 1'd0)) | ((trunc_ln124_fu_806_p1 == 2'd1) & (icmp_ln122_fu_800_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ctx_data_2_d0 = 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        ctx_data_2_d0 = 8'd128;
    end else begin
        ctx_data_2_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ctx_data_2_d1 = 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_data_2_d1 = {{select_ln134_fu_883_p3[15:8]}};
    end else begin
        ctx_data_2_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((trunc_ln114_fu_762_p1 == 2'd2) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((1'b1 == ap_CS_fsm_state4) & ((icmp_ln127_fu_828_p2 == 1'd1) | (icmp_ln113_reg_1330 == 1'd1))) | ((trunc_ln128_fu_840_p1 == 2'd2) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln127_fu_828_p2 == 1'd0) & (icmp_ln113_reg_1330 == 1'd0)) | ((trunc_ln124_fu_806_p1 == 2'd1) & (icmp_ln122_fu_800_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ctx_data_2_we0 = 1'b1;
    end else begin
        ctx_data_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((trunc_ln117_fu_1039_p1 == 2'd1) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln115_fu_1033_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state4) & ((icmp_ln127_fu_828_p2 == 1'd1) | (icmp_ln113_reg_1330 == 1'd1))))) begin
        ctx_data_2_we1 = 1'b1;
    end else begin
        ctx_data_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & ((icmp_ln127_fu_828_p2 == 1'd1) | (icmp_ln113_reg_1330 == 1'd1)))) begin
        ctx_data_3_address0 = 64'd15;
    end else if (((trunc_ln128_fu_840_p1 == 2'd3) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln127_fu_828_p2 == 1'd0) & (icmp_ln113_reg_1330 == 1'd0))) begin
        ctx_data_3_address0 = zext_ln128_fu_854_p1;
    end else if (((trunc_ln124_fu_806_p1 == 2'd2) & (icmp_ln122_fu_800_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ctx_data_3_address0 = zext_ln124_fu_820_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        ctx_data_3_address0 = zext_ln114_fu_776_p1;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3))) begin
        ctx_data_3_address0 = grp_sha256_transform_fu_654_data_3_address0;
    end else begin
        ctx_data_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ctx_data_3_address1 = zext_ln117_fu_1053_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_data_3_address1 = 64'd14;
    end else begin
        ctx_data_3_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((1'b1 == ap_CS_fsm_state4) & ((icmp_ln127_fu_828_p2 == 1'd1) | (icmp_ln113_reg_1330 == 1'd1))) | ((trunc_ln128_fu_840_p1 == 2'd3) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln127_fu_828_p2 == 1'd0) & (icmp_ln113_reg_1330 == 1'd0)) | ((trunc_ln124_fu_806_p1 == 2'd2) & (icmp_ln122_fu_800_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ctx_data_3_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3))) begin
        ctx_data_3_ce0 = grp_sha256_transform_fu_654_data_3_ce0;
    end else begin
        ctx_data_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        ctx_data_3_ce1 = 1'b1;
    end else begin
        ctx_data_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & ((icmp_ln127_fu_828_p2 == 1'd1) | (icmp_ln113_reg_1330 == 1'd1)))) begin
        ctx_data_3_d0 = add_ln135_fu_949_p2;
    end else if ((((trunc_ln128_fu_840_p1 == 2'd3) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln127_fu_828_p2 == 1'd0) & (icmp_ln113_reg_1330 == 1'd0)) | ((trunc_ln124_fu_806_p1 == 2'd2) & (icmp_ln122_fu_800_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ctx_data_3_d0 = 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        ctx_data_3_d0 = 8'd128;
    end else begin
        ctx_data_3_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ctx_data_3_d1 = 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_data_3_d1 = trunc_ln139_fu_989_p1;
    end else begin
        ctx_data_3_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((trunc_ln114_fu_762_p1 == 2'd3) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((1'b1 == ap_CS_fsm_state4) & ((icmp_ln127_fu_828_p2 == 1'd1) | (icmp_ln113_reg_1330 == 1'd1))) | ((trunc_ln128_fu_840_p1 == 2'd3) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln127_fu_828_p2 == 1'd0) & (icmp_ln113_reg_1330 == 1'd0)) | ((trunc_ln124_fu_806_p1 == 2'd2) & (icmp_ln122_fu_800_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ctx_data_3_we0 = 1'b1;
    end else begin
        ctx_data_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((trunc_ln117_fu_1039_p1 == 2'd2) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln115_fu_1033_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state4) & ((icmp_ln127_fu_828_p2 == 1'd1) | (icmp_ln113_reg_1330 == 1'd1))))) begin
        ctx_data_3_we1 = 1'b1;
    end else begin
        ctx_data_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_sha256_transform_fu_654_ctx_state_0_read = ctx_state_0_0_reg_562;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_sha256_transform_fu_654_ctx_state_0_read = p_read2;
    end else begin
        grp_sha256_transform_fu_654_ctx_state_0_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_sha256_transform_fu_654_ctx_state_1_read = ctx_state_1_0_reg_572;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_sha256_transform_fu_654_ctx_state_1_read = p_read4;
    end else begin
        grp_sha256_transform_fu_654_ctx_state_1_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_sha256_transform_fu_654_ctx_state_2_read = ctx_state_2_0_reg_582;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_sha256_transform_fu_654_ctx_state_2_read = p_read5;
    end else begin
        grp_sha256_transform_fu_654_ctx_state_2_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_sha256_transform_fu_654_ctx_state_3_read = ctx_state_3_0_reg_592;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_sha256_transform_fu_654_ctx_state_3_read = p_read6;
    end else begin
        grp_sha256_transform_fu_654_ctx_state_3_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_sha256_transform_fu_654_ctx_state_4_read = ctx_state_4_0_reg_602;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_sha256_transform_fu_654_ctx_state_4_read = p_read7;
    end else begin
        grp_sha256_transform_fu_654_ctx_state_4_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_sha256_transform_fu_654_ctx_state_5_read = ctx_state_5_0_reg_612;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_sha256_transform_fu_654_ctx_state_5_read = p_read8;
    end else begin
        grp_sha256_transform_fu_654_ctx_state_5_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_sha256_transform_fu_654_ctx_state_6_read = ctx_state_6_0_reg_622;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_sha256_transform_fu_654_ctx_state_6_read = p_read9;
    end else begin
        grp_sha256_transform_fu_654_ctx_state_6_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_sha256_transform_fu_654_ctx_state_7_read = ctx_state_7_0_reg_632;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_sha256_transform_fu_654_ctx_state_7_read = p_read10;
    end else begin
        grp_sha256_transform_fu_654_ctx_state_7_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        hash_address0 = zext_ln155_fu_1244_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        hash_address0 = zext_ln153_fu_1226_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        hash_address0 = zext_ln149_fu_1205_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        hash_address0 = zext_ln150_fu_1126_p1;
    end else begin
        hash_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        hash_address1 = zext_ln156_fu_1252_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        hash_address1 = zext_ln154_fu_1236_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        hash_address1 = zext_ln152_fu_1213_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        hash_address1 = zext_ln151_fu_1150_p1;
    end else begin
        hash_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8))) begin
        hash_ce0 = 1'b1;
    end else begin
        hash_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8))) begin
        hash_ce1 = 1'b1;
    end else begin
        hash_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        hash_d0 = trunc_ln155_reg_1414;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        hash_d0 = trunc_ln153_reg_1404;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        hash_d0 = trunc_ln149_1_reg_1383;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        hash_d0 = trunc_ln150_fu_1115_p1;
    end else begin
        hash_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        hash_d1 = trunc_ln156_reg_1419;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        hash_d1 = trunc_ln154_reg_1409;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        hash_d1 = trunc_ln152_reg_1399;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        hash_d1 = trunc_ln151_fu_1137_p1;
    end else begin
        hash_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state8) & (icmp_ln147_fu_1065_p2 == 1'd0)))) begin
        hash_we0 = 1'b1;
    end else begin
        hash_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state8) & (icmp_ln147_fu_1065_p2 == 1'd0)))) begin
        hash_we1 = 1'b1;
    end else begin
        hash_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (icmp_ln113_fu_756_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (icmp_ln113_fu_756_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln122_fu_800_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (grp_sha256_transform_fu_654_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & ((icmp_ln127_fu_828_p2 == 1'd1) | (icmp_ln113_reg_1330 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln115_fu_1033_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (grp_sha256_transform_fu_654_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln147_fu_1065_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln134_1_fu_932_p2 = (ctx_bitlen_0_read + shl_ln134_fu_862_p2);

assign add_ln134_fu_878_p2 = (32'd1 + p_read3);

assign add_ln135_1_fu_937_p2 = (trunc_ln134_7_fu_924_p3 + trunc_ln134_6_fu_918_p1);

assign add_ln135_2_fu_943_p2 = (trunc_ln134_5_fu_910_p3 + trunc_ln134_3_fu_904_p1);

assign add_ln135_fu_949_p2 = (trunc_ln134_fu_890_p1 + trunc_ln134_1_fu_896_p3);

assign add_ln154_fu_1231_p2 = ($signed(5'd20) + $signed(zext_ln147_reg_1370));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_sha256_transform_fu_654_ap_start = grp_sha256_transform_fu_654_ap_start_reg;

assign i_4_fu_784_p2 = (i_1_in_reg_533 + 32'd1);

assign i_5_fu_834_p2 = (i_2_reg_542 + 6'd1);

assign i_6_fu_1071_p2 = (i_3_reg_642 + 3'd1);

assign i_fu_1027_p2 = (i_0_in_reg_553 + 32'd1);

assign icmp_ln113_fu_756_p2 = ((ctx_datalen_read < 32'd56) ? 1'b1 : 1'b0);

assign icmp_ln115_fu_1033_p2 = ((i_0_in_reg_553 == 32'd55) ? 1'b1 : 1'b0);

assign icmp_ln122_fu_800_p2 = ((tmp_2_fu_790_p4 == 26'd0) ? 1'b1 : 1'b0);

assign icmp_ln127_fu_828_p2 = ((i_2_reg_542 == 6'd56) ? 1'b1 : 1'b0);

assign icmp_ln134_fu_873_p2 = ((ctx_bitlen_0_read > xor_ln134_fu_867_p2) ? 1'b1 : 1'b0);

assign icmp_ln147_fu_1065_p2 = ((i_3_reg_642 == 3'd4) ? 1'b1 : 1'b0);

assign lshr_ln149_fu_1099_p2 = reg_716 >> zext_ln149_1_fu_1095_p1;

assign lshr_ln150_fu_1109_p2 = reg_721 >> zext_ln149_1_fu_1095_p1;

assign lshr_ln151_fu_1131_p2 = reg_726 >> zext_ln149_1_fu_1095_p1;

assign lshr_ln152_fu_1155_p2 = reg_731 >> zext_ln149_1_fu_1095_p1;

assign lshr_ln153_fu_1165_p2 = reg_736 >> zext_ln149_1_fu_1095_p1;

assign lshr_ln154_fu_1175_p2 = reg_741 >> zext_ln149_1_fu_1095_p1;

assign lshr_ln155_fu_1185_p2 = reg_746 >> zext_ln149_1_fu_1095_p1;

assign lshr_ln156_fu_1195_p2 = reg_751 >> zext_ln149_1_fu_1095_p1;

assign lshr_ln3_fu_1043_p4 = {{i_fu_1027_p2[31:2]}};

assign lshr_ln4_fu_810_p4 = {{i_4_fu_784_p2[31:2]}};

assign lshr_ln5_fu_844_p4 = {{i_2_reg_542[5:2]}};

assign lshr_ln_fu_766_p4 = {{ctx_datalen_read[31:2]}};

assign or_ln3_fu_1218_p3 = {{2'd2}, {i_3_reg_642}};

assign or_ln_fu_1142_p3 = {{1'd1}, {i_3_reg_642}};

assign select_ln134_fu_883_p3 = ((icmp_ln134_fu_873_p2[0:0] === 1'b1) ? add_ln134_fu_878_p2 : p_read3);

assign sext_ln152_fu_1210_p1 = xor_ln150_reg_1388;

assign sext_ln155_fu_1241_p1 = or_ln_reg_1394;

assign sext_ln156_fu_1249_p1 = xor_ln150_reg_1388;

assign shl_ln134_fu_862_p2 = ctx_datalen_read << 32'd3;

assign shl_ln1_fu_1081_p3 = {{trunc_ln149_fu_1077_p1}, {3'd0}};

assign sub_ln149_fu_1089_p2 = ($signed(5'd24) - $signed(shl_ln1_fu_1081_p3));

assign tmp_2_fu_790_p4 = {{i_4_fu_784_p2[31:6]}};

assign trunc_ln114_fu_762_p1 = ctx_datalen_read[1:0];

assign trunc_ln117_fu_1039_p1 = i_0_in_reg_553[1:0];

assign trunc_ln124_fu_806_p1 = i_1_in_reg_533[1:0];

assign trunc_ln128_fu_840_p1 = i_2_reg_542[1:0];

assign trunc_ln134_1_fu_896_p3 = {{trunc_ln134_2_fu_893_p1}, {3'd0}};

assign trunc_ln134_2_fu_893_p1 = ctx_datalen_read[4:0];

assign trunc_ln134_3_fu_904_p1 = ctx_bitlen_0_read[15:0];

assign trunc_ln134_4_fu_907_p1 = ctx_datalen_read[12:0];

assign trunc_ln134_5_fu_910_p3 = {{trunc_ln134_4_fu_907_p1}, {3'd0}};

assign trunc_ln134_6_fu_918_p1 = ctx_bitlen_0_read[23:0];

assign trunc_ln134_7_fu_924_p3 = {{trunc_ln134_8_fu_921_p1}, {3'd0}};

assign trunc_ln134_8_fu_921_p1 = ctx_datalen_read[20:0];

assign trunc_ln134_fu_890_p1 = ctx_bitlen_0_read[7:0];

assign trunc_ln139_fu_989_p1 = select_ln134_fu_883_p3[7:0];

assign trunc_ln149_1_fu_1105_p1 = lshr_ln149_fu_1099_p2[7:0];

assign trunc_ln149_fu_1077_p1 = i_3_reg_642[1:0];

assign trunc_ln150_fu_1115_p1 = lshr_ln150_fu_1109_p2[7:0];

assign trunc_ln151_fu_1137_p1 = lshr_ln151_fu_1131_p2[7:0];

assign trunc_ln152_fu_1161_p1 = lshr_ln152_fu_1155_p2[7:0];

assign trunc_ln153_fu_1171_p1 = lshr_ln153_fu_1165_p2[7:0];

assign trunc_ln154_fu_1181_p1 = lshr_ln154_fu_1175_p2[7:0];

assign trunc_ln155_fu_1191_p1 = lshr_ln155_fu_1185_p2[7:0];

assign trunc_ln156_fu_1201_p1 = lshr_ln156_fu_1195_p2[7:0];

assign xor_ln134_fu_867_p2 = (shl_ln134_fu_862_p2 ^ 32'd4294967295);

assign xor_ln150_fu_1120_p2 = (i_3_reg_642 ^ 3'd4);

assign zext_ln114_fu_776_p1 = lshr_ln_fu_766_p4;

assign zext_ln117_fu_1053_p1 = lshr_ln3_fu_1043_p4;

assign zext_ln124_fu_820_p1 = lshr_ln4_fu_810_p4;

assign zext_ln128_fu_854_p1 = lshr_ln5_fu_844_p4;

assign zext_ln147_fu_1061_p1 = i_3_reg_642;

assign zext_ln149_1_fu_1095_p1 = sub_ln149_fu_1089_p2;

assign zext_ln149_fu_1205_p1 = i_3_reg_642;

assign zext_ln150_fu_1126_p1 = $unsigned(xor_ln150_fu_1120_p2);

assign zext_ln151_fu_1150_p1 = $unsigned(or_ln_fu_1142_p3);

assign zext_ln152_fu_1213_p1 = $unsigned(sext_ln152_fu_1210_p1);

assign zext_ln153_fu_1226_p1 = or_ln3_fu_1218_p3;

assign zext_ln154_fu_1236_p1 = add_ln154_fu_1231_p2;

assign zext_ln155_fu_1244_p1 = $unsigned(sext_ln155_fu_1241_p1);

assign zext_ln156_fu_1252_p1 = $unsigned(sext_ln156_fu_1249_p1);

always @ (posedge ap_clk) begin
    zext_ln147_reg_1370[4:3] <= 2'b00;
    or_ln_reg_1394[3] <= 1'b1;
end

endmodule //sha256_final
