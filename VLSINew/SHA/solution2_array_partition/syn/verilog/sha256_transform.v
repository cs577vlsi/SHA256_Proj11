// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sha256_transform (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ctx_state_0_read,
        ctx_state_1_read,
        ctx_state_2_read,
        ctx_state_3_read,
        ctx_state_4_read,
        ctx_state_5_read,
        ctx_state_6_read,
        ctx_state_7_read,
        data_0_address0,
        data_0_ce0,
        data_0_q0,
        data_1_address0,
        data_1_ce0,
        data_1_q0,
        data_2_address0,
        data_2_ce0,
        data_2_q0,
        data_3_address0,
        data_3_ce0,
        data_3_q0,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] ctx_state_0_read;
input  [31:0] ctx_state_1_read;
input  [31:0] ctx_state_2_read;
input  [31:0] ctx_state_3_read;
input  [31:0] ctx_state_4_read;
input  [31:0] ctx_state_5_read;
input  [31:0] ctx_state_6_read;
input  [31:0] ctx_state_7_read;
output  [3:0] data_0_address0;
output   data_0_ce0;
input  [7:0] data_0_q0;
output  [3:0] data_1_address0;
output   data_1_ce0;
input  [7:0] data_1_q0;
output  [3:0] data_2_address0;
output   data_2_ce0;
input  [7:0] data_2_q0;
output  [3:0] data_3_address0;
output   data_3_ce0;
input  [7:0] data_3_q0;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;
output  [31:0] ap_return_3;
output  [31:0] ap_return_4;
output  [31:0] ap_return_5;
output  [31:0] ap_return_6;
output  [31:0] ap_return_7;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_0_ce0;
reg data_1_ce0;
reg data_2_ce0;
reg data_3_ce0;
reg[31:0] ap_return_0;
reg[31:0] ap_return_1;
reg[31:0] ap_return_2;
reg[31:0] ap_return_3;
reg[31:0] ap_return_4;
reg[31:0] ap_return_5;
reg[31:0] ap_return_6;
reg[31:0] ap_return_7;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] k_address0;
reg    k_ce0;
wire   [31:0] k_q0;
wire   [31:0] m_q0;
reg   [31:0] reg_432;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire   [4:0] add_ln34_fu_442_p2;
reg   [4:0] add_ln34_reg_1086;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln36_fu_448_p1;
reg   [63:0] zext_ln36_reg_1091;
wire   [0:0] icmp_ln34_fu_436_p2;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln38_fu_469_p2;
wire   [31:0] m_q1;
reg   [31:0] m_load_1_reg_1129;
wire   [31:0] add_ln40_5_fu_659_p2;
reg   [31:0] add_ln40_5_reg_1144;
wire   [6:0] i_fu_681_p2;
wire    ap_CS_fsm_state7;
wire   [6:0] i_3_fu_693_p2;
reg   [6:0] i_3_reg_1157;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln51_fu_687_p2;
wire   [31:0] add_ln53_2_fu_813_p2;
reg   [31:0] add_ln53_2_reg_1172;
wire   [31:0] xor_ln54_3_fu_837_p2;
reg   [31:0] xor_ln54_3_reg_1177;
wire   [31:0] t1_fu_937_p2;
reg   [31:0] t1_reg_1182;
wire    ap_CS_fsm_state9;
wire   [31:0] e_fu_1020_p2;
wire    ap_CS_fsm_state10;
wire   [31:0] a_fu_1029_p2;
reg   [5:0] m_address0;
reg    m_ce0;
reg    m_we0;
wire   [31:0] m_d0;
reg   [5:0] m_address1;
reg    m_ce1;
reg    m_we1;
wire   [31:0] m_d1;
reg   [4:0] i_0_reg_313;
wire    ap_CS_fsm_state3;
reg   [6:0] i_1_reg_324;
reg   [31:0] h_reg_345;
reg   [31:0] h_0_reg_336;
reg   [31:0] g_reg_356;
reg   [31:0] f_reg_367;
reg   [31:0] d_reg_388;
reg   [31:0] d_0_reg_378;
reg   [31:0] c_reg_399;
reg   [31:0] b_reg_410;
reg   [6:0] i_2_reg_421;
wire   [63:0] zext_ln40_fu_481_p1;
wire   [63:0] zext_ln40_1_fu_492_p1;
wire   [63:0] zext_ln40_2_fu_503_p1;
wire   [63:0] zext_ln40_3_fu_514_p1;
wire   [63:0] zext_ln40_4_fu_676_p1;
wire   [63:0] zext_ln53_fu_801_p1;
wire   [6:0] add_ln40_fu_475_p2;
wire   [6:0] add_ln40_1_fu_486_p2;
wire   [6:0] add_ln40_2_fu_497_p2;
wire   [6:0] add_ln40_3_fu_508_p2;
wire   [16:0] trunc_ln40_fu_529_p1;
wire   [14:0] lshr_ln_fu_519_p4;
wire   [18:0] trunc_ln40_1_fu_551_p1;
wire   [12:0] lshr_ln40_1_fu_541_p4;
wire   [21:0] lshr_ln40_2_fu_563_p4;
wire   [31:0] zext_ln40_5_fu_573_p1;
wire   [31:0] or_ln40_1_fu_555_p3;
wire   [31:0] xor_ln40_fu_577_p2;
wire   [31:0] or_ln_fu_533_p3;
wire   [6:0] trunc_ln40_2_fu_599_p1;
wire   [24:0] lshr_ln40_3_fu_589_p4;
wire   [17:0] trunc_ln40_3_fu_621_p1;
wire   [13:0] lshr_ln40_4_fu_611_p4;
wire   [28:0] lshr_ln40_5_fu_633_p4;
wire   [31:0] zext_ln40_6_fu_643_p1;
wire   [31:0] or_ln40_3_fu_625_p3;
wire   [31:0] xor_ln40_2_fu_647_p2;
wire   [31:0] or_ln40_2_fu_603_p3;
wire   [31:0] xor_ln40_1_fu_583_p2;
wire   [31:0] xor_ln40_3_fu_653_p2;
wire   [31:0] add_ln40_4_fu_665_p2;
wire   [5:0] trunc_ln53_fu_709_p1;
wire   [25:0] lshr_ln1_fu_699_p4;
wire   [10:0] trunc_ln53_1_fu_731_p1;
wire   [20:0] lshr_ln53_1_fu_721_p4;
wire   [24:0] trunc_ln53_2_fu_753_p1;
wire   [6:0] lshr_ln53_2_fu_743_p4;
wire   [31:0] or_ln1_fu_713_p3;
wire   [31:0] or_ln53_1_fu_735_p3;
wire   [31:0] xor_ln53_fu_765_p2;
wire   [31:0] or_ln53_2_fu_757_p3;
wire   [31:0] xor_ln53_2_fu_783_p2;
wire   [31:0] and_ln53_fu_777_p2;
wire   [31:0] and_ln53_1_fu_789_p2;
wire   [31:0] xor_ln53_1_fu_771_p2;
wire   [31:0] xor_ln53_3_fu_795_p2;
wire   [31:0] add_ln53_1_fu_807_p2;
wire   [31:0] xor_ln54_2_fu_819_p2;
wire   [31:0] and_ln54_fu_825_p2;
wire   [31:0] and_ln54_1_fu_831_p2;
wire   [31:0] add_ln65_fu_843_p2;
wire   [31:0] add_ln66_fu_848_p2;
wire   [31:0] add_ln67_fu_853_p2;
wire   [31:0] add_ln68_fu_858_p2;
wire   [31:0] add_ln69_fu_863_p2;
wire   [31:0] add_ln70_fu_868_p2;
wire   [31:0] add_ln71_fu_873_p2;
wire   [31:0] add_ln72_fu_878_p2;
wire   [31:0] add_ln53_fu_931_p2;
wire   [1:0] trunc_ln54_fu_952_p1;
wire   [29:0] lshr_ln2_fu_942_p4;
wire   [12:0] trunc_ln54_1_fu_974_p1;
wire   [18:0] lshr_ln54_1_fu_964_p4;
wire   [21:0] trunc_ln54_2_fu_996_p1;
wire   [9:0] lshr_ln54_2_fu_986_p4;
wire   [31:0] or_ln2_fu_956_p3;
wire   [31:0] or_ln54_1_fu_978_p3;
wire   [31:0] xor_ln54_fu_1008_p2;
wire   [31:0] or_ln54_2_fu_1000_p3;
wire   [31:0] add_ln62_fu_1025_p2;
wire   [31:0] xor_ln54_1_fu_1014_p2;
reg   [31:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [31:0] ap_return_2_preg;
reg   [31:0] ap_return_3_preg;
reg   [31:0] ap_return_4_preg;
reg   [31:0] ap_return_5_preg;
reg   [31:0] ap_return_6_preg;
reg   [31:0] ap_return_7_preg;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 32'd0;
#0 ap_return_2_preg = 32'd0;
#0 ap_return_3_preg = 32'd0;
#0 ap_return_4_preg = 32'd0;
#0 ap_return_5_preg = 32'd0;
#0 ap_return_6_preg = 32'd0;
#0 ap_return_7_preg = 32'd0;
end

sha256_transform_k #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
k_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(k_address0),
    .ce0(k_ce0),
    .q0(k_q0)
);

sha256_transform_m #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
m_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(m_address0),
    .ce0(m_ce0),
    .we0(m_we0),
    .d0(m_d0),
    .q0(m_q0),
    .address1(m_address1),
    .ce1(m_ce1),
    .we1(m_we1),
    .d1(m_d1),
    .q1(m_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln51_fu_687_p2 == 1'd1))) begin
            ap_return_0_preg <= add_ln65_fu_843_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln51_fu_687_p2 == 1'd1))) begin
            ap_return_1_preg <= add_ln66_fu_848_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln51_fu_687_p2 == 1'd1))) begin
            ap_return_2_preg <= add_ln67_fu_853_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln51_fu_687_p2 == 1'd1))) begin
            ap_return_3_preg <= add_ln68_fu_858_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_4_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln51_fu_687_p2 == 1'd1))) begin
            ap_return_4_preg <= add_ln69_fu_863_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_5_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln51_fu_687_p2 == 1'd1))) begin
            ap_return_5_preg <= add_ln70_fu_868_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_6_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln51_fu_687_p2 == 1'd1))) begin
            ap_return_6_preg <= add_ln71_fu_873_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_7_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln51_fu_687_p2 == 1'd1))) begin
            ap_return_7_preg <= add_ln72_fu_878_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln38_fu_469_p2 == 1'd1))) begin
        b_reg_410 <= ctx_state_0_read;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        b_reg_410 <= a_fu_1029_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln38_fu_469_p2 == 1'd1))) begin
        c_reg_399 <= ctx_state_1_read;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        c_reg_399 <= b_reg_410;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln38_fu_469_p2 == 1'd1))) begin
        d_0_reg_378 <= ctx_state_3_read;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        d_0_reg_378 <= d_reg_388;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln38_fu_469_p2 == 1'd1))) begin
        d_reg_388 <= ctx_state_2_read;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        d_reg_388 <= c_reg_399;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln38_fu_469_p2 == 1'd1))) begin
        f_reg_367 <= ctx_state_4_read;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        f_reg_367 <= e_fu_1020_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln38_fu_469_p2 == 1'd1))) begin
        g_reg_356 <= ctx_state_5_read;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        g_reg_356 <= f_reg_367;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln38_fu_469_p2 == 1'd1))) begin
        h_0_reg_336 <= ctx_state_7_read;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        h_0_reg_336 <= h_reg_345;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln38_fu_469_p2 == 1'd1))) begin
        h_reg_345 <= ctx_state_6_read;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        h_reg_345 <= g_reg_356;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_313 <= add_ln34_reg_1086;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_313 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln34_fu_436_p2 == 1'd1))) begin
        i_1_reg_324 <= 7'd16;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        i_1_reg_324 <= i_fu_681_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln38_fu_469_p2 == 1'd1))) begin
        i_2_reg_421 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        i_2_reg_421 <= i_3_reg_1157;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln34_reg_1086 <= add_ln34_fu_442_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln40_5_reg_1144 <= add_ln40_5_fu_659_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln51_fu_687_p2 == 1'd0))) begin
        add_ln53_2_reg_1172 <= add_ln53_2_fu_813_p2;
        xor_ln54_3_reg_1177 <= xor_ln54_3_fu_837_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_3_reg_1157 <= i_3_fu_693_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_load_1_reg_1129 <= m_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_432 <= m_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        t1_reg_1182 <= t1_fu_937_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln34_fu_436_p2 == 1'd0))) begin
        zext_ln36_reg_1091[4 : 0] <= zext_ln36_fu_448_p1[4 : 0];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state8) & (icmp_ln51_fu_687_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln51_fu_687_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln51_fu_687_p2 == 1'd1))) begin
        ap_return_0 = add_ln65_fu_843_p2;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln51_fu_687_p2 == 1'd1))) begin
        ap_return_1 = add_ln66_fu_848_p2;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln51_fu_687_p2 == 1'd1))) begin
        ap_return_2 = add_ln67_fu_853_p2;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln51_fu_687_p2 == 1'd1))) begin
        ap_return_3 = add_ln68_fu_858_p2;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln51_fu_687_p2 == 1'd1))) begin
        ap_return_4 = add_ln69_fu_863_p2;
    end else begin
        ap_return_4 = ap_return_4_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln51_fu_687_p2 == 1'd1))) begin
        ap_return_5 = add_ln70_fu_868_p2;
    end else begin
        ap_return_5 = ap_return_5_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln51_fu_687_p2 == 1'd1))) begin
        ap_return_6 = add_ln71_fu_873_p2;
    end else begin
        ap_return_6 = ap_return_6_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln51_fu_687_p2 == 1'd1))) begin
        ap_return_7 = add_ln72_fu_878_p2;
    end else begin
        ap_return_7 = ap_return_7_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data_0_ce0 = 1'b1;
    end else begin
        data_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data_1_ce0 = 1'b1;
    end else begin
        data_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data_2_ce0 = 1'b1;
    end else begin
        data_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data_3_ce0 = 1'b1;
    end else begin
        data_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        k_ce0 = 1'b1;
    end else begin
        k_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        m_address0 = zext_ln53_fu_801_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        m_address0 = zext_ln40_3_fu_514_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        m_address0 = zext_ln40_fu_481_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        m_address0 = zext_ln36_reg_1091;
    end else begin
        m_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        m_address1 = zext_ln40_4_fu_676_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        m_address1 = zext_ln40_2_fu_503_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        m_address1 = zext_ln40_1_fu_492_p1;
    end else begin
        m_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4))) begin
        m_ce0 = 1'b1;
    end else begin
        m_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4))) begin
        m_ce1 = 1'b1;
    end else begin
        m_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        m_we0 = 1'b1;
    end else begin
        m_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        m_we1 = 1'b1;
    end else begin
        m_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln34_fu_436_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln38_fu_469_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln51_fu_687_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_fu_1029_p2 = (add_ln62_fu_1025_p2 + xor_ln54_1_fu_1014_p2);

assign add_ln34_fu_442_p2 = (i_0_reg_313 + 5'd1);

assign add_ln40_1_fu_486_p2 = ($signed(7'd121) + $signed(i_1_reg_324));

assign add_ln40_2_fu_497_p2 = ($signed(7'd113) + $signed(i_1_reg_324));

assign add_ln40_3_fu_508_p2 = ($signed(7'd112) + $signed(i_1_reg_324));

assign add_ln40_4_fu_665_p2 = (m_load_1_reg_1129 + reg_432);

assign add_ln40_5_fu_659_p2 = (xor_ln40_1_fu_583_p2 + xor_ln40_3_fu_653_p2);

assign add_ln40_fu_475_p2 = ($signed(7'd126) + $signed(i_1_reg_324));

assign add_ln53_1_fu_807_p2 = (xor_ln53_1_fu_771_p2 + xor_ln53_3_fu_795_p2);

assign add_ln53_2_fu_813_p2 = (add_ln53_1_fu_807_p2 + h_0_reg_336);

assign add_ln53_fu_931_p2 = (k_q0 + m_q0);

assign add_ln62_fu_1025_p2 = (xor_ln54_3_reg_1177 + t1_reg_1182);

assign add_ln65_fu_843_p2 = (b_reg_410 + ctx_state_0_read);

assign add_ln66_fu_848_p2 = (c_reg_399 + ctx_state_1_read);

assign add_ln67_fu_853_p2 = (d_reg_388 + ctx_state_2_read);

assign add_ln68_fu_858_p2 = (d_0_reg_378 + ctx_state_3_read);

assign add_ln69_fu_863_p2 = (f_reg_367 + ctx_state_4_read);

assign add_ln70_fu_868_p2 = (g_reg_356 + ctx_state_5_read);

assign add_ln71_fu_873_p2 = (h_reg_345 + ctx_state_6_read);

assign add_ln72_fu_878_p2 = (h_0_reg_336 + ctx_state_7_read);

assign and_ln53_1_fu_789_p2 = (xor_ln53_2_fu_783_p2 & h_reg_345);

assign and_ln53_fu_777_p2 = (g_reg_356 & f_reg_367);

assign and_ln54_1_fu_831_p2 = (d_reg_388 & c_reg_399);

assign and_ln54_fu_825_p2 = (xor_ln54_2_fu_819_p2 & b_reg_410);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign data_0_address0 = zext_ln36_fu_448_p1;

assign data_1_address0 = zext_ln36_fu_448_p1;

assign data_2_address0 = zext_ln36_fu_448_p1;

assign data_3_address0 = zext_ln36_fu_448_p1;

assign e_fu_1020_p2 = (t1_reg_1182 + d_0_reg_378);

assign i_3_fu_693_p2 = (i_2_reg_421 + 7'd1);

assign i_fu_681_p2 = (7'd1 + i_1_reg_324);

assign icmp_ln34_fu_436_p2 = ((i_0_reg_313 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_469_p2 = ((i_1_reg_324 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_687_p2 = ((i_2_reg_421 == 7'd64) ? 1'b1 : 1'b0);

assign k_address0 = zext_ln53_fu_801_p1;

assign lshr_ln1_fu_699_p4 = {{f_reg_367[31:6]}};

assign lshr_ln2_fu_942_p4 = {{b_reg_410[31:2]}};

assign lshr_ln40_1_fu_541_p4 = {{reg_432[31:19]}};

assign lshr_ln40_2_fu_563_p4 = {{reg_432[31:10]}};

assign lshr_ln40_3_fu_589_p4 = {{m_q1[31:7]}};

assign lshr_ln40_4_fu_611_p4 = {{m_q1[31:18]}};

assign lshr_ln40_5_fu_633_p4 = {{m_q1[31:3]}};

assign lshr_ln53_1_fu_721_p4 = {{f_reg_367[31:11]}};

assign lshr_ln53_2_fu_743_p4 = {{f_reg_367[31:25]}};

assign lshr_ln54_1_fu_964_p4 = {{b_reg_410[31:13]}};

assign lshr_ln54_2_fu_986_p4 = {{b_reg_410[31:22]}};

assign lshr_ln_fu_519_p4 = {{reg_432[31:17]}};

assign m_d0 = {{{{data_0_q0}, {data_1_q0}}, {data_2_q0}}, {data_3_q0}};

assign m_d1 = (add_ln40_5_reg_1144 + add_ln40_4_fu_665_p2);

assign or_ln1_fu_713_p3 = {{trunc_ln53_fu_709_p1}, {lshr_ln1_fu_699_p4}};

assign or_ln2_fu_956_p3 = {{trunc_ln54_fu_952_p1}, {lshr_ln2_fu_942_p4}};

assign or_ln40_1_fu_555_p3 = {{trunc_ln40_1_fu_551_p1}, {lshr_ln40_1_fu_541_p4}};

assign or_ln40_2_fu_603_p3 = {{trunc_ln40_2_fu_599_p1}, {lshr_ln40_3_fu_589_p4}};

assign or_ln40_3_fu_625_p3 = {{trunc_ln40_3_fu_621_p1}, {lshr_ln40_4_fu_611_p4}};

assign or_ln53_1_fu_735_p3 = {{trunc_ln53_1_fu_731_p1}, {lshr_ln53_1_fu_721_p4}};

assign or_ln53_2_fu_757_p3 = {{trunc_ln53_2_fu_753_p1}, {lshr_ln53_2_fu_743_p4}};

assign or_ln54_1_fu_978_p3 = {{trunc_ln54_1_fu_974_p1}, {lshr_ln54_1_fu_964_p4}};

assign or_ln54_2_fu_1000_p3 = {{trunc_ln54_2_fu_996_p1}, {lshr_ln54_2_fu_986_p4}};

assign or_ln_fu_533_p3 = {{trunc_ln40_fu_529_p1}, {lshr_ln_fu_519_p4}};

assign t1_fu_937_p2 = (add_ln53_2_reg_1172 + add_ln53_fu_931_p2);

assign trunc_ln40_1_fu_551_p1 = reg_432[18:0];

assign trunc_ln40_2_fu_599_p1 = m_q1[6:0];

assign trunc_ln40_3_fu_621_p1 = m_q1[17:0];

assign trunc_ln40_fu_529_p1 = reg_432[16:0];

assign trunc_ln53_1_fu_731_p1 = f_reg_367[10:0];

assign trunc_ln53_2_fu_753_p1 = f_reg_367[24:0];

assign trunc_ln53_fu_709_p1 = f_reg_367[5:0];

assign trunc_ln54_1_fu_974_p1 = b_reg_410[12:0];

assign trunc_ln54_2_fu_996_p1 = b_reg_410[21:0];

assign trunc_ln54_fu_952_p1 = b_reg_410[1:0];

assign xor_ln40_1_fu_583_p2 = (xor_ln40_fu_577_p2 ^ or_ln_fu_533_p3);

assign xor_ln40_2_fu_647_p2 = (zext_ln40_6_fu_643_p1 ^ or_ln40_3_fu_625_p3);

assign xor_ln40_3_fu_653_p2 = (xor_ln40_2_fu_647_p2 ^ or_ln40_2_fu_603_p3);

assign xor_ln40_fu_577_p2 = (zext_ln40_5_fu_573_p1 ^ or_ln40_1_fu_555_p3);

assign xor_ln53_1_fu_771_p2 = (xor_ln53_fu_765_p2 ^ or_ln53_2_fu_757_p3);

assign xor_ln53_2_fu_783_p2 = (f_reg_367 ^ 32'd4294967295);

assign xor_ln53_3_fu_795_p2 = (and_ln53_fu_777_p2 ^ and_ln53_1_fu_789_p2);

assign xor_ln53_fu_765_p2 = (or_ln53_1_fu_735_p3 ^ or_ln1_fu_713_p3);

assign xor_ln54_1_fu_1014_p2 = (xor_ln54_fu_1008_p2 ^ or_ln54_2_fu_1000_p3);

assign xor_ln54_2_fu_819_p2 = (d_reg_388 ^ c_reg_399);

assign xor_ln54_3_fu_837_p2 = (and_ln54_fu_825_p2 ^ and_ln54_1_fu_831_p2);

assign xor_ln54_fu_1008_p2 = (or_ln54_1_fu_978_p3 ^ or_ln2_fu_956_p3);

assign zext_ln36_fu_448_p1 = i_0_reg_313;

assign zext_ln40_1_fu_492_p1 = add_ln40_1_fu_486_p2;

assign zext_ln40_2_fu_503_p1 = add_ln40_2_fu_497_p2;

assign zext_ln40_3_fu_514_p1 = add_ln40_3_fu_508_p2;

assign zext_ln40_4_fu_676_p1 = i_1_reg_324;

assign zext_ln40_5_fu_573_p1 = lshr_ln40_2_fu_563_p4;

assign zext_ln40_6_fu_643_p1 = lshr_ln40_5_fu_633_p4;

assign zext_ln40_fu_481_p1 = add_ln40_fu_475_p2;

assign zext_ln53_fu_801_p1 = i_2_reg_421;

always @ (posedge ap_clk) begin
    zext_ln36_reg_1091[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //sha256_transform
