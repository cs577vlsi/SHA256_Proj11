-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha256_update is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ctx_data_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ctx_data_ce0 : OUT STD_LOGIC;
    ctx_data_we0 : OUT STD_LOGIC;
    ctx_data_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ctx_data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ctx_data_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ctx_data_ce1 : OUT STD_LOGIC;
    ctx_data_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    ctx_datalen_read : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read9 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read10 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    data_ce0 : OUT STD_LOGIC;
    data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    len : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sha256_update is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_FFFFFDFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111110111111111";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal empty_fu_273_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_reg_627 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_fu_337_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_635 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln94_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln98_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln98_reg_645 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ctx_state_7_0_load_1_reg_649 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ctx_state_6_0_load_1_reg_654 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_5_0_load_1_reg_659 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_4_0_load_1_reg_664 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_3_0_load_1_reg_669 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_2_0_load_1_reg_674 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_1_0_load_1_reg_679 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_0_0_load_1_reg_684 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_216_ap_start : STD_LOGIC;
    signal grp_sha256_transform_fu_216_ap_done : STD_LOGIC;
    signal grp_sha256_transform_fu_216_ap_idle : STD_LOGIC;
    signal grp_sha256_transform_fu_216_ap_ready : STD_LOGIC;
    signal grp_sha256_transform_fu_216_data_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_transform_fu_216_data_ce0 : STD_LOGIC;
    signal grp_sha256_transform_fu_216_data_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_transform_fu_216_data_ce1 : STD_LOGIC;
    signal grp_sha256_transform_fu_216_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_216_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_216_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_216_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_216_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_216_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_216_ap_return_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_216_ap_return_7 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_205 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_state5_on_subcall_done : BOOLEAN;
    signal grp_sha256_transform_fu_216_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln96_fu_343_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln96_1_fu_414_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ctx_datalen_0_fu_62 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln97_fu_419_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_7_0_fu_66 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_6_0_fu_70 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_5_0_fu_74 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_4_0_fu_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_3_0_fu_82 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_2_0_fu_86 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_1_0_fu_90 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_0_0_fu_94 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_bitlen_1_0_fu_98 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln100_fu_485_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_bitlen_0_0_fu_102 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln100_1_fu_493_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln100_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln100_fu_479_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component sha256_transform IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ctx_state_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_6_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_7_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        data_ce0 : OUT STD_LOGIC;
        data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        data_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        data_ce1 : OUT STD_LOGIC;
        data_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_sha256_transform_fu_216 : component sha256_transform
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sha256_transform_fu_216_ap_start,
        ap_done => grp_sha256_transform_fu_216_ap_done,
        ap_idle => grp_sha256_transform_fu_216_ap_idle,
        ap_ready => grp_sha256_transform_fu_216_ap_ready,
        ctx_state_0_read => ctx_state_0_0_load_1_reg_684,
        ctx_state_1_read => ctx_state_1_0_load_1_reg_679,
        ctx_state_2_read => ctx_state_2_0_load_1_reg_674,
        ctx_state_3_read => ctx_state_3_0_load_1_reg_669,
        ctx_state_4_read => ctx_state_4_0_load_1_reg_664,
        ctx_state_5_read => ctx_state_5_0_load_1_reg_659,
        ctx_state_6_read => ctx_state_6_0_load_1_reg_654,
        ctx_state_7_read => ctx_state_7_0_load_1_reg_649,
        data_address0 => grp_sha256_transform_fu_216_data_address0,
        data_ce0 => grp_sha256_transform_fu_216_data_ce0,
        data_q0 => ctx_data_q0,
        data_address1 => grp_sha256_transform_fu_216_data_address1,
        data_ce1 => grp_sha256_transform_fu_216_data_ce1,
        data_q1 => ctx_data_q1,
        ap_return_0 => grp_sha256_transform_fu_216_ap_return_0,
        ap_return_1 => grp_sha256_transform_fu_216_ap_return_1,
        ap_return_2 => grp_sha256_transform_fu_216_ap_return_2,
        ap_return_3 => grp_sha256_transform_fu_216_ap_return_3,
        ap_return_4 => grp_sha256_transform_fu_216_ap_return_4,
        ap_return_5 => grp_sha256_transform_fu_216_ap_return_5,
        ap_return_6 => grp_sha256_transform_fu_216_ap_return_6,
        ap_return_7 => grp_sha256_transform_fu_216_ap_return_7);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_sha256_transform_fu_216_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sha256_transform_fu_216_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_sha256_transform_fu_216_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sha256_transform_fu_216_ap_ready = ap_const_logic_1)) then 
                    grp_sha256_transform_fu_216_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ctx_bitlen_0_0_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln98_reg_645 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done))) then 
                ctx_bitlen_0_0_fu_102 <= add_ln100_1_fu_493_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                ctx_bitlen_0_0_fu_102 <= p_read1;
            end if; 
        end if;
    end process;

    ctx_bitlen_1_0_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln98_reg_645 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done))) then 
                ctx_bitlen_1_0_fu_98 <= select_ln100_fu_485_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                ctx_bitlen_1_0_fu_98 <= p_read2;
            end if; 
        end if;
    end process;

    ctx_datalen_0_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                ctx_datalen_0_fu_62 <= ap_const_lv32_0;
            elsif (((icmp_ln98_fu_425_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                ctx_datalen_0_fu_62 <= add_ln97_fu_419_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                ctx_datalen_0_fu_62 <= ctx_datalen_read;
            end if; 
        end if;
    end process;

    ctx_state_0_0_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln98_reg_645 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done))) then 
                ctx_state_0_0_fu_94 <= grp_sha256_transform_fu_216_ap_return_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                ctx_state_0_0_fu_94 <= p_read3;
            end if; 
        end if;
    end process;

    ctx_state_1_0_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln98_reg_645 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done))) then 
                ctx_state_1_0_fu_90 <= grp_sha256_transform_fu_216_ap_return_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                ctx_state_1_0_fu_90 <= p_read4;
            end if; 
        end if;
    end process;

    ctx_state_2_0_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln98_reg_645 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done))) then 
                ctx_state_2_0_fu_86 <= grp_sha256_transform_fu_216_ap_return_2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                ctx_state_2_0_fu_86 <= p_read5;
            end if; 
        end if;
    end process;

    ctx_state_3_0_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln98_reg_645 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done))) then 
                ctx_state_3_0_fu_82 <= grp_sha256_transform_fu_216_ap_return_3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                ctx_state_3_0_fu_82 <= p_read6;
            end if; 
        end if;
    end process;

    ctx_state_4_0_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln98_reg_645 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done))) then 
                ctx_state_4_0_fu_78 <= grp_sha256_transform_fu_216_ap_return_4;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                ctx_state_4_0_fu_78 <= p_read7;
            end if; 
        end if;
    end process;

    ctx_state_5_0_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln98_reg_645 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done))) then 
                ctx_state_5_0_fu_74 <= grp_sha256_transform_fu_216_ap_return_5;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                ctx_state_5_0_fu_74 <= p_read8;
            end if; 
        end if;
    end process;

    ctx_state_6_0_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln98_reg_645 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done))) then 
                ctx_state_6_0_fu_70 <= grp_sha256_transform_fu_216_ap_return_6;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                ctx_state_6_0_fu_70 <= p_read9;
            end if; 
        end if;
    end process;

    ctx_state_7_0_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln98_reg_645 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done))) then 
                ctx_state_7_0_fu_66 <= grp_sha256_transform_fu_216_ap_return_7;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                ctx_state_7_0_fu_66 <= p_read10;
            end if; 
        end if;
    end process;

    i_0_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done))) then 
                i_0_reg_205 <= i_reg_635;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_205 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                ctx_state_0_0_load_1_reg_684 <= ctx_state_0_0_fu_94;
                ctx_state_1_0_load_1_reg_679 <= ctx_state_1_0_fu_90;
                ctx_state_2_0_load_1_reg_674 <= ctx_state_2_0_fu_86;
                ctx_state_3_0_load_1_reg_669 <= ctx_state_3_0_fu_82;
                ctx_state_4_0_load_1_reg_664 <= ctx_state_4_0_fu_78;
                ctx_state_5_0_load_1_reg_659 <= ctx_state_5_0_fu_74;
                ctx_state_6_0_load_1_reg_654 <= ctx_state_6_0_fu_70;
                ctx_state_7_0_load_1_reg_649 <= ctx_state_7_0_fu_66;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                empty_reg_627 <= empty_fu_273_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_635 <= i_fu_337_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                icmp_ln98_reg_645 <= icmp_ln98_fu_425_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln94_fu_332_p2, icmp_ln98_fu_425_p2, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_block_state5_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln94_fu_332_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln98_fu_425_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln100_1_fu_493_p2 <= std_logic_vector(unsigned(ctx_bitlen_0_0_fu_102) + unsigned(ap_const_lv32_200));
    add_ln100_fu_479_p2 <= std_logic_vector(unsigned(ctx_bitlen_1_0_fu_98) + unsigned(ap_const_lv32_1));
    add_ln97_fu_419_p2 <= std_logic_vector(unsigned(ctx_datalen_0_fu_62) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_block_state5_on_subcall_done_assign_proc : process(icmp_ln98_reg_645, grp_sha256_transform_fu_216_ap_done)
    begin
                ap_block_state5_on_subcall_done <= ((icmp_ln98_reg_645 = ap_const_lv1_1) and (grp_sha256_transform_fu_216_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln94_fu_332_p2)
    begin
        if ((((icmp_ln94_fu_332_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln94_fu_332_p2)
    begin
        if (((icmp_ln94_fu_332_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= ctx_datalen_0_fu_62;
    ap_return_1 <= ctx_bitlen_0_0_fu_102;
    ap_return_10 <= ctx_state_7_0_fu_66;
    ap_return_2 <= ctx_bitlen_1_0_fu_98;
    ap_return_3 <= ctx_state_0_0_fu_94;
    ap_return_4 <= ctx_state_1_0_fu_90;
    ap_return_5 <= ctx_state_2_0_fu_86;
    ap_return_6 <= ctx_state_3_0_fu_82;
    ap_return_7 <= ctx_state_4_0_fu_78;
    ap_return_8 <= ctx_state_5_0_fu_74;
    ap_return_9 <= ctx_state_6_0_fu_70;

    ctx_data_address0_assign_proc : process(icmp_ln98_reg_645, ap_CS_fsm_state3, grp_sha256_transform_fu_216_data_address0, ap_CS_fsm_state5, zext_ln96_1_fu_414_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ctx_data_address0 <= zext_ln96_1_fu_414_p1(6 - 1 downto 0);
        elsif (((icmp_ln98_reg_645 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ctx_data_address0 <= grp_sha256_transform_fu_216_data_address0;
        else 
            ctx_data_address0 <= "XXXXXX";
        end if; 
    end process;

    ctx_data_address1 <= grp_sha256_transform_fu_216_data_address1;

    ctx_data_ce0_assign_proc : process(icmp_ln98_reg_645, ap_CS_fsm_state3, grp_sha256_transform_fu_216_data_ce0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ctx_data_ce0 <= ap_const_logic_1;
        elsif (((icmp_ln98_reg_645 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ctx_data_ce0 <= grp_sha256_transform_fu_216_data_ce0;
        else 
            ctx_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_data_ce1_assign_proc : process(icmp_ln98_reg_645, grp_sha256_transform_fu_216_data_ce1, ap_CS_fsm_state5)
    begin
        if (((icmp_ln98_reg_645 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ctx_data_ce1 <= grp_sha256_transform_fu_216_data_ce1;
        else 
            ctx_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    ctx_data_d0 <= data_q0;

    ctx_data_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ctx_data_we0 <= ap_const_logic_1;
        else 
            ctx_data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    data_address0 <= zext_ln96_fu_343_p1(6 - 1 downto 0);

    data_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_ce0 <= ap_const_logic_1;
        else 
            data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_273_p1 <= len(7 - 1 downto 0);
    grp_sha256_transform_fu_216_ap_start <= grp_sha256_transform_fu_216_ap_start_reg;
    i_fu_337_p2 <= std_logic_vector(unsigned(i_0_reg_205) + unsigned(ap_const_lv7_1));
    icmp_ln100_fu_473_p2 <= "1" when (unsigned(ctx_bitlen_0_0_fu_102) > unsigned(ap_const_lv32_FFFFFDFF)) else "0";
    icmp_ln94_fu_332_p2 <= "1" when (i_0_reg_205 = empty_reg_627) else "0";
    icmp_ln98_fu_425_p2 <= "1" when (add_ln97_fu_419_p2 = ap_const_lv32_40) else "0";
    select_ln100_fu_485_p3 <= 
        add_ln100_fu_479_p2 when (icmp_ln100_fu_473_p2(0) = '1') else 
        ctx_bitlen_1_0_fu_98;
    zext_ln96_1_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ctx_datalen_0_fu_62),64));
    zext_ln96_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_205),64));
end behav;
