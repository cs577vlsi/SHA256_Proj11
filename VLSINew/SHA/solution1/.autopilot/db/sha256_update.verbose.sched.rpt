

================================================================
== Vivado HLS Report for 'sha256_update'
================================================================
* Date:           Wed Apr  7 17:44:53 2021

* Version:        2019.1 (Build 2552052 on Fri May 24 15:28:33 MDT 2019)
* Project:        SHA
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020-clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|     7.625|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |    1|  440|    1|  440|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +----------+-----+-----+----------+-----------+-----------+-------+----------+
        |          |  Latency  | Iteration|  Initiation Interval  |  Trip |          |
        | Loop Name| min | max |  Latency |  achieved |   target  | Count | Pipelined|
        +----------+-----+-----+----------+-----------+-----------+-------+----------+
        |- Loop 1  |    0|  439|  3 ~ 439 |          -|          -| 0 ~ 1 |    no    |
        +----------+-----+-----+----------+-----------+-----------+-------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 5
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 
3 --> 4 5 
4 --> 5 
5 --> 2 

* FSM state operations: 

State 1 <SV = 0> <Delay = 1.81>
ST_1 : Operation 6 [1/1] (0.00ns)   --->   "%ctx_datalen_0 = alloca i32"   --->   Operation 6 'alloca' 'ctx_datalen_0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "%ctx_state_7_0 = alloca i32"   --->   Operation 7 'alloca' 'ctx_state_7_0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "%ctx_state_6_0 = alloca i32"   --->   Operation 8 'alloca' 'ctx_state_6_0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%ctx_state_5_0 = alloca i32"   --->   Operation 9 'alloca' 'ctx_state_5_0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%ctx_state_4_0 = alloca i32"   --->   Operation 10 'alloca' 'ctx_state_4_0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%ctx_state_3_0 = alloca i32"   --->   Operation 11 'alloca' 'ctx_state_3_0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%ctx_state_2_0 = alloca i32"   --->   Operation 12 'alloca' 'ctx_state_2_0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%ctx_state_1_0 = alloca i32"   --->   Operation 13 'alloca' 'ctx_state_1_0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "%ctx_state_0_0 = alloca i32"   --->   Operation 14 'alloca' 'ctx_state_0_0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "%ctx_bitlen_1_0 = alloca i32"   --->   Operation 15 'alloca' 'ctx_bitlen_1_0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "%ctx_bitlen_0_0 = alloca i32"   --->   Operation 16 'alloca' 'ctx_bitlen_0_0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "%len_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %len)" [SHA_new/SHA_new/sha256_impl.c:90]   --->   Operation 17 'read' 'len_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%p_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %p_read10)" [SHA_new/SHA_new/sha256_impl.c:90]   --->   Operation 18 'read' 'p_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "%p_read_1 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %p_read9)" [SHA_new/SHA_new/sha256_impl.c:90]   --->   Operation 19 'read' 'p_read_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "%p_read_2 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %p_read8)" [SHA_new/SHA_new/sha256_impl.c:90]   --->   Operation 20 'read' 'p_read_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "%p_read_3 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %p_read7)" [SHA_new/SHA_new/sha256_impl.c:90]   --->   Operation 21 'read' 'p_read_3' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "%p_read_4 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %p_read6)" [SHA_new/SHA_new/sha256_impl.c:90]   --->   Operation 22 'read' 'p_read_4' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 23 [1/1] (0.00ns)   --->   "%p_read_5 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %p_read5)" [SHA_new/SHA_new/sha256_impl.c:90]   --->   Operation 23 'read' 'p_read_5' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "%p_read45 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %p_read4)" [SHA_new/SHA_new/sha256_impl.c:90]   --->   Operation 24 'read' 'p_read45' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 25 [1/1] (0.00ns)   --->   "%p_read34 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %p_read3)" [SHA_new/SHA_new/sha256_impl.c:90]   --->   Operation 25 'read' 'p_read34' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 26 [1/1] (0.00ns)   --->   "%p_read23 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %p_read2)" [SHA_new/SHA_new/sha256_impl.c:90]   --->   Operation 26 'read' 'p_read23' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 27 [1/1] (0.00ns)   --->   "%p_read12 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %p_read1)" [SHA_new/SHA_new/sha256_impl.c:90]   --->   Operation 27 'read' 'p_read12' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 28 [1/1] (0.00ns)   --->   "%ctx_datalen_read_1 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %ctx_datalen_read)" [SHA_new/SHA_new/sha256_impl.c:90]   --->   Operation 28 'read' 'ctx_datalen_read_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 29 [1/1] (0.00ns)   --->   "%empty = trunc i32 %len_read to i7" [SHA_new/SHA_new/sha256_impl.c:90]   --->   Operation 29 'trunc' 'empty' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 30 [1/1] (1.76ns)   --->   "store i32 %p_read12, i32* %ctx_bitlen_0_0" [SHA_new/SHA_new/sha256_impl.c:94]   --->   Operation 30 'store' <Predicate = true> <Delay = 1.76>
ST_1 : Operation 31 [1/1] (1.76ns)   --->   "store i32 %p_read23, i32* %ctx_bitlen_1_0" [SHA_new/SHA_new/sha256_impl.c:94]   --->   Operation 31 'store' <Predicate = true> <Delay = 1.76>
ST_1 : Operation 32 [1/1] (1.76ns)   --->   "store i32 %p_read34, i32* %ctx_state_0_0" [SHA_new/SHA_new/sha256_impl.c:94]   --->   Operation 32 'store' <Predicate = true> <Delay = 1.76>
ST_1 : Operation 33 [1/1] (1.76ns)   --->   "store i32 %p_read45, i32* %ctx_state_1_0" [SHA_new/SHA_new/sha256_impl.c:94]   --->   Operation 33 'store' <Predicate = true> <Delay = 1.76>
ST_1 : Operation 34 [1/1] (1.76ns)   --->   "store i32 %p_read_5, i32* %ctx_state_2_0" [SHA_new/SHA_new/sha256_impl.c:94]   --->   Operation 34 'store' <Predicate = true> <Delay = 1.76>
ST_1 : Operation 35 [1/1] (1.76ns)   --->   "store i32 %p_read_4, i32* %ctx_state_3_0" [SHA_new/SHA_new/sha256_impl.c:94]   --->   Operation 35 'store' <Predicate = true> <Delay = 1.76>
ST_1 : Operation 36 [1/1] (1.76ns)   --->   "store i32 %p_read_3, i32* %ctx_state_4_0" [SHA_new/SHA_new/sha256_impl.c:94]   --->   Operation 36 'store' <Predicate = true> <Delay = 1.76>
ST_1 : Operation 37 [1/1] (1.76ns)   --->   "store i32 %p_read_2, i32* %ctx_state_5_0" [SHA_new/SHA_new/sha256_impl.c:94]   --->   Operation 37 'store' <Predicate = true> <Delay = 1.76>
ST_1 : Operation 38 [1/1] (1.76ns)   --->   "store i32 %p_read_1, i32* %ctx_state_6_0" [SHA_new/SHA_new/sha256_impl.c:94]   --->   Operation 38 'store' <Predicate = true> <Delay = 1.76>
ST_1 : Operation 39 [1/1] (1.76ns)   --->   "store i32 %p_read, i32* %ctx_state_7_0" [SHA_new/SHA_new/sha256_impl.c:94]   --->   Operation 39 'store' <Predicate = true> <Delay = 1.76>
ST_1 : Operation 40 [1/1] (1.81ns)   --->   "store i32 %ctx_datalen_read_1, i32* %ctx_datalen_0" [SHA_new/SHA_new/sha256_impl.c:94]   --->   Operation 40 'store' <Predicate = true> <Delay = 1.81>
ST_1 : Operation 41 [1/1] (1.76ns)   --->   "br label %1" [SHA_new/SHA_new/sha256_impl.c:94]   --->   Operation 41 'br' <Predicate = true> <Delay = 1.76>

State 2 <SV = 1> <Delay = 2.32>
ST_2 : Operation 42 [1/1] (0.00ns)   --->   "%i_0 = phi i7 [ 0, %0 ], [ %i, %hls_label_0_end ]"   --->   Operation 42 'phi' 'i_0' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 43 [1/1] (1.48ns)   --->   "%icmp_ln94 = icmp eq i7 %i_0, %empty" [SHA_new/SHA_new/sha256_impl.c:94]   --->   Operation 43 'icmp' 'icmp_ln94' <Predicate = true> <Delay = 1.48> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 44 [1/1] (1.87ns)   --->   "%i = add i7 %i_0, 1" [SHA_new/SHA_new/sha256_impl.c:94]   --->   Operation 44 'add' 'i' <Predicate = true> <Delay = 1.87> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 45 [1/1] (0.00ns)   --->   "br i1 %icmp_ln94, label %2, label %hls_label_0_begin" [SHA_new/SHA_new/sha256_impl.c:94]   --->   Operation 45 'br' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 46 [1/1] (0.00ns)   --->   "%zext_ln96 = zext i7 %i_0 to i64" [SHA_new/SHA_new/sha256_impl.c:96]   --->   Operation 46 'zext' 'zext_ln96' <Predicate = (!icmp_ln94)> <Delay = 0.00>
ST_2 : Operation 47 [1/1] (0.00ns)   --->   "%data_addr = getelementptr [64 x i8]* %data, i64 0, i64 %zext_ln96" [SHA_new/SHA_new/sha256_impl.c:96]   --->   Operation 47 'getelementptr' 'data_addr' <Predicate = (!icmp_ln94)> <Delay = 0.00>
ST_2 : Operation 48 [2/2] (2.32ns)   --->   "%data_load = load i8* %data_addr, align 1" [SHA_new/SHA_new/sha256_impl.c:96]   --->   Operation 48 'load' 'data_load' <Predicate = (!icmp_ln94)> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 64> <RAM>
ST_2 : Operation 49 [1/1] (0.00ns)   --->   "%ctx_datalen_0_load_1 = load i32* %ctx_datalen_0" [SHA_new/SHA_new/sha256_impl.c:104]   --->   Operation 49 'load' 'ctx_datalen_0_load_1' <Predicate = (icmp_ln94)> <Delay = 0.00>
ST_2 : Operation 50 [1/1] (0.00ns)   --->   "%ctx_state_7_0_load = load i32* %ctx_state_7_0" [SHA_new/SHA_new/sha256_impl.c:104]   --->   Operation 50 'load' 'ctx_state_7_0_load' <Predicate = (icmp_ln94)> <Delay = 0.00>
ST_2 : Operation 51 [1/1] (0.00ns)   --->   "%ctx_state_6_0_load = load i32* %ctx_state_6_0" [SHA_new/SHA_new/sha256_impl.c:104]   --->   Operation 51 'load' 'ctx_state_6_0_load' <Predicate = (icmp_ln94)> <Delay = 0.00>
ST_2 : Operation 52 [1/1] (0.00ns)   --->   "%ctx_state_5_0_load = load i32* %ctx_state_5_0" [SHA_new/SHA_new/sha256_impl.c:104]   --->   Operation 52 'load' 'ctx_state_5_0_load' <Predicate = (icmp_ln94)> <Delay = 0.00>
ST_2 : Operation 53 [1/1] (0.00ns)   --->   "%ctx_state_4_0_load = load i32* %ctx_state_4_0" [SHA_new/SHA_new/sha256_impl.c:104]   --->   Operation 53 'load' 'ctx_state_4_0_load' <Predicate = (icmp_ln94)> <Delay = 0.00>
ST_2 : Operation 54 [1/1] (0.00ns)   --->   "%ctx_state_3_0_load = load i32* %ctx_state_3_0" [SHA_new/SHA_new/sha256_impl.c:104]   --->   Operation 54 'load' 'ctx_state_3_0_load' <Predicate = (icmp_ln94)> <Delay = 0.00>
ST_2 : Operation 55 [1/1] (0.00ns)   --->   "%ctx_state_2_0_load = load i32* %ctx_state_2_0" [SHA_new/SHA_new/sha256_impl.c:104]   --->   Operation 55 'load' 'ctx_state_2_0_load' <Predicate = (icmp_ln94)> <Delay = 0.00>
ST_2 : Operation 56 [1/1] (0.00ns)   --->   "%ctx_state_1_0_load = load i32* %ctx_state_1_0" [SHA_new/SHA_new/sha256_impl.c:104]   --->   Operation 56 'load' 'ctx_state_1_0_load' <Predicate = (icmp_ln94)> <Delay = 0.00>
ST_2 : Operation 57 [1/1] (0.00ns)   --->   "%ctx_state_0_0_load = load i32* %ctx_state_0_0" [SHA_new/SHA_new/sha256_impl.c:104]   --->   Operation 57 'load' 'ctx_state_0_0_load' <Predicate = (icmp_ln94)> <Delay = 0.00>
ST_2 : Operation 58 [1/1] (0.00ns)   --->   "%ctx_bitlen_1_0_load_1 = load i32* %ctx_bitlen_1_0" [SHA_new/SHA_new/sha256_impl.c:104]   --->   Operation 58 'load' 'ctx_bitlen_1_0_load_1' <Predicate = (icmp_ln94)> <Delay = 0.00>
ST_2 : Operation 59 [1/1] (0.00ns)   --->   "%ctx_bitlen_0_0_load_1 = load i32* %ctx_bitlen_0_0" [SHA_new/SHA_new/sha256_impl.c:104]   --->   Operation 59 'load' 'ctx_bitlen_0_0_load_1' <Predicate = (icmp_ln94)> <Delay = 0.00>
ST_2 : Operation 60 [1/1] (0.00ns)   --->   "%mrv_s = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } undef, i32 %ctx_datalen_0_load_1, 0" [SHA_new/SHA_new/sha256_impl.c:104]   --->   Operation 60 'insertvalue' 'mrv_s' <Predicate = (icmp_ln94)> <Delay = 0.00>
ST_2 : Operation 61 [1/1] (0.00ns)   --->   "%mrv_1 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_s, i32 %ctx_bitlen_0_0_load_1, 1" [SHA_new/SHA_new/sha256_impl.c:104]   --->   Operation 61 'insertvalue' 'mrv_1' <Predicate = (icmp_ln94)> <Delay = 0.00>
ST_2 : Operation 62 [1/1] (0.00ns)   --->   "%mrv_2 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_1, i32 %ctx_bitlen_1_0_load_1, 2" [SHA_new/SHA_new/sha256_impl.c:104]   --->   Operation 62 'insertvalue' 'mrv_2' <Predicate = (icmp_ln94)> <Delay = 0.00>
ST_2 : Operation 63 [1/1] (0.00ns)   --->   "%mrv_3 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_2, i32 %ctx_state_0_0_load, 3" [SHA_new/SHA_new/sha256_impl.c:104]   --->   Operation 63 'insertvalue' 'mrv_3' <Predicate = (icmp_ln94)> <Delay = 0.00>
ST_2 : Operation 64 [1/1] (0.00ns)   --->   "%mrv_4 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_3, i32 %ctx_state_1_0_load, 4" [SHA_new/SHA_new/sha256_impl.c:104]   --->   Operation 64 'insertvalue' 'mrv_4' <Predicate = (icmp_ln94)> <Delay = 0.00>
ST_2 : Operation 65 [1/1] (0.00ns)   --->   "%mrv_5 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_4, i32 %ctx_state_2_0_load, 5" [SHA_new/SHA_new/sha256_impl.c:104]   --->   Operation 65 'insertvalue' 'mrv_5' <Predicate = (icmp_ln94)> <Delay = 0.00>
ST_2 : Operation 66 [1/1] (0.00ns)   --->   "%mrv_6 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_5, i32 %ctx_state_3_0_load, 6" [SHA_new/SHA_new/sha256_impl.c:104]   --->   Operation 66 'insertvalue' 'mrv_6' <Predicate = (icmp_ln94)> <Delay = 0.00>
ST_2 : Operation 67 [1/1] (0.00ns)   --->   "%mrv_7 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_6, i32 %ctx_state_4_0_load, 7" [SHA_new/SHA_new/sha256_impl.c:104]   --->   Operation 67 'insertvalue' 'mrv_7' <Predicate = (icmp_ln94)> <Delay = 0.00>
ST_2 : Operation 68 [1/1] (0.00ns)   --->   "%mrv_8 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_7, i32 %ctx_state_5_0_load, 8" [SHA_new/SHA_new/sha256_impl.c:104]   --->   Operation 68 'insertvalue' 'mrv_8' <Predicate = (icmp_ln94)> <Delay = 0.00>
ST_2 : Operation 69 [1/1] (0.00ns)   --->   "%mrv_9 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_8, i32 %ctx_state_6_0_load, 9" [SHA_new/SHA_new/sha256_impl.c:104]   --->   Operation 69 'insertvalue' 'mrv_9' <Predicate = (icmp_ln94)> <Delay = 0.00>
ST_2 : Operation 70 [1/1] (0.00ns)   --->   "%mrv_10 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_9, i32 %ctx_state_7_0_load, 10" [SHA_new/SHA_new/sha256_impl.c:104]   --->   Operation 70 'insertvalue' 'mrv_10' <Predicate = (icmp_ln94)> <Delay = 0.00>
ST_2 : Operation 71 [1/1] (0.00ns)   --->   "ret { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_10" [SHA_new/SHA_new/sha256_impl.c:104]   --->   Operation 71 'ret' <Predicate = (icmp_ln94)> <Delay = 0.00>

State 3 <SV = 2> <Delay = 5.02>
ST_3 : Operation 72 [1/1] (0.00ns)   --->   "%ctx_datalen_0_load = load i32* %ctx_datalen_0" [SHA_new/SHA_new/sha256_impl.c:97]   --->   Operation 72 'load' 'ctx_datalen_0_load' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 73 [1/1] (0.00ns)   --->   "%tmp = call i32 (...)* @_ssdm_op_SpecRegionBegin([12 x i8]* @p_str)" [SHA_new/SHA_new/sha256_impl.c:94]   --->   Operation 73 'specregionbegin' 'tmp' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 74 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopTripCount(i32 0, i32 1, i32 0, [1 x i8]* @p_str1) nounwind" [SHA_new/SHA_new/sha256_impl.c:95]   --->   Operation 74 'speclooptripcount' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 75 [1/2] (2.32ns)   --->   "%data_load = load i8* %data_addr, align 1" [SHA_new/SHA_new/sha256_impl.c:96]   --->   Operation 75 'load' 'data_load' <Predicate = true> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 64> <RAM>
ST_3 : Operation 76 [1/1] (0.00ns)   --->   "%zext_ln96_1 = zext i32 %ctx_datalen_0_load to i64" [SHA_new/SHA_new/sha256_impl.c:96]   --->   Operation 76 'zext' 'zext_ln96_1' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 77 [1/1] (0.00ns)   --->   "%ctx_data_addr = getelementptr [64 x i8]* %ctx_data, i64 0, i64 %zext_ln96_1" [SHA_new/SHA_new/sha256_impl.c:96]   --->   Operation 77 'getelementptr' 'ctx_data_addr' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 78 [1/1] (2.32ns)   --->   "store i8 %data_load, i8* %ctx_data_addr, align 1" [SHA_new/SHA_new/sha256_impl.c:96]   --->   Operation 78 'store' <Predicate = true> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 64> <RAM>
ST_3 : Operation 79 [1/1] (2.55ns)   --->   "%add_ln97 = add i32 %ctx_datalen_0_load, 1" [SHA_new/SHA_new/sha256_impl.c:97]   --->   Operation 79 'add' 'add_ln97' <Predicate = true> <Delay = 2.55> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 80 [1/1] (2.47ns)   --->   "%icmp_ln98 = icmp eq i32 %add_ln97, 64" [SHA_new/SHA_new/sha256_impl.c:98]   --->   Operation 80 'icmp' 'icmp_ln98' <Predicate = true> <Delay = 2.47> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 81 [1/1] (0.00ns)   --->   "br i1 %icmp_ln98, label %._crit_edge1, label %hls_label_0_begin.hls_label_0_end_crit_edge" [SHA_new/SHA_new/sha256_impl.c:98]   --->   Operation 81 'br' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 82 [1/1] (1.81ns)   --->   "store i32 %add_ln97, i32* %ctx_datalen_0" [SHA_new/SHA_new/sha256_impl.c:98]   --->   Operation 82 'store' <Predicate = (!icmp_ln98)> <Delay = 1.81>
ST_3 : Operation 83 [1/1] (0.00ns)   --->   "br label %hls_label_0_end" [SHA_new/SHA_new/sha256_impl.c:98]   --->   Operation 83 'br' <Predicate = (!icmp_ln98)> <Delay = 0.00>

State 4 <SV = 3> <Delay = 1.81>
ST_4 : Operation 84 [1/1] (0.00ns)   --->   "%ctx_state_7_0_load_1 = load i32* %ctx_state_7_0" [SHA_new/SHA_new/sha256_impl.c:99]   --->   Operation 84 'load' 'ctx_state_7_0_load_1' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 85 [1/1] (0.00ns)   --->   "%ctx_state_6_0_load_1 = load i32* %ctx_state_6_0" [SHA_new/SHA_new/sha256_impl.c:99]   --->   Operation 85 'load' 'ctx_state_6_0_load_1' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 86 [1/1] (0.00ns)   --->   "%ctx_state_5_0_load_1 = load i32* %ctx_state_5_0" [SHA_new/SHA_new/sha256_impl.c:99]   --->   Operation 86 'load' 'ctx_state_5_0_load_1' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 87 [1/1] (0.00ns)   --->   "%ctx_state_4_0_load_1 = load i32* %ctx_state_4_0" [SHA_new/SHA_new/sha256_impl.c:99]   --->   Operation 87 'load' 'ctx_state_4_0_load_1' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 88 [1/1] (0.00ns)   --->   "%ctx_state_3_0_load_1 = load i32* %ctx_state_3_0" [SHA_new/SHA_new/sha256_impl.c:99]   --->   Operation 88 'load' 'ctx_state_3_0_load_1' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 89 [1/1] (0.00ns)   --->   "%ctx_state_2_0_load_1 = load i32* %ctx_state_2_0" [SHA_new/SHA_new/sha256_impl.c:99]   --->   Operation 89 'load' 'ctx_state_2_0_load_1' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 90 [1/1] (0.00ns)   --->   "%ctx_state_1_0_load_1 = load i32* %ctx_state_1_0" [SHA_new/SHA_new/sha256_impl.c:99]   --->   Operation 90 'load' 'ctx_state_1_0_load_1' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 91 [1/1] (0.00ns)   --->   "%ctx_state_0_0_load_1 = load i32* %ctx_state_0_0" [SHA_new/SHA_new/sha256_impl.c:99]   --->   Operation 91 'load' 'ctx_state_0_0_load_1' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 92 [2/2] (0.00ns)   --->   "%call_ret = call fastcc { i32, i32, i32, i32, i32, i32, i32, i32 } @sha256_transform(i32 %ctx_state_0_0_load_1, i32 %ctx_state_1_0_load_1, i32 %ctx_state_2_0_load_1, i32 %ctx_state_3_0_load_1, i32 %ctx_state_4_0_load_1, i32 %ctx_state_5_0_load_1, i32 %ctx_state_6_0_load_1, i32 %ctx_state_7_0_load_1, [64 x i8]* %ctx_data)" [SHA_new/SHA_new/sha256_impl.c:99]   --->   Operation 92 'call' 'call_ret' <Predicate = true> <Delay = 0.00> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_4 : Operation 93 [1/1] (1.81ns)   --->   "store i32 0, i32* %ctx_datalen_0" [SHA_new/SHA_new/sha256_impl.c:102]   --->   Operation 93 'store' <Predicate = true> <Delay = 1.81>

State 5 <SV = 4> <Delay = 5.01>
ST_5 : Operation 94 [1/1] (0.00ns)   --->   "%ctx_bitlen_1_0_load = load i32* %ctx_bitlen_1_0" [SHA_new/SHA_new/sha256_impl.c:100]   --->   Operation 94 'load' 'ctx_bitlen_1_0_load' <Predicate = (icmp_ln98)> <Delay = 0.00>
ST_5 : Operation 95 [1/1] (0.00ns)   --->   "%ctx_bitlen_0_0_load = load i32* %ctx_bitlen_0_0" [SHA_new/SHA_new/sha256_impl.c:100]   --->   Operation 95 'load' 'ctx_bitlen_0_0_load' <Predicate = (icmp_ln98)> <Delay = 0.00>
ST_5 : Operation 96 [1/2] (2.55ns)   --->   "%call_ret = call fastcc { i32, i32, i32, i32, i32, i32, i32, i32 } @sha256_transform(i32 %ctx_state_0_0_load_1, i32 %ctx_state_1_0_load_1, i32 %ctx_state_2_0_load_1, i32 %ctx_state_3_0_load_1, i32 %ctx_state_4_0_load_1, i32 %ctx_state_5_0_load_1, i32 %ctx_state_6_0_load_1, i32 %ctx_state_7_0_load_1, [64 x i8]* %ctx_data)" [SHA_new/SHA_new/sha256_impl.c:99]   --->   Operation 96 'call' 'call_ret' <Predicate = (icmp_ln98)> <Delay = 2.55> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_5 : Operation 97 [1/1] (0.00ns)   --->   "%ctx_state_0_ret = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 0" [SHA_new/SHA_new/sha256_impl.c:99]   --->   Operation 97 'extractvalue' 'ctx_state_0_ret' <Predicate = (icmp_ln98)> <Delay = 0.00>
ST_5 : Operation 98 [1/1] (0.00ns)   --->   "%ctx_state_1_ret = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 1" [SHA_new/SHA_new/sha256_impl.c:99]   --->   Operation 98 'extractvalue' 'ctx_state_1_ret' <Predicate = (icmp_ln98)> <Delay = 0.00>
ST_5 : Operation 99 [1/1] (0.00ns)   --->   "%ctx_state_2_ret = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 2" [SHA_new/SHA_new/sha256_impl.c:99]   --->   Operation 99 'extractvalue' 'ctx_state_2_ret' <Predicate = (icmp_ln98)> <Delay = 0.00>
ST_5 : Operation 100 [1/1] (0.00ns)   --->   "%ctx_state_3_ret = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 3" [SHA_new/SHA_new/sha256_impl.c:99]   --->   Operation 100 'extractvalue' 'ctx_state_3_ret' <Predicate = (icmp_ln98)> <Delay = 0.00>
ST_5 : Operation 101 [1/1] (0.00ns)   --->   "%ctx_state_4_ret = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 4" [SHA_new/SHA_new/sha256_impl.c:99]   --->   Operation 101 'extractvalue' 'ctx_state_4_ret' <Predicate = (icmp_ln98)> <Delay = 0.00>
ST_5 : Operation 102 [1/1] (0.00ns)   --->   "%ctx_state_5_ret = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 5" [SHA_new/SHA_new/sha256_impl.c:99]   --->   Operation 102 'extractvalue' 'ctx_state_5_ret' <Predicate = (icmp_ln98)> <Delay = 0.00>
ST_5 : Operation 103 [1/1] (0.00ns)   --->   "%ctx_state_6_ret = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 6" [SHA_new/SHA_new/sha256_impl.c:99]   --->   Operation 103 'extractvalue' 'ctx_state_6_ret' <Predicate = (icmp_ln98)> <Delay = 0.00>
ST_5 : Operation 104 [1/1] (0.00ns)   --->   "%ctx_state_7_ret = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 7" [SHA_new/SHA_new/sha256_impl.c:99]   --->   Operation 104 'extractvalue' 'ctx_state_7_ret' <Predicate = (icmp_ln98)> <Delay = 0.00>
ST_5 : Operation 105 [1/1] (2.47ns)   --->   "%icmp_ln100 = icmp ugt i32 %ctx_bitlen_0_0_load, -513" [SHA_new/SHA_new/sha256_impl.c:100]   --->   Operation 105 'icmp' 'icmp_ln100' <Predicate = (icmp_ln98)> <Delay = 2.47> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 106 [1/1] (2.55ns)   --->   "%add_ln100 = add i32 %ctx_bitlen_1_0_load, 1" [SHA_new/SHA_new/sha256_impl.c:100]   --->   Operation 106 'add' 'add_ln100' <Predicate = (icmp_ln98)> <Delay = 2.55> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 107 [1/1] (0.69ns)   --->   "%select_ln100 = select i1 %icmp_ln100, i32 %add_ln100, i32 %ctx_bitlen_1_0_load" [SHA_new/SHA_new/sha256_impl.c:100]   --->   Operation 107 'select' 'select_ln100' <Predicate = (icmp_ln98)> <Delay = 0.69> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_5 : Operation 108 [1/1] (2.55ns)   --->   "%add_ln100_1 = add i32 %ctx_bitlen_0_0_load, 512" [SHA_new/SHA_new/sha256_impl.c:100]   --->   Operation 108 'add' 'add_ln100_1' <Predicate = (icmp_ln98)> <Delay = 2.55> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 109 [1/1] (1.76ns)   --->   "store i32 %add_ln100_1, i32* %ctx_bitlen_0_0" [SHA_new/SHA_new/sha256_impl.c:102]   --->   Operation 109 'store' <Predicate = (icmp_ln98)> <Delay = 1.76>
ST_5 : Operation 110 [1/1] (1.76ns)   --->   "store i32 %select_ln100, i32* %ctx_bitlen_1_0" [SHA_new/SHA_new/sha256_impl.c:102]   --->   Operation 110 'store' <Predicate = (icmp_ln98)> <Delay = 1.76>
ST_5 : Operation 111 [1/1] (1.76ns)   --->   "store i32 %ctx_state_0_ret, i32* %ctx_state_0_0" [SHA_new/SHA_new/sha256_impl.c:102]   --->   Operation 111 'store' <Predicate = (icmp_ln98)> <Delay = 1.76>
ST_5 : Operation 112 [1/1] (1.76ns)   --->   "store i32 %ctx_state_1_ret, i32* %ctx_state_1_0" [SHA_new/SHA_new/sha256_impl.c:102]   --->   Operation 112 'store' <Predicate = (icmp_ln98)> <Delay = 1.76>
ST_5 : Operation 113 [1/1] (1.76ns)   --->   "store i32 %ctx_state_2_ret, i32* %ctx_state_2_0" [SHA_new/SHA_new/sha256_impl.c:102]   --->   Operation 113 'store' <Predicate = (icmp_ln98)> <Delay = 1.76>
ST_5 : Operation 114 [1/1] (1.76ns)   --->   "store i32 %ctx_state_3_ret, i32* %ctx_state_3_0" [SHA_new/SHA_new/sha256_impl.c:102]   --->   Operation 114 'store' <Predicate = (icmp_ln98)> <Delay = 1.76>
ST_5 : Operation 115 [1/1] (1.76ns)   --->   "store i32 %ctx_state_4_ret, i32* %ctx_state_4_0" [SHA_new/SHA_new/sha256_impl.c:102]   --->   Operation 115 'store' <Predicate = (icmp_ln98)> <Delay = 1.76>
ST_5 : Operation 116 [1/1] (1.76ns)   --->   "store i32 %ctx_state_5_ret, i32* %ctx_state_5_0" [SHA_new/SHA_new/sha256_impl.c:102]   --->   Operation 116 'store' <Predicate = (icmp_ln98)> <Delay = 1.76>
ST_5 : Operation 117 [1/1] (1.76ns)   --->   "store i32 %ctx_state_6_ret, i32* %ctx_state_6_0" [SHA_new/SHA_new/sha256_impl.c:102]   --->   Operation 117 'store' <Predicate = (icmp_ln98)> <Delay = 1.76>
ST_5 : Operation 118 [1/1] (1.76ns)   --->   "store i32 %ctx_state_7_ret, i32* %ctx_state_7_0" [SHA_new/SHA_new/sha256_impl.c:102]   --->   Operation 118 'store' <Predicate = (icmp_ln98)> <Delay = 1.76>
ST_5 : Operation 119 [1/1] (0.00ns)   --->   "br label %hls_label_0_end" [SHA_new/SHA_new/sha256_impl.c:102]   --->   Operation 119 'br' <Predicate = (icmp_ln98)> <Delay = 0.00>
ST_5 : Operation 120 [1/1] (0.00ns)   --->   "%empty_9 = call i32 (...)* @_ssdm_op_SpecRegionEnd([12 x i8]* @p_str, i32 %tmp)" [SHA_new/SHA_new/sha256_impl.c:103]   --->   Operation 120 'specregionend' 'empty_9' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 121 [1/1] (0.00ns)   --->   "br label %1" [SHA_new/SHA_new/sha256_impl.c:94]   --->   Operation 121 'br' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 1.81ns
The critical path consists of the following:
	'alloca' operation ('ctx.datalen') [16]  (0 ns)
	'store' operation ('store_ln94', SHA_new/SHA_new/sha256_impl.c:94) of variable 'ctx.datalen', SHA_new/SHA_new/sha256_impl.c:90 on local variable 'ctx.datalen' [50]  (1.81 ns)

 <State 2>: 2.32ns
The critical path consists of the following:
	'phi' operation ('i') with incoming values : ('i', SHA_new/SHA_new/sha256_impl.c:94) [53]  (0 ns)
	'getelementptr' operation ('data_addr', SHA_new/SHA_new/sha256_impl.c:96) [62]  (0 ns)
	'load' operation ('data_load', SHA_new/SHA_new/sha256_impl.c:96) on array 'data' [63]  (2.32 ns)

 <State 3>: 5.03ns
The critical path consists of the following:
	'load' operation ('ctx_datalen_0_load', SHA_new/SHA_new/sha256_impl.c:97) on local variable 'ctx.datalen' [58]  (0 ns)
	'add' operation ('add_ln97', SHA_new/SHA_new/sha256_impl.c:97) [67]  (2.55 ns)
	'icmp' operation ('icmp_ln98', SHA_new/SHA_new/sha256_impl.c:98) [68]  (2.47 ns)

 <State 4>: 1.81ns
The critical path consists of the following:
	'store' operation ('store_ln102', SHA_new/SHA_new/sha256_impl.c:102) of constant 0 on local variable 'ctx.datalen' [107]  (1.81 ns)

 <State 5>: 5.02ns
The critical path consists of the following:
	'load' operation ('ctx_bitlen_1_0_load', SHA_new/SHA_new/sha256_impl.c:100) on local variable 'ctx_bitlen_1_0' [82]  (0 ns)
	'add' operation ('add_ln100', SHA_new/SHA_new/sha256_impl.c:100) [94]  (2.55 ns)
	'select' operation ('select_ln100', SHA_new/SHA_new/sha256_impl.c:100) [95]  (0.698 ns)
	'store' operation ('store_ln102', SHA_new/SHA_new/sha256_impl.c:102) of variable 'select_ln100', SHA_new/SHA_new/sha256_impl.c:100 on local variable 'ctx_bitlen_1_0' [98]  (1.77 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
