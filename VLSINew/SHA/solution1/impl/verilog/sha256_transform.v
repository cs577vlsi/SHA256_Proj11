// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sha256_transform (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ctx_state_0_read,
        ctx_state_1_read,
        ctx_state_2_read,
        ctx_state_3_read,
        ctx_state_4_read,
        ctx_state_5_read,
        ctx_state_6_read,
        ctx_state_7_read,
        data_address0,
        data_ce0,
        data_q0,
        data_address1,
        data_ce1,
        data_q1,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] ctx_state_0_read;
input  [31:0] ctx_state_1_read;
input  [31:0] ctx_state_2_read;
input  [31:0] ctx_state_3_read;
input  [31:0] ctx_state_4_read;
input  [31:0] ctx_state_5_read;
input  [31:0] ctx_state_6_read;
input  [31:0] ctx_state_7_read;
output  [5:0] data_address0;
output   data_ce0;
input  [7:0] data_q0;
output  [5:0] data_address1;
output   data_ce1;
input  [7:0] data_q1;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;
output  [31:0] ap_return_3;
output  [31:0] ap_return_4;
output  [31:0] ap_return_5;
output  [31:0] ap_return_6;
output  [31:0] ap_return_7;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] data_address0;
reg data_ce0;
reg[5:0] data_address1;
reg data_ce1;
reg[31:0] ap_return_0;
reg[31:0] ap_return_1;
reg[31:0] ap_return_2;
reg[31:0] ap_return_3;
reg[31:0] ap_return_4;
reg[31:0] ap_return_5;
reg[31:0] ap_return_6;
reg[31:0] ap_return_7;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] k_address0;
reg    k_ce0;
wire   [31:0] k_q0;
wire   [31:0] m_q0;
reg   [31:0] reg_435;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire   [4:0] add_ln34_fu_445_p2;
reg   [4:0] add_ln34_reg_1130;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln34_fu_439_p2;
wire   [5:0] trunc_ln34_fu_456_p1;
reg   [5:0] trunc_ln34_reg_1140;
wire   [6:0] j_fu_471_p2;
reg   [6:0] j_reg_1151;
reg   [7:0] data_load_reg_1156;
wire    ap_CS_fsm_state3;
reg   [7:0] data_load_1_reg_1161;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln38_fu_513_p2;
wire   [31:0] m_q1;
reg   [31:0] m_load_1_reg_1189;
wire   [31:0] add_ln40_5_fu_703_p2;
reg   [31:0] add_ln40_5_reg_1204;
wire   [6:0] i_fu_725_p2;
wire    ap_CS_fsm_state8;
wire   [6:0] i_3_fu_737_p2;
reg   [6:0] i_3_reg_1217;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_ln51_fu_731_p2;
wire   [31:0] add_ln53_2_fu_857_p2;
reg   [31:0] add_ln53_2_reg_1232;
wire   [31:0] xor_ln54_3_fu_881_p2;
reg   [31:0] xor_ln54_3_reg_1237;
wire   [31:0] t1_fu_981_p2;
reg   [31:0] t1_reg_1242;
wire    ap_CS_fsm_state10;
wire   [31:0] e_fu_1064_p2;
wire    ap_CS_fsm_state11;
wire   [31:0] a_fu_1073_p2;
reg   [5:0] m_address0;
reg    m_ce0;
reg    m_we0;
wire   [31:0] m_d0;
reg   [5:0] m_address1;
reg    m_ce1;
reg    m_we1;
wire   [31:0] m_d1;
reg   [4:0] i_0_reg_304;
wire    ap_CS_fsm_state4;
reg   [6:0] j_0_reg_316;
reg   [6:0] i_1_reg_327;
reg   [31:0] h_reg_348;
reg   [31:0] h_0_reg_339;
reg   [31:0] g_reg_359;
reg   [31:0] f_reg_370;
reg   [31:0] d_reg_391;
reg   [31:0] d_0_reg_381;
reg   [31:0] c_reg_402;
reg   [31:0] b_reg_413;
reg   [6:0] i_2_reg_424;
wire   [63:0] zext_ln36_fu_451_p1;
wire   [63:0] zext_ln36_1_fu_466_p1;
wire   [63:0] zext_ln36_2_fu_482_p1;
wire   [63:0] zext_ln36_3_fu_492_p1;
wire   [63:0] zext_ln36_4_fu_508_p1;
wire   [63:0] zext_ln40_fu_525_p1;
wire   [63:0] zext_ln40_1_fu_536_p1;
wire   [63:0] zext_ln40_2_fu_547_p1;
wire   [63:0] zext_ln40_3_fu_558_p1;
wire   [63:0] zext_ln40_4_fu_720_p1;
wire   [63:0] zext_ln53_fu_845_p1;
wire   [5:0] or_ln36_fu_460_p2;
wire   [5:0] or_ln36_1_fu_477_p2;
wire   [5:0] or_ln36_2_fu_487_p2;
wire   [6:0] add_ln40_fu_519_p2;
wire   [6:0] add_ln40_1_fu_530_p2;
wire   [6:0] add_ln40_2_fu_541_p2;
wire   [6:0] add_ln40_3_fu_552_p2;
wire   [16:0] trunc_ln40_fu_573_p1;
wire   [14:0] lshr_ln_fu_563_p4;
wire   [18:0] trunc_ln40_1_fu_595_p1;
wire   [12:0] lshr_ln40_1_fu_585_p4;
wire   [21:0] lshr_ln40_2_fu_607_p4;
wire   [31:0] zext_ln40_5_fu_617_p1;
wire   [31:0] or_ln40_1_fu_599_p3;
wire   [31:0] xor_ln40_fu_621_p2;
wire   [31:0] or_ln_fu_577_p3;
wire   [6:0] trunc_ln40_2_fu_643_p1;
wire   [24:0] lshr_ln40_3_fu_633_p4;
wire   [17:0] trunc_ln40_3_fu_665_p1;
wire   [13:0] lshr_ln40_4_fu_655_p4;
wire   [28:0] lshr_ln40_5_fu_677_p4;
wire   [31:0] zext_ln40_6_fu_687_p1;
wire   [31:0] or_ln40_3_fu_669_p3;
wire   [31:0] xor_ln40_2_fu_691_p2;
wire   [31:0] or_ln40_2_fu_647_p3;
wire   [31:0] xor_ln40_1_fu_627_p2;
wire   [31:0] xor_ln40_3_fu_697_p2;
wire   [31:0] add_ln40_4_fu_709_p2;
wire   [5:0] trunc_ln53_fu_753_p1;
wire   [25:0] lshr_ln1_fu_743_p4;
wire   [10:0] trunc_ln53_1_fu_775_p1;
wire   [20:0] lshr_ln53_1_fu_765_p4;
wire   [24:0] trunc_ln53_2_fu_797_p1;
wire   [6:0] lshr_ln53_2_fu_787_p4;
wire   [31:0] or_ln1_fu_757_p3;
wire   [31:0] or_ln53_1_fu_779_p3;
wire   [31:0] xor_ln53_fu_809_p2;
wire   [31:0] or_ln53_2_fu_801_p3;
wire   [31:0] xor_ln53_2_fu_827_p2;
wire   [31:0] and_ln53_fu_821_p2;
wire   [31:0] and_ln53_1_fu_833_p2;
wire   [31:0] xor_ln53_1_fu_815_p2;
wire   [31:0] xor_ln53_3_fu_839_p2;
wire   [31:0] add_ln53_1_fu_851_p2;
wire   [31:0] xor_ln54_2_fu_863_p2;
wire   [31:0] and_ln54_fu_869_p2;
wire   [31:0] and_ln54_1_fu_875_p2;
wire   [31:0] add_ln65_fu_887_p2;
wire   [31:0] add_ln66_fu_892_p2;
wire   [31:0] add_ln67_fu_897_p2;
wire   [31:0] add_ln68_fu_902_p2;
wire   [31:0] add_ln69_fu_907_p2;
wire   [31:0] add_ln70_fu_912_p2;
wire   [31:0] add_ln71_fu_917_p2;
wire   [31:0] add_ln72_fu_922_p2;
wire   [31:0] add_ln53_fu_975_p2;
wire   [1:0] trunc_ln54_fu_996_p1;
wire   [29:0] lshr_ln2_fu_986_p4;
wire   [12:0] trunc_ln54_1_fu_1018_p1;
wire   [18:0] lshr_ln54_1_fu_1008_p4;
wire   [21:0] trunc_ln54_2_fu_1040_p1;
wire   [9:0] lshr_ln54_2_fu_1030_p4;
wire   [31:0] or_ln2_fu_1000_p3;
wire   [31:0] or_ln54_1_fu_1022_p3;
wire   [31:0] xor_ln54_fu_1052_p2;
wire   [31:0] or_ln54_2_fu_1044_p3;
wire   [31:0] add_ln62_fu_1069_p2;
wire   [31:0] xor_ln54_1_fu_1058_p2;
reg   [31:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [31:0] ap_return_2_preg;
reg   [31:0] ap_return_3_preg;
reg   [31:0] ap_return_4_preg;
reg   [31:0] ap_return_5_preg;
reg   [31:0] ap_return_6_preg;
reg   [31:0] ap_return_7_preg;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 32'd0;
#0 ap_return_2_preg = 32'd0;
#0 ap_return_3_preg = 32'd0;
#0 ap_return_4_preg = 32'd0;
#0 ap_return_5_preg = 32'd0;
#0 ap_return_6_preg = 32'd0;
#0 ap_return_7_preg = 32'd0;
end

sha256_transform_k #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
k_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(k_address0),
    .ce0(k_ce0),
    .q0(k_q0)
);

sha256_transform_m #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
m_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(m_address0),
    .ce0(m_ce0),
    .we0(m_we0),
    .d0(m_d0),
    .q0(m_q0),
    .address1(m_address1),
    .ce1(m_ce1),
    .we1(m_we1),
    .d1(m_d1),
    .q1(m_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln51_fu_731_p2 == 1'd1))) begin
            ap_return_0_preg <= add_ln65_fu_887_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln51_fu_731_p2 == 1'd1))) begin
            ap_return_1_preg <= add_ln66_fu_892_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln51_fu_731_p2 == 1'd1))) begin
            ap_return_2_preg <= add_ln67_fu_897_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln51_fu_731_p2 == 1'd1))) begin
            ap_return_3_preg <= add_ln68_fu_902_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_4_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln51_fu_731_p2 == 1'd1))) begin
            ap_return_4_preg <= add_ln69_fu_907_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_5_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln51_fu_731_p2 == 1'd1))) begin
            ap_return_5_preg <= add_ln70_fu_912_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_6_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln51_fu_731_p2 == 1'd1))) begin
            ap_return_6_preg <= add_ln71_fu_917_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_7_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln51_fu_731_p2 == 1'd1))) begin
            ap_return_7_preg <= add_ln72_fu_922_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln38_fu_513_p2 == 1'd1))) begin
        b_reg_413 <= ctx_state_0_read;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        b_reg_413 <= a_fu_1073_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln38_fu_513_p2 == 1'd1))) begin
        c_reg_402 <= ctx_state_1_read;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        c_reg_402 <= b_reg_413;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln38_fu_513_p2 == 1'd1))) begin
        d_0_reg_381 <= ctx_state_3_read;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        d_0_reg_381 <= d_reg_391;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln38_fu_513_p2 == 1'd1))) begin
        d_reg_391 <= ctx_state_2_read;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        d_reg_391 <= c_reg_402;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln38_fu_513_p2 == 1'd1))) begin
        f_reg_370 <= ctx_state_4_read;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        f_reg_370 <= e_fu_1064_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln38_fu_513_p2 == 1'd1))) begin
        g_reg_359 <= ctx_state_5_read;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        g_reg_359 <= f_reg_370;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln38_fu_513_p2 == 1'd1))) begin
        h_0_reg_339 <= ctx_state_7_read;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        h_0_reg_339 <= h_reg_348;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln38_fu_513_p2 == 1'd1))) begin
        h_reg_348 <= ctx_state_6_read;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        h_reg_348 <= g_reg_359;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_0_reg_304 <= add_ln34_reg_1130;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_304 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln34_fu_439_p2 == 1'd1))) begin
        i_1_reg_327 <= 7'd16;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        i_1_reg_327 <= i_fu_725_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln38_fu_513_p2 == 1'd1))) begin
        i_2_reg_424 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        i_2_reg_424 <= i_3_reg_1217;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_0_reg_316 <= j_reg_1151;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_0_reg_316 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln34_reg_1130 <= add_ln34_fu_445_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln40_5_reg_1204 <= add_ln40_5_fu_703_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln51_fu_731_p2 == 1'd0))) begin
        add_ln53_2_reg_1232 <= add_ln53_2_fu_857_p2;
        xor_ln54_3_reg_1237 <= xor_ln54_3_fu_881_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_load_1_reg_1161 <= data_q1;
        data_load_reg_1156 <= data_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_3_reg_1217 <= i_3_fu_737_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln34_fu_439_p2 == 1'd0))) begin
        j_reg_1151 <= j_fu_471_p2;
        trunc_ln34_reg_1140 <= trunc_ln34_fu_456_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        m_load_1_reg_1189 <= m_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_435 <= m_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        t1_reg_1242 <= t1_fu_981_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state9) & (icmp_ln51_fu_731_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln51_fu_731_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln51_fu_731_p2 == 1'd1))) begin
        ap_return_0 = add_ln65_fu_887_p2;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln51_fu_731_p2 == 1'd1))) begin
        ap_return_1 = add_ln66_fu_892_p2;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln51_fu_731_p2 == 1'd1))) begin
        ap_return_2 = add_ln67_fu_897_p2;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln51_fu_731_p2 == 1'd1))) begin
        ap_return_3 = add_ln68_fu_902_p2;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln51_fu_731_p2 == 1'd1))) begin
        ap_return_4 = add_ln69_fu_907_p2;
    end else begin
        ap_return_4 = ap_return_4_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln51_fu_731_p2 == 1'd1))) begin
        ap_return_5 = add_ln70_fu_912_p2;
    end else begin
        ap_return_5 = ap_return_5_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln51_fu_731_p2 == 1'd1))) begin
        ap_return_6 = add_ln71_fu_917_p2;
    end else begin
        ap_return_6 = ap_return_6_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln51_fu_731_p2 == 1'd1))) begin
        ap_return_7 = add_ln72_fu_922_p2;
    end else begin
        ap_return_7 = ap_return_7_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_address0 = zext_ln36_2_fu_482_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        data_address0 = zext_ln36_fu_451_p1;
    end else begin
        data_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_address1 = zext_ln36_3_fu_492_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        data_address1 = zext_ln36_1_fu_466_p1;
    end else begin
        data_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        data_ce0 = 1'b1;
    end else begin
        data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        data_ce1 = 1'b1;
    end else begin
        data_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        k_ce0 = 1'b1;
    end else begin
        k_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        m_address0 = zext_ln53_fu_845_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        m_address0 = zext_ln40_3_fu_558_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        m_address0 = zext_ln40_fu_525_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        m_address0 = zext_ln36_4_fu_508_p1;
    end else begin
        m_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        m_address1 = zext_ln40_4_fu_720_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        m_address1 = zext_ln40_2_fu_547_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        m_address1 = zext_ln40_1_fu_536_p1;
    end else begin
        m_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5))) begin
        m_ce0 = 1'b1;
    end else begin
        m_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        m_ce1 = 1'b1;
    end else begin
        m_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        m_we0 = 1'b1;
    end else begin
        m_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        m_we1 = 1'b1;
    end else begin
        m_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln34_fu_439_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln38_fu_513_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln51_fu_731_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_fu_1073_p2 = (add_ln62_fu_1069_p2 + xor_ln54_1_fu_1058_p2);

assign add_ln34_fu_445_p2 = (i_0_reg_304 + 5'd1);

assign add_ln40_1_fu_530_p2 = ($signed(7'd121) + $signed(i_1_reg_327));

assign add_ln40_2_fu_541_p2 = ($signed(7'd113) + $signed(i_1_reg_327));

assign add_ln40_3_fu_552_p2 = ($signed(7'd112) + $signed(i_1_reg_327));

assign add_ln40_4_fu_709_p2 = (m_load_1_reg_1189 + reg_435);

assign add_ln40_5_fu_703_p2 = (xor_ln40_1_fu_627_p2 + xor_ln40_3_fu_697_p2);

assign add_ln40_fu_519_p2 = ($signed(7'd126) + $signed(i_1_reg_327));

assign add_ln53_1_fu_851_p2 = (xor_ln53_1_fu_815_p2 + xor_ln53_3_fu_839_p2);

assign add_ln53_2_fu_857_p2 = (add_ln53_1_fu_851_p2 + h_0_reg_339);

assign add_ln53_fu_975_p2 = (k_q0 + m_q0);

assign add_ln62_fu_1069_p2 = (xor_ln54_3_reg_1237 + t1_reg_1242);

assign add_ln65_fu_887_p2 = (b_reg_413 + ctx_state_0_read);

assign add_ln66_fu_892_p2 = (c_reg_402 + ctx_state_1_read);

assign add_ln67_fu_897_p2 = (d_reg_391 + ctx_state_2_read);

assign add_ln68_fu_902_p2 = (d_0_reg_381 + ctx_state_3_read);

assign add_ln69_fu_907_p2 = (f_reg_370 + ctx_state_4_read);

assign add_ln70_fu_912_p2 = (g_reg_359 + ctx_state_5_read);

assign add_ln71_fu_917_p2 = (h_reg_348 + ctx_state_6_read);

assign add_ln72_fu_922_p2 = (h_0_reg_339 + ctx_state_7_read);

assign and_ln53_1_fu_833_p2 = (xor_ln53_2_fu_827_p2 & h_reg_348);

assign and_ln53_fu_821_p2 = (g_reg_359 & f_reg_370);

assign and_ln54_1_fu_875_p2 = (d_reg_391 & c_reg_402);

assign and_ln54_fu_869_p2 = (xor_ln54_2_fu_863_p2 & b_reg_413);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign e_fu_1064_p2 = (t1_reg_1242 + d_0_reg_381);

assign i_3_fu_737_p2 = (i_2_reg_424 + 7'd1);

assign i_fu_725_p2 = (7'd1 + i_1_reg_327);

assign icmp_ln34_fu_439_p2 = ((i_0_reg_304 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_513_p2 = ((i_1_reg_327 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_731_p2 = ((i_2_reg_424 == 7'd64) ? 1'b1 : 1'b0);

assign j_fu_471_p2 = (7'd4 + j_0_reg_316);

assign k_address0 = zext_ln53_fu_845_p1;

assign lshr_ln1_fu_743_p4 = {{f_reg_370[31:6]}};

assign lshr_ln2_fu_986_p4 = {{b_reg_413[31:2]}};

assign lshr_ln40_1_fu_585_p4 = {{reg_435[31:19]}};

assign lshr_ln40_2_fu_607_p4 = {{reg_435[31:10]}};

assign lshr_ln40_3_fu_633_p4 = {{m_q1[31:7]}};

assign lshr_ln40_4_fu_655_p4 = {{m_q1[31:18]}};

assign lshr_ln40_5_fu_677_p4 = {{m_q1[31:3]}};

assign lshr_ln53_1_fu_765_p4 = {{f_reg_370[31:11]}};

assign lshr_ln53_2_fu_787_p4 = {{f_reg_370[31:25]}};

assign lshr_ln54_1_fu_1008_p4 = {{b_reg_413[31:13]}};

assign lshr_ln54_2_fu_1030_p4 = {{b_reg_413[31:22]}};

assign lshr_ln_fu_563_p4 = {{reg_435[31:17]}};

assign m_d0 = {{{{data_load_reg_1156}, {data_load_1_reg_1161}}, {data_q0}}, {data_q1}};

assign m_d1 = (add_ln40_5_reg_1204 + add_ln40_4_fu_709_p2);

assign or_ln1_fu_757_p3 = {{trunc_ln53_fu_753_p1}, {lshr_ln1_fu_743_p4}};

assign or_ln2_fu_1000_p3 = {{trunc_ln54_fu_996_p1}, {lshr_ln2_fu_986_p4}};

assign or_ln36_1_fu_477_p2 = (trunc_ln34_reg_1140 | 6'd2);

assign or_ln36_2_fu_487_p2 = (trunc_ln34_reg_1140 | 6'd3);

assign or_ln36_fu_460_p2 = (trunc_ln34_fu_456_p1 | 6'd1);

assign or_ln40_1_fu_599_p3 = {{trunc_ln40_1_fu_595_p1}, {lshr_ln40_1_fu_585_p4}};

assign or_ln40_2_fu_647_p3 = {{trunc_ln40_2_fu_643_p1}, {lshr_ln40_3_fu_633_p4}};

assign or_ln40_3_fu_669_p3 = {{trunc_ln40_3_fu_665_p1}, {lshr_ln40_4_fu_655_p4}};

assign or_ln53_1_fu_779_p3 = {{trunc_ln53_1_fu_775_p1}, {lshr_ln53_1_fu_765_p4}};

assign or_ln53_2_fu_801_p3 = {{trunc_ln53_2_fu_797_p1}, {lshr_ln53_2_fu_787_p4}};

assign or_ln54_1_fu_1022_p3 = {{trunc_ln54_1_fu_1018_p1}, {lshr_ln54_1_fu_1008_p4}};

assign or_ln54_2_fu_1044_p3 = {{trunc_ln54_2_fu_1040_p1}, {lshr_ln54_2_fu_1030_p4}};

assign or_ln_fu_577_p3 = {{trunc_ln40_fu_573_p1}, {lshr_ln_fu_563_p4}};

assign t1_fu_981_p2 = (add_ln53_2_reg_1232 + add_ln53_fu_975_p2);

assign trunc_ln34_fu_456_p1 = j_0_reg_316[5:0];

assign trunc_ln40_1_fu_595_p1 = reg_435[18:0];

assign trunc_ln40_2_fu_643_p1 = m_q1[6:0];

assign trunc_ln40_3_fu_665_p1 = m_q1[17:0];

assign trunc_ln40_fu_573_p1 = reg_435[16:0];

assign trunc_ln53_1_fu_775_p1 = f_reg_370[10:0];

assign trunc_ln53_2_fu_797_p1 = f_reg_370[24:0];

assign trunc_ln53_fu_753_p1 = f_reg_370[5:0];

assign trunc_ln54_1_fu_1018_p1 = b_reg_413[12:0];

assign trunc_ln54_2_fu_1040_p1 = b_reg_413[21:0];

assign trunc_ln54_fu_996_p1 = b_reg_413[1:0];

assign xor_ln40_1_fu_627_p2 = (xor_ln40_fu_621_p2 ^ or_ln_fu_577_p3);

assign xor_ln40_2_fu_691_p2 = (zext_ln40_6_fu_687_p1 ^ or_ln40_3_fu_669_p3);

assign xor_ln40_3_fu_697_p2 = (xor_ln40_2_fu_691_p2 ^ or_ln40_2_fu_647_p3);

assign xor_ln40_fu_621_p2 = (zext_ln40_5_fu_617_p1 ^ or_ln40_1_fu_599_p3);

assign xor_ln53_1_fu_815_p2 = (xor_ln53_fu_809_p2 ^ or_ln53_2_fu_801_p3);

assign xor_ln53_2_fu_827_p2 = (f_reg_370 ^ 32'd4294967295);

assign xor_ln53_3_fu_839_p2 = (and_ln53_fu_821_p2 ^ and_ln53_1_fu_833_p2);

assign xor_ln53_fu_809_p2 = (or_ln53_1_fu_779_p3 ^ or_ln1_fu_757_p3);

assign xor_ln54_1_fu_1058_p2 = (xor_ln54_fu_1052_p2 ^ or_ln54_2_fu_1044_p3);

assign xor_ln54_2_fu_863_p2 = (d_reg_391 ^ c_reg_402);

assign xor_ln54_3_fu_881_p2 = (and_ln54_fu_869_p2 ^ and_ln54_1_fu_875_p2);

assign xor_ln54_fu_1052_p2 = (or_ln54_1_fu_1022_p3 ^ or_ln2_fu_1000_p3);

assign zext_ln36_1_fu_466_p1 = or_ln36_fu_460_p2;

assign zext_ln36_2_fu_482_p1 = or_ln36_1_fu_477_p2;

assign zext_ln36_3_fu_492_p1 = or_ln36_2_fu_487_p2;

assign zext_ln36_4_fu_508_p1 = i_0_reg_304;

assign zext_ln36_fu_451_p1 = j_0_reg_316;

assign zext_ln40_1_fu_536_p1 = add_ln40_1_fu_530_p2;

assign zext_ln40_2_fu_547_p1 = add_ln40_2_fu_541_p2;

assign zext_ln40_3_fu_558_p1 = add_ln40_3_fu_552_p2;

assign zext_ln40_4_fu_720_p1 = i_1_reg_327;

assign zext_ln40_5_fu_617_p1 = lshr_ln40_2_fu_607_p4;

assign zext_ln40_6_fu_687_p1 = lshr_ln40_5_fu_677_p4;

assign zext_ln40_fu_525_p1 = add_ln40_fu_519_p2;

assign zext_ln53_fu_845_p1 = i_2_reg_424;

endmodule //sha256_transform
