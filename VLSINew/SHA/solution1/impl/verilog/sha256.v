// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sha256,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.522000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=12,HLS_SYN_DSP=0,HLS_SYN_FF=4410,HLS_SYN_LUT=6303,HLS_VERSION=2019_1}" *)

module sha256 (
        ap_clk,
        ap_rst_n,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 10;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [7:0] data_address0;
reg    data_ce0;
wire   [7:0] data_q0;
wire   [31:0] base_offset;
wire   [31:0] bytes;
wire   [4:0] digest_address0;
reg    digest_ce0;
reg    digest_we0;
reg   [31:0] reg_476;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln32_fu_614_p2;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln37_fu_640_p2;
reg   [31:0] reg_482;
reg   [31:0] reg_488;
reg   [31:0] reg_494;
reg   [31:0] reg_500;
reg   [31:0] reg_506;
reg   [31:0] reg_512;
reg   [31:0] reg_518;
reg   [31:0] reg_524;
reg   [31:0] reg_530;
reg   [31:0] reg_536;
wire   [9:0] trunc_ln32_fu_542_p1;
reg   [9:0] trunc_ln32_reg_850;
reg   [31:0] n_0_load_reg_856;
wire   [0:0] icmp_ln35_fu_630_p2;
reg   [0:0] icmp_ln35_reg_866;
wire   [9:0] trunc_ln35_fu_636_p1;
reg   [9:0] trunc_ln35_reg_870;
wire   [6:0] i_8_fu_646_p2;
reg   [6:0] i_8_reg_879;
wire   [5:0] i_7_fu_706_p2;
reg   [5:0] i_7_reg_892;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln45_fu_701_p2;
reg   [31:0] sha256ctx_datalen_1_1_reg_902;
reg   [31:0] sha256ctx_bitlen_0_1_reg_907;
reg   [31:0] sha256ctx_bitlen_1_1_reg_912;
reg   [31:0] sha256ctx_state_0_2_2_reg_917;
reg   [31:0] sha256ctx_state_1_2_2_reg_922;
reg   [31:0] sha256ctx_state_2_2_2_reg_927;
reg   [31:0] sha256ctx_state_3_2_2_reg_932;
reg   [31:0] sha256ctx_state_4_2_2_reg_937;
reg   [31:0] sha256ctx_state_5_2_2_reg_942;
reg   [31:0] sha256ctx_state_6_2_2_reg_947;
reg   [31:0] sha256ctx_state_7_2_2_reg_952;
wire   [5:0] i_fu_747_p2;
reg   [5:0] i_reg_960;
wire    ap_CS_fsm_state9;
wire   [63:0] zext_ln59_fu_753_p1;
reg   [63:0] zext_ln59_reg_965;
wire   [0:0] icmp_ln56_fu_741_p2;
reg   [5:0] seg_buf_address0;
reg    seg_buf_ce0;
reg    seg_buf_we0;
reg   [7:0] seg_buf_d0;
wire   [7:0] seg_buf_q0;
reg    seg_buf_ce1;
reg    seg_buf_we1;
reg   [5:0] sha256ctx_data_address0;
reg    sha256ctx_data_ce0;
reg    sha256ctx_data_we0;
reg   [7:0] sha256ctx_data_d0;
wire   [7:0] sha256ctx_data_q0;
reg   [5:0] sha256ctx_data_address1;
reg    sha256ctx_data_ce1;
reg    sha256ctx_data_we1;
wire   [7:0] sha256ctx_data_q1;
wire    grp_sha256_final_fu_279_ap_start;
wire    grp_sha256_final_fu_279_ap_done;
wire    grp_sha256_final_fu_279_ap_idle;
wire    grp_sha256_final_fu_279_ap_ready;
wire   [5:0] grp_sha256_final_fu_279_ctx_data_address0;
wire    grp_sha256_final_fu_279_ctx_data_ce0;
wire    grp_sha256_final_fu_279_ctx_data_we0;
wire   [7:0] grp_sha256_final_fu_279_ctx_data_d0;
wire   [5:0] grp_sha256_final_fu_279_ctx_data_address1;
wire    grp_sha256_final_fu_279_ctx_data_ce1;
wire    grp_sha256_final_fu_279_ctx_data_we1;
wire   [7:0] grp_sha256_final_fu_279_ctx_data_d1;
wire   [5:0] grp_sha256_final_fu_279_hash_address0;
wire    grp_sha256_final_fu_279_hash_ce0;
wire    grp_sha256_final_fu_279_hash_we0;
wire   [7:0] grp_sha256_final_fu_279_hash_d0;
wire   [5:0] grp_sha256_final_fu_279_hash_address1;
wire    grp_sha256_final_fu_279_hash_ce1;
wire    grp_sha256_final_fu_279_hash_we1;
wire   [7:0] grp_sha256_final_fu_279_hash_d1;
wire    grp_sha256_update_fu_298_ap_start;
wire    grp_sha256_update_fu_298_ap_done;
wire    grp_sha256_update_fu_298_ap_idle;
wire    grp_sha256_update_fu_298_ap_ready;
wire   [5:0] grp_sha256_update_fu_298_ctx_data_address0;
wire    grp_sha256_update_fu_298_ctx_data_ce0;
wire    grp_sha256_update_fu_298_ctx_data_we0;
wire   [7:0] grp_sha256_update_fu_298_ctx_data_d0;
wire   [5:0] grp_sha256_update_fu_298_ctx_data_address1;
wire    grp_sha256_update_fu_298_ctx_data_ce1;
reg   [31:0] grp_sha256_update_fu_298_ctx_datalen_read;
reg   [31:0] grp_sha256_update_fu_298_p_read1;
reg   [31:0] grp_sha256_update_fu_298_p_read2;
reg   [31:0] grp_sha256_update_fu_298_p_read3;
reg   [31:0] grp_sha256_update_fu_298_p_read4;
reg   [31:0] grp_sha256_update_fu_298_p_read5;
reg   [31:0] grp_sha256_update_fu_298_p_read6;
reg   [31:0] grp_sha256_update_fu_298_p_read7;
reg   [31:0] grp_sha256_update_fu_298_p_read8;
reg   [31:0] grp_sha256_update_fu_298_p_read9;
reg   [31:0] grp_sha256_update_fu_298_p_read10;
wire   [5:0] grp_sha256_update_fu_298_data_address0;
wire    grp_sha256_update_fu_298_data_ce0;
reg   [31:0] grp_sha256_update_fu_298_len;
wire   [31:0] grp_sha256_update_fu_298_ap_return_0;
wire   [31:0] grp_sha256_update_fu_298_ap_return_1;
wire   [31:0] grp_sha256_update_fu_298_ap_return_2;
wire   [31:0] grp_sha256_update_fu_298_ap_return_3;
wire   [31:0] grp_sha256_update_fu_298_ap_return_4;
wire   [31:0] grp_sha256_update_fu_298_ap_return_5;
wire   [31:0] grp_sha256_update_fu_298_ap_return_6;
wire   [31:0] grp_sha256_update_fu_298_ap_return_7;
wire   [31:0] grp_sha256_update_fu_298_ap_return_8;
wire   [31:0] grp_sha256_update_fu_298_ap_return_9;
wire   [31:0] grp_sha256_update_fu_298_ap_return_10;
reg   [6:0] i_0_reg_244;
wire    ap_CS_fsm_state4;
reg   [5:0] i_1_reg_256;
wire    ap_CS_fsm_state7;
reg   [5:0] i_2_reg_268;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state10;
reg    grp_sha256_final_fu_279_ap_start_reg;
reg    grp_sha256_update_fu_298_ap_start_reg;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln38_2_fu_666_p1;
wire   [63:0] zext_ln38_fu_681_p1;
wire   [63:0] zext_ln47_2_fu_726_p1;
wire   [63:0] zext_ln47_fu_736_p1;
reg   [31:0] n_0_fu_110;
wire   [31:0] n_fu_671_p2;
reg   [31:0] sha256ctx_datalen_1_fu_114;
reg    ap_block_state5_on_subcall_done;
reg   [31:0] sha256ctx_bitlen_0_2_fu_118;
reg   [31:0] sha256ctx_bitlen_1_2_fu_122;
reg   [31:0] sha256ctx_state_0_2_fu_126;
reg   [31:0] sha256ctx_state_1_2_fu_130;
reg   [31:0] sha256ctx_state_2_2_fu_134;
reg   [31:0] sha256ctx_state_3_2_fu_138;
reg   [31:0] sha256ctx_state_4_2_fu_142;
reg   [31:0] sha256ctx_state_5_2_fu_146;
reg   [31:0] sha256ctx_state_6_2_fu_150;
reg   [31:0] sha256ctx_state_7_2_fu_154;
reg   [31:0] seg_offset_1_fu_158;
wire   [31:0] seg_offset_fu_686_p2;
wire   [25:0] tmp_3_fu_620_p4;
wire   [9:0] zext_ln38_1_fu_652_p1;
wire   [9:0] add_ln38_fu_656_p2;
wire   [9:0] add_ln38_1_fu_661_p2;
wire   [31:0] zext_ln45_fu_697_p1;
wire   [9:0] zext_ln47_1_fu_712_p1;
wire   [9:0] add_ln47_fu_716_p2;
wire   [9:0] add_ln47_1_fu_721_p2;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 grp_sha256_final_fu_279_ap_start_reg = 1'b0;
#0 grp_sha256_update_fu_298_ap_start_reg = 1'b0;
end

sha256_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
sha256_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .data_address0(data_address0),
    .data_ce0(data_ce0),
    .data_q0(data_q0),
    .base_offset(base_offset),
    .bytes(bytes),
    .digest_address0(digest_address0),
    .digest_ce0(digest_ce0),
    .digest_we0(digest_we0),
    .digest_d0(seg_buf_q0)
);

sha256_seg_buf #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
seg_buf_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(seg_buf_address0),
    .ce0(seg_buf_ce0),
    .we0(seg_buf_we0),
    .d0(seg_buf_d0),
    .q0(seg_buf_q0),
    .address1(grp_sha256_final_fu_279_hash_address1),
    .ce1(seg_buf_ce1),
    .we1(seg_buf_we1),
    .d1(grp_sha256_final_fu_279_hash_d1)
);

sha256_sha256ctx_bkb #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
sha256ctx_data_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sha256ctx_data_address0),
    .ce0(sha256ctx_data_ce0),
    .we0(sha256ctx_data_we0),
    .d0(sha256ctx_data_d0),
    .q0(sha256ctx_data_q0),
    .address1(sha256ctx_data_address1),
    .ce1(sha256ctx_data_ce1),
    .we1(sha256ctx_data_we1),
    .d1(grp_sha256_final_fu_279_ctx_data_d1),
    .q1(sha256ctx_data_q1)
);

sha256_final grp_sha256_final_fu_279(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_sha256_final_fu_279_ap_start),
    .ap_done(grp_sha256_final_fu_279_ap_done),
    .ap_idle(grp_sha256_final_fu_279_ap_idle),
    .ap_ready(grp_sha256_final_fu_279_ap_ready),
    .ctx_data_address0(grp_sha256_final_fu_279_ctx_data_address0),
    .ctx_data_ce0(grp_sha256_final_fu_279_ctx_data_ce0),
    .ctx_data_we0(grp_sha256_final_fu_279_ctx_data_we0),
    .ctx_data_d0(grp_sha256_final_fu_279_ctx_data_d0),
    .ctx_data_q0(sha256ctx_data_q0),
    .ctx_data_address1(grp_sha256_final_fu_279_ctx_data_address1),
    .ctx_data_ce1(grp_sha256_final_fu_279_ctx_data_ce1),
    .ctx_data_we1(grp_sha256_final_fu_279_ctx_data_we1),
    .ctx_data_d1(grp_sha256_final_fu_279_ctx_data_d1),
    .ctx_data_q1(sha256ctx_data_q1),
    .ctx_datalen_read(reg_476),
    .ctx_bitlen_0_read(reg_482),
    .p_read3(reg_488),
    .p_read2(reg_494),
    .p_read4(reg_500),
    .p_read5(reg_506),
    .p_read6(reg_512),
    .p_read7(reg_518),
    .p_read8(reg_524),
    .p_read9(reg_530),
    .p_read10(reg_536),
    .hash_address0(grp_sha256_final_fu_279_hash_address0),
    .hash_ce0(grp_sha256_final_fu_279_hash_ce0),
    .hash_we0(grp_sha256_final_fu_279_hash_we0),
    .hash_d0(grp_sha256_final_fu_279_hash_d0),
    .hash_address1(grp_sha256_final_fu_279_hash_address1),
    .hash_ce1(grp_sha256_final_fu_279_hash_ce1),
    .hash_we1(grp_sha256_final_fu_279_hash_we1),
    .hash_d1(grp_sha256_final_fu_279_hash_d1)
);

sha256_update grp_sha256_update_fu_298(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_sha256_update_fu_298_ap_start),
    .ap_done(grp_sha256_update_fu_298_ap_done),
    .ap_idle(grp_sha256_update_fu_298_ap_idle),
    .ap_ready(grp_sha256_update_fu_298_ap_ready),
    .ctx_data_address0(grp_sha256_update_fu_298_ctx_data_address0),
    .ctx_data_ce0(grp_sha256_update_fu_298_ctx_data_ce0),
    .ctx_data_we0(grp_sha256_update_fu_298_ctx_data_we0),
    .ctx_data_d0(grp_sha256_update_fu_298_ctx_data_d0),
    .ctx_data_q0(sha256ctx_data_q0),
    .ctx_data_address1(grp_sha256_update_fu_298_ctx_data_address1),
    .ctx_data_ce1(grp_sha256_update_fu_298_ctx_data_ce1),
    .ctx_data_q1(sha256ctx_data_q1),
    .ctx_datalen_read(grp_sha256_update_fu_298_ctx_datalen_read),
    .p_read1(grp_sha256_update_fu_298_p_read1),
    .p_read2(grp_sha256_update_fu_298_p_read2),
    .p_read3(grp_sha256_update_fu_298_p_read3),
    .p_read4(grp_sha256_update_fu_298_p_read4),
    .p_read5(grp_sha256_update_fu_298_p_read5),
    .p_read6(grp_sha256_update_fu_298_p_read6),
    .p_read7(grp_sha256_update_fu_298_p_read7),
    .p_read8(grp_sha256_update_fu_298_p_read8),
    .p_read9(grp_sha256_update_fu_298_p_read9),
    .p_read10(grp_sha256_update_fu_298_p_read10),
    .data_address0(grp_sha256_update_fu_298_data_address0),
    .data_ce0(grp_sha256_update_fu_298_data_ce0),
    .data_q0(seg_buf_q0),
    .len(grp_sha256_update_fu_298_len),
    .ap_return_0(grp_sha256_update_fu_298_ap_return_0),
    .ap_return_1(grp_sha256_update_fu_298_ap_return_1),
    .ap_return_2(grp_sha256_update_fu_298_ap_return_2),
    .ap_return_3(grp_sha256_update_fu_298_ap_return_3),
    .ap_return_4(grp_sha256_update_fu_298_ap_return_4),
    .ap_return_5(grp_sha256_update_fu_298_ap_return_5),
    .ap_return_6(grp_sha256_update_fu_298_ap_return_6),
    .ap_return_7(grp_sha256_update_fu_298_ap_return_7),
    .ap_return_8(grp_sha256_update_fu_298_ap_return_8),
    .ap_return_9(grp_sha256_update_fu_298_ap_return_9),
    .ap_return_10(grp_sha256_update_fu_298_ap_return_10)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_sha256_final_fu_279_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln32_fu_614_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_sha256_final_fu_279_ap_start_reg <= 1'b1;
        end else if ((grp_sha256_final_fu_279_ap_ready == 1'b1)) begin
            grp_sha256_final_fu_279_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_sha256_update_fu_298_ap_start_reg <= 1'b0;
    end else begin
        if ((((icmp_ln37_fu_640_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | ((icmp_ln45_fu_701_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6)))) begin
            grp_sha256_update_fu_298_ap_start_reg <= 1'b1;
        end else if ((grp_sha256_update_fu_298_ap_ready == 1'b1)) begin
            grp_sha256_update_fu_298_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_fu_614_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln35_fu_630_p2 == 1'd0))) begin
        i_0_reg_244 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        i_0_reg_244 <= i_8_reg_879;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_fu_630_p2 == 1'd1) & (icmp_ln32_fu_614_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_256 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        i_1_reg_256 <= i_7_reg_892;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_2_reg_268 <= i_reg_960;
    end else if (((grp_sha256_final_fu_279_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        i_2_reg_268 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_fu_701_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        n_0_fu_110 <= 32'd0;
    end else if (((icmp_ln37_fu_640_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        n_0_fu_110 <= n_fu_671_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        n_0_fu_110 <= bytes;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln35_reg_866 == 1'd0))) begin
        seg_offset_1_fu_158 <= seg_offset_fu_686_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        seg_offset_1_fu_158 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln35_reg_866 == 1'd1) & (1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5)) | ((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln35_reg_866 == 1'd0)))) begin
        sha256ctx_bitlen_0_2_fu_118 <= grp_sha256_update_fu_298_ap_return_1;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sha256ctx_bitlen_0_2_fu_118 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln35_reg_866 == 1'd1) & (1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5)) | ((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln35_reg_866 == 1'd0)))) begin
        sha256ctx_bitlen_1_2_fu_122 <= grp_sha256_update_fu_298_ap_return_2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sha256ctx_bitlen_1_2_fu_122 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln35_reg_866 == 1'd1) & (1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5)) | ((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln35_reg_866 == 1'd0)))) begin
        sha256ctx_datalen_1_fu_114 <= grp_sha256_update_fu_298_ap_return_0;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sha256ctx_datalen_1_fu_114 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln35_reg_866 == 1'd1) & (1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5)) | ((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln35_reg_866 == 1'd0)))) begin
        sha256ctx_state_0_2_fu_126 <= grp_sha256_update_fu_298_ap_return_3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sha256ctx_state_0_2_fu_126 <= 32'd1779033703;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln35_reg_866 == 1'd1) & (1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5)) | ((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln35_reg_866 == 1'd0)))) begin
        sha256ctx_state_1_2_fu_130 <= grp_sha256_update_fu_298_ap_return_4;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sha256ctx_state_1_2_fu_130 <= 32'd3144134277;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln35_reg_866 == 1'd1) & (1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5)) | ((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln35_reg_866 == 1'd0)))) begin
        sha256ctx_state_2_2_fu_134 <= grp_sha256_update_fu_298_ap_return_5;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sha256ctx_state_2_2_fu_134 <= 32'd1013904242;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln35_reg_866 == 1'd1) & (1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5)) | ((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln35_reg_866 == 1'd0)))) begin
        sha256ctx_state_3_2_fu_138 <= grp_sha256_update_fu_298_ap_return_6;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sha256ctx_state_3_2_fu_138 <= 32'd2773480762;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln35_reg_866 == 1'd1) & (1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5)) | ((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln35_reg_866 == 1'd0)))) begin
        sha256ctx_state_4_2_fu_142 <= grp_sha256_update_fu_298_ap_return_7;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sha256ctx_state_4_2_fu_142 <= 32'd1359893119;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln35_reg_866 == 1'd1) & (1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5)) | ((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln35_reg_866 == 1'd0)))) begin
        sha256ctx_state_5_2_fu_146 <= grp_sha256_update_fu_298_ap_return_8;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sha256ctx_state_5_2_fu_146 <= 32'd2600822924;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln35_reg_866 == 1'd1) & (1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5)) | ((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln35_reg_866 == 1'd0)))) begin
        sha256ctx_state_6_2_fu_150 <= grp_sha256_update_fu_298_ap_return_9;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sha256ctx_state_6_2_fu_150 <= 32'd528734635;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln35_reg_866 == 1'd1) & (1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5)) | ((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln35_reg_866 == 1'd0)))) begin
        sha256ctx_state_7_2_fu_154 <= grp_sha256_update_fu_298_ap_return_10;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sha256ctx_state_7_2_fu_154 <= 32'd1541459225;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_7_reg_892 <= i_7_fu_706_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_8_reg_879 <= i_8_fu_646_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_reg_960 <= i_fu_747_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_fu_614_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln35_reg_866 <= icmp_ln35_fu_630_p2;
        trunc_ln35_reg_870 <= trunc_ln35_fu_636_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        n_0_load_reg_856 <= n_0_fu_110;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln37_fu_640_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | ((icmp_ln32_fu_614_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        reg_476 <= sha256ctx_datalen_1_fu_114;
        reg_482 <= sha256ctx_bitlen_0_2_fu_118;
        reg_488 <= sha256ctx_bitlen_1_2_fu_122;
        reg_494 <= sha256ctx_state_0_2_fu_126;
        reg_500 <= sha256ctx_state_1_2_fu_130;
        reg_506 <= sha256ctx_state_2_2_fu_134;
        reg_512 <= sha256ctx_state_3_2_fu_138;
        reg_518 <= sha256ctx_state_4_2_fu_142;
        reg_524 <= sha256ctx_state_5_2_fu_146;
        reg_530 <= sha256ctx_state_6_2_fu_150;
        reg_536 <= sha256ctx_state_7_2_fu_154;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_fu_701_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        sha256ctx_bitlen_0_1_reg_907 <= sha256ctx_bitlen_0_2_fu_118;
        sha256ctx_bitlen_1_1_reg_912 <= sha256ctx_bitlen_1_2_fu_122;
        sha256ctx_datalen_1_1_reg_902 <= sha256ctx_datalen_1_fu_114;
        sha256ctx_state_0_2_2_reg_917 <= sha256ctx_state_0_2_fu_126;
        sha256ctx_state_1_2_2_reg_922 <= sha256ctx_state_1_2_fu_130;
        sha256ctx_state_2_2_2_reg_927 <= sha256ctx_state_2_2_fu_134;
        sha256ctx_state_3_2_2_reg_932 <= sha256ctx_state_3_2_fu_138;
        sha256ctx_state_4_2_2_reg_937 <= sha256ctx_state_4_2_fu_142;
        sha256ctx_state_5_2_2_reg_942 <= sha256ctx_state_5_2_fu_146;
        sha256ctx_state_6_2_2_reg_947 <= sha256ctx_state_6_2_fu_150;
        sha256ctx_state_7_2_2_reg_952 <= sha256ctx_state_7_2_fu_154;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        trunc_ln32_reg_850 <= trunc_ln32_fu_542_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln56_fu_741_p2 == 1'd0))) begin
        zext_ln59_reg_965[5 : 0] <= zext_ln59_fu_753_p1[5 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln56_fu_741_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln56_fu_741_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        data_address0 = zext_ln47_2_fu_726_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        data_address0 = zext_ln38_2_fu_666_p1;
    end else begin
        data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6))) begin
        data_ce0 = 1'b1;
    end else begin
        data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        digest_ce0 = 1'b1;
    end else begin
        digest_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        digest_we0 = 1'b1;
    end else begin
        digest_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((icmp_ln35_reg_866 == 1'd1)) begin
            grp_sha256_update_fu_298_ctx_datalen_read = sha256ctx_datalen_1_1_reg_902;
        end else if ((icmp_ln35_reg_866 == 1'd0)) begin
            grp_sha256_update_fu_298_ctx_datalen_read = reg_476;
        end else begin
            grp_sha256_update_fu_298_ctx_datalen_read = 'bx;
        end
    end else begin
        grp_sha256_update_fu_298_ctx_datalen_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((icmp_ln35_reg_866 == 1'd1)) begin
            grp_sha256_update_fu_298_len = n_0_load_reg_856;
        end else if ((icmp_ln35_reg_866 == 1'd0)) begin
            grp_sha256_update_fu_298_len = 32'd64;
        end else begin
            grp_sha256_update_fu_298_len = 'bx;
        end
    end else begin
        grp_sha256_update_fu_298_len = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((icmp_ln35_reg_866 == 1'd1)) begin
            grp_sha256_update_fu_298_p_read1 = sha256ctx_bitlen_0_1_reg_907;
        end else if ((icmp_ln35_reg_866 == 1'd0)) begin
            grp_sha256_update_fu_298_p_read1 = reg_482;
        end else begin
            grp_sha256_update_fu_298_p_read1 = 'bx;
        end
    end else begin
        grp_sha256_update_fu_298_p_read1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((icmp_ln35_reg_866 == 1'd1)) begin
            grp_sha256_update_fu_298_p_read10 = sha256ctx_state_7_2_2_reg_952;
        end else if ((icmp_ln35_reg_866 == 1'd0)) begin
            grp_sha256_update_fu_298_p_read10 = reg_536;
        end else begin
            grp_sha256_update_fu_298_p_read10 = 'bx;
        end
    end else begin
        grp_sha256_update_fu_298_p_read10 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((icmp_ln35_reg_866 == 1'd1)) begin
            grp_sha256_update_fu_298_p_read2 = sha256ctx_bitlen_1_1_reg_912;
        end else if ((icmp_ln35_reg_866 == 1'd0)) begin
            grp_sha256_update_fu_298_p_read2 = reg_488;
        end else begin
            grp_sha256_update_fu_298_p_read2 = 'bx;
        end
    end else begin
        grp_sha256_update_fu_298_p_read2 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((icmp_ln35_reg_866 == 1'd1)) begin
            grp_sha256_update_fu_298_p_read3 = sha256ctx_state_0_2_2_reg_917;
        end else if ((icmp_ln35_reg_866 == 1'd0)) begin
            grp_sha256_update_fu_298_p_read3 = reg_494;
        end else begin
            grp_sha256_update_fu_298_p_read3 = 'bx;
        end
    end else begin
        grp_sha256_update_fu_298_p_read3 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((icmp_ln35_reg_866 == 1'd1)) begin
            grp_sha256_update_fu_298_p_read4 = sha256ctx_state_1_2_2_reg_922;
        end else if ((icmp_ln35_reg_866 == 1'd0)) begin
            grp_sha256_update_fu_298_p_read4 = reg_500;
        end else begin
            grp_sha256_update_fu_298_p_read4 = 'bx;
        end
    end else begin
        grp_sha256_update_fu_298_p_read4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((icmp_ln35_reg_866 == 1'd1)) begin
            grp_sha256_update_fu_298_p_read5 = sha256ctx_state_2_2_2_reg_927;
        end else if ((icmp_ln35_reg_866 == 1'd0)) begin
            grp_sha256_update_fu_298_p_read5 = reg_506;
        end else begin
            grp_sha256_update_fu_298_p_read5 = 'bx;
        end
    end else begin
        grp_sha256_update_fu_298_p_read5 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((icmp_ln35_reg_866 == 1'd1)) begin
            grp_sha256_update_fu_298_p_read6 = sha256ctx_state_3_2_2_reg_932;
        end else if ((icmp_ln35_reg_866 == 1'd0)) begin
            grp_sha256_update_fu_298_p_read6 = reg_512;
        end else begin
            grp_sha256_update_fu_298_p_read6 = 'bx;
        end
    end else begin
        grp_sha256_update_fu_298_p_read6 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((icmp_ln35_reg_866 == 1'd1)) begin
            grp_sha256_update_fu_298_p_read7 = sha256ctx_state_4_2_2_reg_937;
        end else if ((icmp_ln35_reg_866 == 1'd0)) begin
            grp_sha256_update_fu_298_p_read7 = reg_518;
        end else begin
            grp_sha256_update_fu_298_p_read7 = 'bx;
        end
    end else begin
        grp_sha256_update_fu_298_p_read7 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((icmp_ln35_reg_866 == 1'd1)) begin
            grp_sha256_update_fu_298_p_read8 = sha256ctx_state_5_2_2_reg_942;
        end else if ((icmp_ln35_reg_866 == 1'd0)) begin
            grp_sha256_update_fu_298_p_read8 = reg_524;
        end else begin
            grp_sha256_update_fu_298_p_read8 = 'bx;
        end
    end else begin
        grp_sha256_update_fu_298_p_read8 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((icmp_ln35_reg_866 == 1'd1)) begin
            grp_sha256_update_fu_298_p_read9 = sha256ctx_state_6_2_2_reg_947;
        end else if ((icmp_ln35_reg_866 == 1'd0)) begin
            grp_sha256_update_fu_298_p_read9 = reg_530;
        end else begin
            grp_sha256_update_fu_298_p_read9 = 'bx;
        end
    end else begin
        grp_sha256_update_fu_298_p_read9 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        seg_buf_address0 = zext_ln59_fu_753_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        seg_buf_address0 = zext_ln47_fu_736_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        seg_buf_address0 = zext_ln38_fu_681_p1;
    end else if ((((icmp_ln35_reg_866 == 1'd1) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == ap_CS_fsm_state5) & (icmp_ln35_reg_866 == 1'd0)))) begin
        seg_buf_address0 = grp_sha256_update_fu_298_data_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        seg_buf_address0 = grp_sha256_final_fu_279_hash_address0;
    end else begin
        seg_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state9))) begin
        seg_buf_ce0 = 1'b1;
    end else if ((((icmp_ln35_reg_866 == 1'd1) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == ap_CS_fsm_state5) & (icmp_ln35_reg_866 == 1'd0)))) begin
        seg_buf_ce0 = grp_sha256_update_fu_298_data_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        seg_buf_ce0 = grp_sha256_final_fu_279_hash_ce0;
    end else begin
        seg_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        seg_buf_ce1 = grp_sha256_final_fu_279_hash_ce1;
    end else begin
        seg_buf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4))) begin
        seg_buf_d0 = data_q0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        seg_buf_d0 = grp_sha256_final_fu_279_hash_d0;
    end else begin
        seg_buf_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4))) begin
        seg_buf_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        seg_buf_we0 = grp_sha256_final_fu_279_hash_we0;
    end else begin
        seg_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        seg_buf_we1 = grp_sha256_final_fu_279_hash_we1;
    end else begin
        seg_buf_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln35_reg_866 == 1'd1) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == ap_CS_fsm_state5) & (icmp_ln35_reg_866 == 1'd0)))) begin
        sha256ctx_data_address0 = grp_sha256_update_fu_298_ctx_data_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sha256ctx_data_address0 = grp_sha256_final_fu_279_ctx_data_address0;
    end else begin
        sha256ctx_data_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln35_reg_866 == 1'd1) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == ap_CS_fsm_state5) & (icmp_ln35_reg_866 == 1'd0)))) begin
        sha256ctx_data_address1 = grp_sha256_update_fu_298_ctx_data_address1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sha256ctx_data_address1 = grp_sha256_final_fu_279_ctx_data_address1;
    end else begin
        sha256ctx_data_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln35_reg_866 == 1'd1) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == ap_CS_fsm_state5) & (icmp_ln35_reg_866 == 1'd0)))) begin
        sha256ctx_data_ce0 = grp_sha256_update_fu_298_ctx_data_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sha256ctx_data_ce0 = grp_sha256_final_fu_279_ctx_data_ce0;
    end else begin
        sha256ctx_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln35_reg_866 == 1'd1) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == ap_CS_fsm_state5) & (icmp_ln35_reg_866 == 1'd0)))) begin
        sha256ctx_data_ce1 = grp_sha256_update_fu_298_ctx_data_ce1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sha256ctx_data_ce1 = grp_sha256_final_fu_279_ctx_data_ce1;
    end else begin
        sha256ctx_data_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln35_reg_866 == 1'd1) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == ap_CS_fsm_state5) & (icmp_ln35_reg_866 == 1'd0)))) begin
        sha256ctx_data_d0 = grp_sha256_update_fu_298_ctx_data_d0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sha256ctx_data_d0 = grp_sha256_final_fu_279_ctx_data_d0;
    end else begin
        sha256ctx_data_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln35_reg_866 == 1'd1) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == ap_CS_fsm_state5) & (icmp_ln35_reg_866 == 1'd0)))) begin
        sha256ctx_data_we0 = grp_sha256_update_fu_298_ctx_data_we0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sha256ctx_data_we0 = grp_sha256_final_fu_279_ctx_data_we0;
    end else begin
        sha256ctx_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sha256ctx_data_we1 = grp_sha256_final_fu_279_ctx_data_we1;
    end else begin
        sha256ctx_data_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln35_fu_630_p2 == 1'd1) & (icmp_ln32_fu_614_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if (((icmp_ln32_fu_614_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln35_fu_630_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln37_fu_640_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln45_fu_701_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            if (((grp_sha256_final_fu_279_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((icmp_ln56_fu_741_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln38_1_fu_661_p2 = (add_ln38_fu_656_p2 + trunc_ln32_reg_850);

assign add_ln38_fu_656_p2 = (trunc_ln35_reg_870 + zext_ln38_1_fu_652_p1);

assign add_ln47_1_fu_721_p2 = (add_ln47_fu_716_p2 + trunc_ln32_reg_850);

assign add_ln47_fu_716_p2 = (trunc_ln35_reg_870 + zext_ln47_1_fu_712_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state5_on_subcall_done = (((icmp_ln35_reg_866 == 1'd1) & (grp_sha256_update_fu_298_ap_done == 1'b0)) | ((grp_sha256_update_fu_298_ap_done == 1'b0) & (icmp_ln35_reg_866 == 1'd0)));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign digest_address0 = zext_ln59_reg_965;

assign grp_sha256_final_fu_279_ap_start = grp_sha256_final_fu_279_ap_start_reg;

assign grp_sha256_update_fu_298_ap_start = grp_sha256_update_fu_298_ap_start_reg;

assign i_7_fu_706_p2 = (i_1_reg_256 + 6'd1);

assign i_8_fu_646_p2 = (i_0_reg_244 + 7'd1);

assign i_fu_747_p2 = (i_2_reg_268 + 6'd1);

assign icmp_ln32_fu_614_p2 = ((n_0_fu_110 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_630_p2 = ((tmp_3_fu_620_p4 == 26'd0) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_640_p2 = ((i_0_reg_244 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_701_p2 = ((zext_ln45_fu_697_p1 == n_0_load_reg_856) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_741_p2 = ((i_2_reg_268 == 6'd32) ? 1'b1 : 1'b0);

assign n_fu_671_p2 = ($signed(n_0_load_reg_856) + $signed(32'd4294967232));

assign seg_offset_fu_686_p2 = (seg_offset_1_fu_158 + 32'd64);

assign tmp_3_fu_620_p4 = {{n_0_fu_110[31:6]}};

assign trunc_ln32_fu_542_p1 = base_offset[9:0];

assign trunc_ln35_fu_636_p1 = seg_offset_1_fu_158[9:0];

assign zext_ln38_1_fu_652_p1 = i_0_reg_244;

assign zext_ln38_2_fu_666_p1 = add_ln38_1_fu_661_p2;

assign zext_ln38_fu_681_p1 = i_0_reg_244;

assign zext_ln45_fu_697_p1 = i_1_reg_256;

assign zext_ln47_1_fu_712_p1 = i_1_reg_256;

assign zext_ln47_2_fu_726_p1 = add_ln47_1_fu_721_p2;

assign zext_ln47_fu_736_p1 = i_1_reg_256;

assign zext_ln59_fu_753_p1 = i_2_reg_268;

always @ (posedge ap_clk) begin
    zext_ln59_reg_965[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //sha256
