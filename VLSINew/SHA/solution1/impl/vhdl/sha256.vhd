-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha256 is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 10;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of sha256 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sha256,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.522000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=12,HLS_SYN_DSP=0,HLS_SYN_FF=4410,HLS_SYN_LUT=6303,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_6A09E667 : STD_LOGIC_VECTOR (31 downto 0) := "01101010000010011110011001100111";
    constant ap_const_lv32_BB67AE85 : STD_LOGIC_VECTOR (31 downto 0) := "10111011011001111010111010000101";
    constant ap_const_lv32_3C6EF372 : STD_LOGIC_VECTOR (31 downto 0) := "00111100011011101111001101110010";
    constant ap_const_lv32_A54FF53A : STD_LOGIC_VECTOR (31 downto 0) := "10100101010011111111010100111010";
    constant ap_const_lv32_510E527F : STD_LOGIC_VECTOR (31 downto 0) := "01010001000011100101001001111111";
    constant ap_const_lv32_9B05688C : STD_LOGIC_VECTOR (31 downto 0) := "10011011000001010110100010001100";
    constant ap_const_lv32_1F83D9AB : STD_LOGIC_VECTOR (31 downto 0) := "00011111100000111101100110101011";
    constant ap_const_lv32_5BE0CD19 : STD_LOGIC_VECTOR (31 downto 0) := "01011011111000001100110100011001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_FFFFFFC0 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal data_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_ce0 : STD_LOGIC;
    signal data_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal base_offset : STD_LOGIC_VECTOR (31 downto 0);
    signal bytes : STD_LOGIC_VECTOR (31 downto 0);
    signal digest_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal digest_ce0 : STD_LOGIC;
    signal digest_we0 : STD_LOGIC;
    signal reg_476 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln32_fu_614_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln37_fu_640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_482 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_488 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_494 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_500 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_506 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_512 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_518 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_524 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_530 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_536 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln32_fu_542_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln32_reg_850 : STD_LOGIC_VECTOR (9 downto 0);
    signal n_0_load_reg_856 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln35_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_reg_866 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln35_fu_636_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln35_reg_870 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_8_fu_646_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_8_reg_879 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_7_fu_706_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_7_reg_892 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln45_fu_701_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sha256ctx_datalen_1_1_reg_902 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256ctx_bitlen_0_1_reg_907 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256ctx_bitlen_1_1_reg_912 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256ctx_state_0_2_2_reg_917 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256ctx_state_1_2_2_reg_922 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256ctx_state_2_2_2_reg_927 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256ctx_state_3_2_2_reg_932 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256ctx_state_4_2_2_reg_937 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256ctx_state_5_2_2_reg_942 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256ctx_state_6_2_2_reg_947 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256ctx_state_7_2_2_reg_952 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_747_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_960 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal zext_ln59_fu_753_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln59_reg_965 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln56_fu_741_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal seg_buf_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal seg_buf_ce0 : STD_LOGIC;
    signal seg_buf_we0 : STD_LOGIC;
    signal seg_buf_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal seg_buf_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal seg_buf_ce1 : STD_LOGIC;
    signal seg_buf_we1 : STD_LOGIC;
    signal sha256ctx_data_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal sha256ctx_data_ce0 : STD_LOGIC;
    signal sha256ctx_data_we0 : STD_LOGIC;
    signal sha256ctx_data_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sha256ctx_data_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sha256ctx_data_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sha256ctx_data_ce1 : STD_LOGIC;
    signal sha256ctx_data_we1 : STD_LOGIC;
    signal sha256ctx_data_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_final_fu_279_ap_start : STD_LOGIC;
    signal grp_sha256_final_fu_279_ap_done : STD_LOGIC;
    signal grp_sha256_final_fu_279_ap_idle : STD_LOGIC;
    signal grp_sha256_final_fu_279_ap_ready : STD_LOGIC;
    signal grp_sha256_final_fu_279_ctx_data_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_final_fu_279_ctx_data_ce0 : STD_LOGIC;
    signal grp_sha256_final_fu_279_ctx_data_we0 : STD_LOGIC;
    signal grp_sha256_final_fu_279_ctx_data_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_final_fu_279_ctx_data_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_final_fu_279_ctx_data_ce1 : STD_LOGIC;
    signal grp_sha256_final_fu_279_ctx_data_we1 : STD_LOGIC;
    signal grp_sha256_final_fu_279_ctx_data_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_final_fu_279_hash_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_final_fu_279_hash_ce0 : STD_LOGIC;
    signal grp_sha256_final_fu_279_hash_we0 : STD_LOGIC;
    signal grp_sha256_final_fu_279_hash_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_final_fu_279_hash_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_final_fu_279_hash_ce1 : STD_LOGIC;
    signal grp_sha256_final_fu_279_hash_we1 : STD_LOGIC;
    signal grp_sha256_final_fu_279_hash_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_update_fu_298_ap_start : STD_LOGIC;
    signal grp_sha256_update_fu_298_ap_done : STD_LOGIC;
    signal grp_sha256_update_fu_298_ap_idle : STD_LOGIC;
    signal grp_sha256_update_fu_298_ap_ready : STD_LOGIC;
    signal grp_sha256_update_fu_298_ctx_data_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_update_fu_298_ctx_data_ce0 : STD_LOGIC;
    signal grp_sha256_update_fu_298_ctx_data_we0 : STD_LOGIC;
    signal grp_sha256_update_fu_298_ctx_data_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_update_fu_298_ctx_data_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_update_fu_298_ctx_data_ce1 : STD_LOGIC;
    signal grp_sha256_update_fu_298_ctx_datalen_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_298_p_read1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_298_p_read2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_298_p_read3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_298_p_read4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_298_p_read5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_298_p_read6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_298_p_read7 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_298_p_read8 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_298_p_read9 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_298_p_read10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_298_data_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_update_fu_298_data_ce0 : STD_LOGIC;
    signal grp_sha256_update_fu_298_len : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_298_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_298_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_298_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_298_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_298_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_298_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_298_ap_return_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_298_ap_return_7 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_298_ap_return_8 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_298_ap_return_9 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_298_ap_return_10 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_244 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_1_reg_256 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_2_reg_268 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_sha256_final_fu_279_ap_start_reg : STD_LOGIC := '0';
    signal grp_sha256_update_fu_298_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln38_2_fu_666_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_fu_681_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln47_2_fu_726_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln47_fu_736_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal n_0_fu_110 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_fu_671_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256ctx_datalen_1_fu_114 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state5_on_subcall_done : BOOLEAN;
    signal sha256ctx_bitlen_0_2_fu_118 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256ctx_bitlen_1_2_fu_122 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256ctx_state_0_2_fu_126 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256ctx_state_1_2_fu_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256ctx_state_2_2_fu_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256ctx_state_3_2_fu_138 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256ctx_state_4_2_fu_142 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256ctx_state_5_2_fu_146 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256ctx_state_6_2_fu_150 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256ctx_state_7_2_fu_154 : STD_LOGIC_VECTOR (31 downto 0);
    signal seg_offset_1_fu_158 : STD_LOGIC_VECTOR (31 downto 0);
    signal seg_offset_fu_686_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_620_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln38_1_fu_652_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln38_fu_656_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln38_1_fu_661_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln45_fu_697_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln47_1_fu_712_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln47_fu_716_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln47_1_fu_721_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);

    component sha256_final IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ctx_data_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ctx_data_ce0 : OUT STD_LOGIC;
        ctx_data_we0 : OUT STD_LOGIC;
        ctx_data_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctx_data_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ctx_data_ce1 : OUT STD_LOGIC;
        ctx_data_we1 : OUT STD_LOGIC;
        ctx_data_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_data_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctx_datalen_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_bitlen_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read6 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read8 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read9 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read10 : IN STD_LOGIC_VECTOR (31 downto 0);
        hash_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        hash_ce0 : OUT STD_LOGIC;
        hash_we0 : OUT STD_LOGIC;
        hash_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        hash_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        hash_ce1 : OUT STD_LOGIC;
        hash_we1 : OUT STD_LOGIC;
        hash_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sha256_update IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ctx_data_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ctx_data_ce0 : OUT STD_LOGIC;
        ctx_data_we0 : OUT STD_LOGIC;
        ctx_data_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctx_data_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ctx_data_ce1 : OUT STD_LOGIC;
        ctx_data_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctx_datalen_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read6 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read8 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read9 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read10 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        data_ce0 : OUT STD_LOGIC;
        data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        len : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sha256_seg_buf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sha256_sha256ctx_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sha256_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        data_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        data_ce0 : IN STD_LOGIC;
        data_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        base_offset : OUT STD_LOGIC_VECTOR (31 downto 0);
        bytes : OUT STD_LOGIC_VECTOR (31 downto 0);
        digest_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        digest_ce0 : IN STD_LOGIC;
        digest_we0 : IN STD_LOGIC;
        digest_d0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    sha256_AXILiteS_s_axi_U : component sha256_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        data_address0 => data_address0,
        data_ce0 => data_ce0,
        data_q0 => data_q0,
        base_offset => base_offset,
        bytes => bytes,
        digest_address0 => digest_address0,
        digest_ce0 => digest_ce0,
        digest_we0 => digest_we0,
        digest_d0 => seg_buf_q0);

    seg_buf_U : component sha256_seg_buf
    generic map (
        DataWidth => 8,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => seg_buf_address0,
        ce0 => seg_buf_ce0,
        we0 => seg_buf_we0,
        d0 => seg_buf_d0,
        q0 => seg_buf_q0,
        address1 => grp_sha256_final_fu_279_hash_address1,
        ce1 => seg_buf_ce1,
        we1 => seg_buf_we1,
        d1 => grp_sha256_final_fu_279_hash_d1);

    sha256ctx_data_U : component sha256_sha256ctx_bkb
    generic map (
        DataWidth => 8,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sha256ctx_data_address0,
        ce0 => sha256ctx_data_ce0,
        we0 => sha256ctx_data_we0,
        d0 => sha256ctx_data_d0,
        q0 => sha256ctx_data_q0,
        address1 => sha256ctx_data_address1,
        ce1 => sha256ctx_data_ce1,
        we1 => sha256ctx_data_we1,
        d1 => grp_sha256_final_fu_279_ctx_data_d1,
        q1 => sha256ctx_data_q1);

    grp_sha256_final_fu_279 : component sha256_final
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_sha256_final_fu_279_ap_start,
        ap_done => grp_sha256_final_fu_279_ap_done,
        ap_idle => grp_sha256_final_fu_279_ap_idle,
        ap_ready => grp_sha256_final_fu_279_ap_ready,
        ctx_data_address0 => grp_sha256_final_fu_279_ctx_data_address0,
        ctx_data_ce0 => grp_sha256_final_fu_279_ctx_data_ce0,
        ctx_data_we0 => grp_sha256_final_fu_279_ctx_data_we0,
        ctx_data_d0 => grp_sha256_final_fu_279_ctx_data_d0,
        ctx_data_q0 => sha256ctx_data_q0,
        ctx_data_address1 => grp_sha256_final_fu_279_ctx_data_address1,
        ctx_data_ce1 => grp_sha256_final_fu_279_ctx_data_ce1,
        ctx_data_we1 => grp_sha256_final_fu_279_ctx_data_we1,
        ctx_data_d1 => grp_sha256_final_fu_279_ctx_data_d1,
        ctx_data_q1 => sha256ctx_data_q1,
        ctx_datalen_read => reg_476,
        ctx_bitlen_0_read => reg_482,
        p_read3 => reg_488,
        p_read2 => reg_494,
        p_read4 => reg_500,
        p_read5 => reg_506,
        p_read6 => reg_512,
        p_read7 => reg_518,
        p_read8 => reg_524,
        p_read9 => reg_530,
        p_read10 => reg_536,
        hash_address0 => grp_sha256_final_fu_279_hash_address0,
        hash_ce0 => grp_sha256_final_fu_279_hash_ce0,
        hash_we0 => grp_sha256_final_fu_279_hash_we0,
        hash_d0 => grp_sha256_final_fu_279_hash_d0,
        hash_address1 => grp_sha256_final_fu_279_hash_address1,
        hash_ce1 => grp_sha256_final_fu_279_hash_ce1,
        hash_we1 => grp_sha256_final_fu_279_hash_we1,
        hash_d1 => grp_sha256_final_fu_279_hash_d1);

    grp_sha256_update_fu_298 : component sha256_update
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_sha256_update_fu_298_ap_start,
        ap_done => grp_sha256_update_fu_298_ap_done,
        ap_idle => grp_sha256_update_fu_298_ap_idle,
        ap_ready => grp_sha256_update_fu_298_ap_ready,
        ctx_data_address0 => grp_sha256_update_fu_298_ctx_data_address0,
        ctx_data_ce0 => grp_sha256_update_fu_298_ctx_data_ce0,
        ctx_data_we0 => grp_sha256_update_fu_298_ctx_data_we0,
        ctx_data_d0 => grp_sha256_update_fu_298_ctx_data_d0,
        ctx_data_q0 => sha256ctx_data_q0,
        ctx_data_address1 => grp_sha256_update_fu_298_ctx_data_address1,
        ctx_data_ce1 => grp_sha256_update_fu_298_ctx_data_ce1,
        ctx_data_q1 => sha256ctx_data_q1,
        ctx_datalen_read => grp_sha256_update_fu_298_ctx_datalen_read,
        p_read1 => grp_sha256_update_fu_298_p_read1,
        p_read2 => grp_sha256_update_fu_298_p_read2,
        p_read3 => grp_sha256_update_fu_298_p_read3,
        p_read4 => grp_sha256_update_fu_298_p_read4,
        p_read5 => grp_sha256_update_fu_298_p_read5,
        p_read6 => grp_sha256_update_fu_298_p_read6,
        p_read7 => grp_sha256_update_fu_298_p_read7,
        p_read8 => grp_sha256_update_fu_298_p_read8,
        p_read9 => grp_sha256_update_fu_298_p_read9,
        p_read10 => grp_sha256_update_fu_298_p_read10,
        data_address0 => grp_sha256_update_fu_298_data_address0,
        data_ce0 => grp_sha256_update_fu_298_data_ce0,
        data_q0 => seg_buf_q0,
        len => grp_sha256_update_fu_298_len,
        ap_return_0 => grp_sha256_update_fu_298_ap_return_0,
        ap_return_1 => grp_sha256_update_fu_298_ap_return_1,
        ap_return_2 => grp_sha256_update_fu_298_ap_return_2,
        ap_return_3 => grp_sha256_update_fu_298_ap_return_3,
        ap_return_4 => grp_sha256_update_fu_298_ap_return_4,
        ap_return_5 => grp_sha256_update_fu_298_ap_return_5,
        ap_return_6 => grp_sha256_update_fu_298_ap_return_6,
        ap_return_7 => grp_sha256_update_fu_298_ap_return_7,
        ap_return_8 => grp_sha256_update_fu_298_ap_return_8,
        ap_return_9 => grp_sha256_update_fu_298_ap_return_9,
        ap_return_10 => grp_sha256_update_fu_298_ap_return_10);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_sha256_final_fu_279_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_sha256_final_fu_279_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln32_fu_614_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_sha256_final_fu_279_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sha256_final_fu_279_ap_ready = ap_const_logic_1)) then 
                    grp_sha256_final_fu_279_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sha256_update_fu_298_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_sha256_update_fu_298_ap_start_reg <= ap_const_logic_0;
            else
                if ((((icmp_ln37_fu_640_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((icmp_ln45_fu_701_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
                    grp_sha256_update_fu_298_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sha256_update_fu_298_ap_ready = ap_const_logic_1)) then 
                    grp_sha256_update_fu_298_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_fu_614_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln35_fu_630_p2 = ap_const_lv1_0))) then 
                i_0_reg_244 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_0_reg_244 <= i_8_reg_879;
            end if; 
        end if;
    end process;

    i_1_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_fu_630_p2 = ap_const_lv1_1) and (icmp_ln32_fu_614_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_1_reg_256 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_1_reg_256 <= i_7_reg_892;
            end if; 
        end if;
    end process;

    i_2_reg_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_2_reg_268 <= i_reg_960;
            elsif (((grp_sha256_final_fu_279_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i_2_reg_268 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    n_0_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_fu_701_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                n_0_fu_110 <= ap_const_lv32_0;
            elsif (((icmp_ln37_fu_640_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                n_0_fu_110 <= n_fu_671_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                n_0_fu_110 <= bytes;
            end if; 
        end if;
    end process;

    seg_offset_1_fu_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln35_reg_866 = ap_const_lv1_0))) then 
                seg_offset_1_fu_158 <= seg_offset_fu_686_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                seg_offset_1_fu_158 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sha256ctx_bitlen_0_2_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln35_reg_866 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln35_reg_866 = ap_const_lv1_0)))) then 
                sha256ctx_bitlen_0_2_fu_118 <= grp_sha256_update_fu_298_ap_return_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                sha256ctx_bitlen_0_2_fu_118 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sha256ctx_bitlen_1_2_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln35_reg_866 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln35_reg_866 = ap_const_lv1_0)))) then 
                sha256ctx_bitlen_1_2_fu_122 <= grp_sha256_update_fu_298_ap_return_2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                sha256ctx_bitlen_1_2_fu_122 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sha256ctx_datalen_1_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln35_reg_866 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln35_reg_866 = ap_const_lv1_0)))) then 
                sha256ctx_datalen_1_fu_114 <= grp_sha256_update_fu_298_ap_return_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                sha256ctx_datalen_1_fu_114 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sha256ctx_state_0_2_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln35_reg_866 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln35_reg_866 = ap_const_lv1_0)))) then 
                sha256ctx_state_0_2_fu_126 <= grp_sha256_update_fu_298_ap_return_3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                sha256ctx_state_0_2_fu_126 <= ap_const_lv32_6A09E667;
            end if; 
        end if;
    end process;

    sha256ctx_state_1_2_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln35_reg_866 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln35_reg_866 = ap_const_lv1_0)))) then 
                sha256ctx_state_1_2_fu_130 <= grp_sha256_update_fu_298_ap_return_4;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                sha256ctx_state_1_2_fu_130 <= ap_const_lv32_BB67AE85;
            end if; 
        end if;
    end process;

    sha256ctx_state_2_2_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln35_reg_866 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln35_reg_866 = ap_const_lv1_0)))) then 
                sha256ctx_state_2_2_fu_134 <= grp_sha256_update_fu_298_ap_return_5;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                sha256ctx_state_2_2_fu_134 <= ap_const_lv32_3C6EF372;
            end if; 
        end if;
    end process;

    sha256ctx_state_3_2_fu_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln35_reg_866 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln35_reg_866 = ap_const_lv1_0)))) then 
                sha256ctx_state_3_2_fu_138 <= grp_sha256_update_fu_298_ap_return_6;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                sha256ctx_state_3_2_fu_138 <= ap_const_lv32_A54FF53A;
            end if; 
        end if;
    end process;

    sha256ctx_state_4_2_fu_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln35_reg_866 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln35_reg_866 = ap_const_lv1_0)))) then 
                sha256ctx_state_4_2_fu_142 <= grp_sha256_update_fu_298_ap_return_7;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                sha256ctx_state_4_2_fu_142 <= ap_const_lv32_510E527F;
            end if; 
        end if;
    end process;

    sha256ctx_state_5_2_fu_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln35_reg_866 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln35_reg_866 = ap_const_lv1_0)))) then 
                sha256ctx_state_5_2_fu_146 <= grp_sha256_update_fu_298_ap_return_8;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                sha256ctx_state_5_2_fu_146 <= ap_const_lv32_9B05688C;
            end if; 
        end if;
    end process;

    sha256ctx_state_6_2_fu_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln35_reg_866 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln35_reg_866 = ap_const_lv1_0)))) then 
                sha256ctx_state_6_2_fu_150 <= grp_sha256_update_fu_298_ap_return_9;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                sha256ctx_state_6_2_fu_150 <= ap_const_lv32_1F83D9AB;
            end if; 
        end if;
    end process;

    sha256ctx_state_7_2_fu_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln35_reg_866 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln35_reg_866 = ap_const_lv1_0)))) then 
                sha256ctx_state_7_2_fu_154 <= grp_sha256_update_fu_298_ap_return_10;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                sha256ctx_state_7_2_fu_154 <= ap_const_lv32_5BE0CD19;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_7_reg_892 <= i_7_fu_706_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_8_reg_879 <= i_8_fu_646_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                i_reg_960 <= i_fu_747_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_fu_614_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln35_reg_866 <= icmp_ln35_fu_630_p2;
                trunc_ln35_reg_870 <= trunc_ln35_fu_636_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                n_0_load_reg_856 <= n_0_fu_110;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln37_fu_640_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((icmp_ln32_fu_614_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then
                reg_476 <= sha256ctx_datalen_1_fu_114;
                reg_482 <= sha256ctx_bitlen_0_2_fu_118;
                reg_488 <= sha256ctx_bitlen_1_2_fu_122;
                reg_494 <= sha256ctx_state_0_2_fu_126;
                reg_500 <= sha256ctx_state_1_2_fu_130;
                reg_506 <= sha256ctx_state_2_2_fu_134;
                reg_512 <= sha256ctx_state_3_2_fu_138;
                reg_518 <= sha256ctx_state_4_2_fu_142;
                reg_524 <= sha256ctx_state_5_2_fu_146;
                reg_530 <= sha256ctx_state_6_2_fu_150;
                reg_536 <= sha256ctx_state_7_2_fu_154;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_fu_701_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                sha256ctx_bitlen_0_1_reg_907 <= sha256ctx_bitlen_0_2_fu_118;
                sha256ctx_bitlen_1_1_reg_912 <= sha256ctx_bitlen_1_2_fu_122;
                sha256ctx_datalen_1_1_reg_902 <= sha256ctx_datalen_1_fu_114;
                sha256ctx_state_0_2_2_reg_917 <= sha256ctx_state_0_2_fu_126;
                sha256ctx_state_1_2_2_reg_922 <= sha256ctx_state_1_2_fu_130;
                sha256ctx_state_2_2_2_reg_927 <= sha256ctx_state_2_2_fu_134;
                sha256ctx_state_3_2_2_reg_932 <= sha256ctx_state_3_2_fu_138;
                sha256ctx_state_4_2_2_reg_937 <= sha256ctx_state_4_2_fu_142;
                sha256ctx_state_5_2_2_reg_942 <= sha256ctx_state_5_2_fu_146;
                sha256ctx_state_6_2_2_reg_947 <= sha256ctx_state_6_2_fu_150;
                sha256ctx_state_7_2_2_reg_952 <= sha256ctx_state_7_2_fu_154;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                trunc_ln32_reg_850 <= trunc_ln32_fu_542_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln56_fu_741_p2 = ap_const_lv1_0))) then
                    zext_ln59_reg_965(5 downto 0) <= zext_ln59_fu_753_p1(5 downto 0);
            end if;
        end if;
    end process;
    zext_ln59_reg_965(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln32_fu_614_p2, ap_CS_fsm_state3, icmp_ln37_fu_640_p2, icmp_ln35_fu_630_p2, ap_CS_fsm_state6, icmp_ln45_fu_701_p2, ap_CS_fsm_state9, icmp_ln56_fu_741_p2, grp_sha256_final_fu_279_ap_done, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_block_state5_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln35_fu_630_p2 = ap_const_lv1_1) and (icmp_ln32_fu_614_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                elsif (((icmp_ln32_fu_614_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln35_fu_630_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln37_fu_640_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln45_fu_701_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                if (((grp_sha256_final_fu_279_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln56_fu_741_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln38_1_fu_661_p2 <= std_logic_vector(unsigned(add_ln38_fu_656_p2) + unsigned(trunc_ln32_reg_850));
    add_ln38_fu_656_p2 <= std_logic_vector(unsigned(trunc_ln35_reg_870) + unsigned(zext_ln38_1_fu_652_p1));
    add_ln47_1_fu_721_p2 <= std_logic_vector(unsigned(add_ln47_fu_716_p2) + unsigned(trunc_ln32_reg_850));
    add_ln47_fu_716_p2 <= std_logic_vector(unsigned(trunc_ln35_reg_870) + unsigned(zext_ln47_1_fu_712_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state5_on_subcall_done_assign_proc : process(icmp_ln35_reg_866, grp_sha256_update_fu_298_ap_done)
    begin
                ap_block_state5_on_subcall_done <= (((icmp_ln35_reg_866 = ap_const_lv1_1) and (grp_sha256_update_fu_298_ap_done = ap_const_logic_0)) or ((grp_sha256_update_fu_298_ap_done = ap_const_logic_0) and (icmp_ln35_reg_866 = ap_const_lv1_0)));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state9, icmp_ln56_fu_741_p2)
    begin
        if (((icmp_ln56_fu_741_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9, icmp_ln56_fu_741_p2)
    begin
        if (((icmp_ln56_fu_741_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    data_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, zext_ln38_2_fu_666_p1, zext_ln47_2_fu_726_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data_address0 <= zext_ln47_2_fu_726_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            data_address0 <= zext_ln38_2_fu_666_p1(8 - 1 downto 0);
        else 
            data_address0 <= "XXXXXXXX";
        end if; 
    end process;


    data_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            data_ce0 <= ap_const_logic_1;
        else 
            data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    digest_address0 <= zext_ln59_reg_965(5 - 1 downto 0);

    digest_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            digest_ce0 <= ap_const_logic_1;
        else 
            digest_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    digest_we0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            digest_we0 <= ap_const_logic_1;
        else 
            digest_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_sha256_final_fu_279_ap_start <= grp_sha256_final_fu_279_ap_start_reg;
    grp_sha256_update_fu_298_ap_start <= grp_sha256_update_fu_298_ap_start_reg;

    grp_sha256_update_fu_298_ctx_datalen_read_assign_proc : process(reg_476, icmp_ln35_reg_866, sha256ctx_datalen_1_1_reg_902, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
            if ((icmp_ln35_reg_866 = ap_const_lv1_1)) then 
                grp_sha256_update_fu_298_ctx_datalen_read <= sha256ctx_datalen_1_1_reg_902;
            elsif ((icmp_ln35_reg_866 = ap_const_lv1_0)) then 
                grp_sha256_update_fu_298_ctx_datalen_read <= reg_476;
            else 
                grp_sha256_update_fu_298_ctx_datalen_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_sha256_update_fu_298_ctx_datalen_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_sha256_update_fu_298_len_assign_proc : process(n_0_load_reg_856, icmp_ln35_reg_866, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
            if ((icmp_ln35_reg_866 = ap_const_lv1_1)) then 
                grp_sha256_update_fu_298_len <= n_0_load_reg_856;
            elsif ((icmp_ln35_reg_866 = ap_const_lv1_0)) then 
                grp_sha256_update_fu_298_len <= ap_const_lv32_40;
            else 
                grp_sha256_update_fu_298_len <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_sha256_update_fu_298_len <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_sha256_update_fu_298_p_read1_assign_proc : process(reg_482, icmp_ln35_reg_866, sha256ctx_bitlen_0_1_reg_907, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
            if ((icmp_ln35_reg_866 = ap_const_lv1_1)) then 
                grp_sha256_update_fu_298_p_read1 <= sha256ctx_bitlen_0_1_reg_907;
            elsif ((icmp_ln35_reg_866 = ap_const_lv1_0)) then 
                grp_sha256_update_fu_298_p_read1 <= reg_482;
            else 
                grp_sha256_update_fu_298_p_read1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_sha256_update_fu_298_p_read1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_sha256_update_fu_298_p_read10_assign_proc : process(reg_536, icmp_ln35_reg_866, sha256ctx_state_7_2_2_reg_952, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
            if ((icmp_ln35_reg_866 = ap_const_lv1_1)) then 
                grp_sha256_update_fu_298_p_read10 <= sha256ctx_state_7_2_2_reg_952;
            elsif ((icmp_ln35_reg_866 = ap_const_lv1_0)) then 
                grp_sha256_update_fu_298_p_read10 <= reg_536;
            else 
                grp_sha256_update_fu_298_p_read10 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_sha256_update_fu_298_p_read10 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_sha256_update_fu_298_p_read2_assign_proc : process(reg_488, icmp_ln35_reg_866, sha256ctx_bitlen_1_1_reg_912, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
            if ((icmp_ln35_reg_866 = ap_const_lv1_1)) then 
                grp_sha256_update_fu_298_p_read2 <= sha256ctx_bitlen_1_1_reg_912;
            elsif ((icmp_ln35_reg_866 = ap_const_lv1_0)) then 
                grp_sha256_update_fu_298_p_read2 <= reg_488;
            else 
                grp_sha256_update_fu_298_p_read2 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_sha256_update_fu_298_p_read2 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_sha256_update_fu_298_p_read3_assign_proc : process(reg_494, icmp_ln35_reg_866, sha256ctx_state_0_2_2_reg_917, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
            if ((icmp_ln35_reg_866 = ap_const_lv1_1)) then 
                grp_sha256_update_fu_298_p_read3 <= sha256ctx_state_0_2_2_reg_917;
            elsif ((icmp_ln35_reg_866 = ap_const_lv1_0)) then 
                grp_sha256_update_fu_298_p_read3 <= reg_494;
            else 
                grp_sha256_update_fu_298_p_read3 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_sha256_update_fu_298_p_read3 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_sha256_update_fu_298_p_read4_assign_proc : process(reg_500, icmp_ln35_reg_866, sha256ctx_state_1_2_2_reg_922, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
            if ((icmp_ln35_reg_866 = ap_const_lv1_1)) then 
                grp_sha256_update_fu_298_p_read4 <= sha256ctx_state_1_2_2_reg_922;
            elsif ((icmp_ln35_reg_866 = ap_const_lv1_0)) then 
                grp_sha256_update_fu_298_p_read4 <= reg_500;
            else 
                grp_sha256_update_fu_298_p_read4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_sha256_update_fu_298_p_read4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_sha256_update_fu_298_p_read5_assign_proc : process(reg_506, icmp_ln35_reg_866, sha256ctx_state_2_2_2_reg_927, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
            if ((icmp_ln35_reg_866 = ap_const_lv1_1)) then 
                grp_sha256_update_fu_298_p_read5 <= sha256ctx_state_2_2_2_reg_927;
            elsif ((icmp_ln35_reg_866 = ap_const_lv1_0)) then 
                grp_sha256_update_fu_298_p_read5 <= reg_506;
            else 
                grp_sha256_update_fu_298_p_read5 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_sha256_update_fu_298_p_read5 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_sha256_update_fu_298_p_read6_assign_proc : process(reg_512, icmp_ln35_reg_866, sha256ctx_state_3_2_2_reg_932, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
            if ((icmp_ln35_reg_866 = ap_const_lv1_1)) then 
                grp_sha256_update_fu_298_p_read6 <= sha256ctx_state_3_2_2_reg_932;
            elsif ((icmp_ln35_reg_866 = ap_const_lv1_0)) then 
                grp_sha256_update_fu_298_p_read6 <= reg_512;
            else 
                grp_sha256_update_fu_298_p_read6 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_sha256_update_fu_298_p_read6 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_sha256_update_fu_298_p_read7_assign_proc : process(reg_518, icmp_ln35_reg_866, sha256ctx_state_4_2_2_reg_937, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
            if ((icmp_ln35_reg_866 = ap_const_lv1_1)) then 
                grp_sha256_update_fu_298_p_read7 <= sha256ctx_state_4_2_2_reg_937;
            elsif ((icmp_ln35_reg_866 = ap_const_lv1_0)) then 
                grp_sha256_update_fu_298_p_read7 <= reg_518;
            else 
                grp_sha256_update_fu_298_p_read7 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_sha256_update_fu_298_p_read7 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_sha256_update_fu_298_p_read8_assign_proc : process(reg_524, icmp_ln35_reg_866, sha256ctx_state_5_2_2_reg_942, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
            if ((icmp_ln35_reg_866 = ap_const_lv1_1)) then 
                grp_sha256_update_fu_298_p_read8 <= sha256ctx_state_5_2_2_reg_942;
            elsif ((icmp_ln35_reg_866 = ap_const_lv1_0)) then 
                grp_sha256_update_fu_298_p_read8 <= reg_524;
            else 
                grp_sha256_update_fu_298_p_read8 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_sha256_update_fu_298_p_read8 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_sha256_update_fu_298_p_read9_assign_proc : process(reg_530, icmp_ln35_reg_866, sha256ctx_state_6_2_2_reg_947, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
            if ((icmp_ln35_reg_866 = ap_const_lv1_1)) then 
                grp_sha256_update_fu_298_p_read9 <= sha256ctx_state_6_2_2_reg_947;
            elsif ((icmp_ln35_reg_866 = ap_const_lv1_0)) then 
                grp_sha256_update_fu_298_p_read9 <= reg_530;
            else 
                grp_sha256_update_fu_298_p_read9 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_sha256_update_fu_298_p_read9 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_7_fu_706_p2 <= std_logic_vector(unsigned(i_1_reg_256) + unsigned(ap_const_lv6_1));
    i_8_fu_646_p2 <= std_logic_vector(unsigned(i_0_reg_244) + unsigned(ap_const_lv7_1));
    i_fu_747_p2 <= std_logic_vector(unsigned(i_2_reg_268) + unsigned(ap_const_lv6_1));
    icmp_ln32_fu_614_p2 <= "1" when (n_0_fu_110 = ap_const_lv32_0) else "0";
    icmp_ln35_fu_630_p2 <= "1" when (tmp_3_fu_620_p4 = ap_const_lv26_0) else "0";
    icmp_ln37_fu_640_p2 <= "1" when (i_0_reg_244 = ap_const_lv7_40) else "0";
    icmp_ln45_fu_701_p2 <= "1" when (zext_ln45_fu_697_p1 = n_0_load_reg_856) else "0";
    icmp_ln56_fu_741_p2 <= "1" when (i_2_reg_268 = ap_const_lv6_20) else "0";
    n_fu_671_p2 <= std_logic_vector(unsigned(n_0_load_reg_856) + unsigned(ap_const_lv32_FFFFFFC0));

    seg_buf_address0_assign_proc : process(icmp_ln35_reg_866, ap_CS_fsm_state9, zext_ln59_fu_753_p1, grp_sha256_final_fu_279_hash_address0, grp_sha256_update_fu_298_data_address0, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state5, zext_ln38_fu_681_p1, zext_ln47_fu_736_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            seg_buf_address0 <= zext_ln59_fu_753_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            seg_buf_address0 <= zext_ln47_fu_736_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            seg_buf_address0 <= zext_ln38_fu_681_p1(6 - 1 downto 0);
        elsif ((((icmp_ln35_reg_866 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln35_reg_866 = ap_const_lv1_0)))) then 
            seg_buf_address0 <= grp_sha256_update_fu_298_data_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            seg_buf_address0 <= grp_sha256_final_fu_279_hash_address0;
        else 
            seg_buf_address0 <= "XXXXXX";
        end if; 
    end process;


    seg_buf_ce0_assign_proc : process(icmp_ln35_reg_866, ap_CS_fsm_state9, grp_sha256_final_fu_279_hash_ce0, grp_sha256_update_fu_298_data_ce0, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            seg_buf_ce0 <= ap_const_logic_1;
        elsif ((((icmp_ln35_reg_866 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln35_reg_866 = ap_const_lv1_0)))) then 
            seg_buf_ce0 <= grp_sha256_update_fu_298_data_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            seg_buf_ce0 <= grp_sha256_final_fu_279_hash_ce0;
        else 
            seg_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    seg_buf_ce1_assign_proc : process(grp_sha256_final_fu_279_hash_ce1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            seg_buf_ce1 <= grp_sha256_final_fu_279_hash_ce1;
        else 
            seg_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    seg_buf_d0_assign_proc : process(data_q0, grp_sha256_final_fu_279_hash_d0, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            seg_buf_d0 <= data_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            seg_buf_d0 <= grp_sha256_final_fu_279_hash_d0;
        else 
            seg_buf_d0 <= "XXXXXXXX";
        end if; 
    end process;


    seg_buf_we0_assign_proc : process(grp_sha256_final_fu_279_hash_we0, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            seg_buf_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            seg_buf_we0 <= grp_sha256_final_fu_279_hash_we0;
        else 
            seg_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    seg_buf_we1_assign_proc : process(grp_sha256_final_fu_279_hash_we1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            seg_buf_we1 <= grp_sha256_final_fu_279_hash_we1;
        else 
            seg_buf_we1 <= ap_const_logic_0;
        end if; 
    end process;

    seg_offset_fu_686_p2 <= std_logic_vector(unsigned(seg_offset_1_fu_158) + unsigned(ap_const_lv32_40));

    sha256ctx_data_address0_assign_proc : process(icmp_ln35_reg_866, grp_sha256_final_fu_279_ctx_data_address0, grp_sha256_update_fu_298_ctx_data_address0, ap_CS_fsm_state8, ap_CS_fsm_state5)
    begin
        if ((((icmp_ln35_reg_866 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln35_reg_866 = ap_const_lv1_0)))) then 
            sha256ctx_data_address0 <= grp_sha256_update_fu_298_ctx_data_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sha256ctx_data_address0 <= grp_sha256_final_fu_279_ctx_data_address0;
        else 
            sha256ctx_data_address0 <= "XXXXXX";
        end if; 
    end process;


    sha256ctx_data_address1_assign_proc : process(icmp_ln35_reg_866, grp_sha256_final_fu_279_ctx_data_address1, grp_sha256_update_fu_298_ctx_data_address1, ap_CS_fsm_state8, ap_CS_fsm_state5)
    begin
        if ((((icmp_ln35_reg_866 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln35_reg_866 = ap_const_lv1_0)))) then 
            sha256ctx_data_address1 <= grp_sha256_update_fu_298_ctx_data_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sha256ctx_data_address1 <= grp_sha256_final_fu_279_ctx_data_address1;
        else 
            sha256ctx_data_address1 <= "XXXXXX";
        end if; 
    end process;


    sha256ctx_data_ce0_assign_proc : process(icmp_ln35_reg_866, grp_sha256_final_fu_279_ctx_data_ce0, grp_sha256_update_fu_298_ctx_data_ce0, ap_CS_fsm_state8, ap_CS_fsm_state5)
    begin
        if ((((icmp_ln35_reg_866 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln35_reg_866 = ap_const_lv1_0)))) then 
            sha256ctx_data_ce0 <= grp_sha256_update_fu_298_ctx_data_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sha256ctx_data_ce0 <= grp_sha256_final_fu_279_ctx_data_ce0;
        else 
            sha256ctx_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sha256ctx_data_ce1_assign_proc : process(icmp_ln35_reg_866, grp_sha256_final_fu_279_ctx_data_ce1, grp_sha256_update_fu_298_ctx_data_ce1, ap_CS_fsm_state8, ap_CS_fsm_state5)
    begin
        if ((((icmp_ln35_reg_866 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln35_reg_866 = ap_const_lv1_0)))) then 
            sha256ctx_data_ce1 <= grp_sha256_update_fu_298_ctx_data_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sha256ctx_data_ce1 <= grp_sha256_final_fu_279_ctx_data_ce1;
        else 
            sha256ctx_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sha256ctx_data_d0_assign_proc : process(icmp_ln35_reg_866, grp_sha256_final_fu_279_ctx_data_d0, grp_sha256_update_fu_298_ctx_data_d0, ap_CS_fsm_state8, ap_CS_fsm_state5)
    begin
        if ((((icmp_ln35_reg_866 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln35_reg_866 = ap_const_lv1_0)))) then 
            sha256ctx_data_d0 <= grp_sha256_update_fu_298_ctx_data_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sha256ctx_data_d0 <= grp_sha256_final_fu_279_ctx_data_d0;
        else 
            sha256ctx_data_d0 <= "XXXXXXXX";
        end if; 
    end process;


    sha256ctx_data_we0_assign_proc : process(icmp_ln35_reg_866, grp_sha256_final_fu_279_ctx_data_we0, grp_sha256_update_fu_298_ctx_data_we0, ap_CS_fsm_state8, ap_CS_fsm_state5)
    begin
        if ((((icmp_ln35_reg_866 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln35_reg_866 = ap_const_lv1_0)))) then 
            sha256ctx_data_we0 <= grp_sha256_update_fu_298_ctx_data_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sha256ctx_data_we0 <= grp_sha256_final_fu_279_ctx_data_we0;
        else 
            sha256ctx_data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sha256ctx_data_we1_assign_proc : process(grp_sha256_final_fu_279_ctx_data_we1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sha256ctx_data_we1 <= grp_sha256_final_fu_279_ctx_data_we1;
        else 
            sha256ctx_data_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_3_fu_620_p4 <= n_0_fu_110(31 downto 6);
    trunc_ln32_fu_542_p1 <= base_offset(10 - 1 downto 0);
    trunc_ln35_fu_636_p1 <= seg_offset_1_fu_158(10 - 1 downto 0);
    zext_ln38_1_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_244),10));
    zext_ln38_2_fu_666_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln38_1_fu_661_p2),64));
    zext_ln38_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_244),64));
    zext_ln45_fu_697_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_256),32));
    zext_ln47_1_fu_712_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_256),10));
    zext_ln47_2_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln47_1_fu_721_p2),64));
    zext_ln47_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_256),64));
    zext_ln59_fu_753_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_268),64));
end behav;
