-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha256_final is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ctx_data_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ctx_data_ce0 : OUT STD_LOGIC;
    ctx_data_we0 : OUT STD_LOGIC;
    ctx_data_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ctx_data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ctx_data_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ctx_data_ce1 : OUT STD_LOGIC;
    ctx_data_we1 : OUT STD_LOGIC;
    ctx_data_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ctx_data_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    ctx_datalen_read : IN STD_LOGIC_VECTOR (31 downto 0);
    ctx_bitlen_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read9 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read10 : IN STD_LOGIC_VECTOR (31 downto 0);
    hash_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    hash_ce0 : OUT STD_LOGIC;
    hash_we0 : OUT STD_LOGIC;
    hash_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    hash_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    hash_ce1 : OUT STD_LOGIC;
    hash_we1 : OUT STD_LOGIC;
    hash_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of sha256_final is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv64_3F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111111";
    constant ap_const_lv64_3E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111110";
    constant ap_const_lv64_3D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111101";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv64_3C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111100";
    constant ap_const_lv64_3B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_3A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111010";
    constant ap_const_lv64_39 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_38 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv6_38 : STD_LOGIC_VECTOR (5 downto 0) := "111000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_570 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_sha256_transform_fu_514_ap_ready : STD_LOGIC;
    signal grp_sha256_transform_fu_514_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal reg_575 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_580 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_585 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_590 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_595 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_600 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_605 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln113_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln113_reg_1110 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_fu_621_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_5_fu_654_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal trunc_ln2_reg_1130 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln127_fu_648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln3_reg_1135 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln139_fu_790_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln139_reg_1140 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln5_reg_1145 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln6_reg_1150 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln7_reg_1155 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_824_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln147_fu_841_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln147_reg_1168 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal i_6_fu_851_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_6_reg_1176 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln149_1_fu_885_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln149_1_reg_1181 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln147_fu_845_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln150_fu_900_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln150_reg_1186 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln_fu_922_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln_reg_1192 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln152_fu_941_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln152_reg_1197 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln153_fu_951_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln153_reg_1202 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln154_fu_961_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln154_reg_1207 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln155_fu_971_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln155_reg_1212 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln156_fu_981_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln156_reg_1217 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_transform_fu_514_ap_start : STD_LOGIC;
    signal grp_sha256_transform_fu_514_ap_idle : STD_LOGIC;
    signal grp_sha256_transform_fu_514_ctx_state_0_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_514_ctx_state_1_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_514_ctx_state_2_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_514_ctx_state_3_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_514_ctx_state_4_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_514_ctx_state_5_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_514_ctx_state_6_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_514_ctx_state_7_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_514_data_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_transform_fu_514_data_ce0 : STD_LOGIC;
    signal grp_sha256_transform_fu_514_data_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_transform_fu_514_data_ce1 : STD_LOGIC;
    signal grp_sha256_transform_fu_514_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_514_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_514_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_514_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_514_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_514_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_514_ap_return_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_514_ap_return_7 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_in_reg_393 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln122_fu_637_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_reg_402 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_0_in_reg_413 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln115_fu_830_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ctx_state_0_0_reg_422 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_1_0_reg_432 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_2_0_reg_442 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_3_0_reg_452 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_4_0_reg_462 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_5_0_reg_472 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_6_0_reg_482 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_7_0_reg_492 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_reg_502 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_sha256_transform_fu_514_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal zext_ln114_fu_616_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln124_fu_643_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln128_fu_660_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln117_fu_836_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln150_fu_906_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln151_fu_930_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln149_fu_985_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal zext_ln152_fu_993_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln153_fu_1006_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal zext_ln154_fu_1016_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln155_fu_1024_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln156_fu_1032_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln135_fu_752_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln150_fu_895_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln151_fu_917_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_627_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal shl_ln134_fu_665_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln134_fu_670_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln134_fu_676_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln134_fu_681_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln134_2_fu_696_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln134_4_fu_710_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln134_8_fu_724_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal trunc_ln134_7_fu_727_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln134_6_fu_721_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln134_5_fu_713_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln134_3_fu_707_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln134_fu_693_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_1_fu_699_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln135_2_fu_746_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln135_1_fu_740_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln134_1_fu_735_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln134_fu_686_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln149_fu_857_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln1_fu_861_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln149_fu_869_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln149_1_fu_875_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln149_fu_879_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln150_fu_889_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln151_fu_911_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln152_fu_935_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln153_fu_945_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln154_fu_955_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln155_fu_965_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln156_fu_975_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln152_fu_990_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln3_fu_998_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln154_fu_1011_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln155_fu_1021_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln156_fu_1029_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);

    component sha256_transform IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ctx_state_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_6_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_7_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        data_ce0 : OUT STD_LOGIC;
        data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        data_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        data_ce1 : OUT STD_LOGIC;
        data_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_sha256_transform_fu_514 : component sha256_transform
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sha256_transform_fu_514_ap_start,
        ap_done => grp_sha256_transform_fu_514_ap_done,
        ap_idle => grp_sha256_transform_fu_514_ap_idle,
        ap_ready => grp_sha256_transform_fu_514_ap_ready,
        ctx_state_0_read => grp_sha256_transform_fu_514_ctx_state_0_read,
        ctx_state_1_read => grp_sha256_transform_fu_514_ctx_state_1_read,
        ctx_state_2_read => grp_sha256_transform_fu_514_ctx_state_2_read,
        ctx_state_3_read => grp_sha256_transform_fu_514_ctx_state_3_read,
        ctx_state_4_read => grp_sha256_transform_fu_514_ctx_state_4_read,
        ctx_state_5_read => grp_sha256_transform_fu_514_ctx_state_5_read,
        ctx_state_6_read => grp_sha256_transform_fu_514_ctx_state_6_read,
        ctx_state_7_read => grp_sha256_transform_fu_514_ctx_state_7_read,
        data_address0 => grp_sha256_transform_fu_514_data_address0,
        data_ce0 => grp_sha256_transform_fu_514_data_ce0,
        data_q0 => ctx_data_q0,
        data_address1 => grp_sha256_transform_fu_514_data_address1,
        data_ce1 => grp_sha256_transform_fu_514_data_ce1,
        data_q1 => ctx_data_q1,
        ap_return_0 => grp_sha256_transform_fu_514_ap_return_0,
        ap_return_1 => grp_sha256_transform_fu_514_ap_return_1,
        ap_return_2 => grp_sha256_transform_fu_514_ap_return_2,
        ap_return_3 => grp_sha256_transform_fu_514_ap_return_3,
        ap_return_4 => grp_sha256_transform_fu_514_ap_return_4,
        ap_return_5 => grp_sha256_transform_fu_514_ap_return_5,
        ap_return_6 => grp_sha256_transform_fu_514_ap_return_6,
        ap_return_7 => grp_sha256_transform_fu_514_ap_return_7);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_sha256_transform_fu_514_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sha256_transform_fu_514_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln122_fu_637_p2 = ap_const_lv1_0)))) then 
                    grp_sha256_transform_fu_514_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sha256_transform_fu_514_ap_ready = ap_const_logic_1)) then 
                    grp_sha256_transform_fu_514_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ctx_state_0_0_reg_422_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln115_fu_830_p2 = ap_const_lv1_1))) then 
                ctx_state_0_0_reg_422 <= p_read2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln127_fu_648_p2 = ap_const_lv1_1) and (icmp_ln113_reg_1110 = ap_const_lv1_0))) then 
                ctx_state_0_0_reg_422 <= reg_570;
            end if; 
        end if;
    end process;

    ctx_state_1_0_reg_432_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln115_fu_830_p2 = ap_const_lv1_1))) then 
                ctx_state_1_0_reg_432 <= p_read4;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln127_fu_648_p2 = ap_const_lv1_1) and (icmp_ln113_reg_1110 = ap_const_lv1_0))) then 
                ctx_state_1_0_reg_432 <= reg_575;
            end if; 
        end if;
    end process;

    ctx_state_2_0_reg_442_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln115_fu_830_p2 = ap_const_lv1_1))) then 
                ctx_state_2_0_reg_442 <= p_read5;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln127_fu_648_p2 = ap_const_lv1_1) and (icmp_ln113_reg_1110 = ap_const_lv1_0))) then 
                ctx_state_2_0_reg_442 <= reg_580;
            end if; 
        end if;
    end process;

    ctx_state_3_0_reg_452_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln115_fu_830_p2 = ap_const_lv1_1))) then 
                ctx_state_3_0_reg_452 <= p_read6;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln127_fu_648_p2 = ap_const_lv1_1) and (icmp_ln113_reg_1110 = ap_const_lv1_0))) then 
                ctx_state_3_0_reg_452 <= reg_585;
            end if; 
        end if;
    end process;

    ctx_state_4_0_reg_462_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln115_fu_830_p2 = ap_const_lv1_1))) then 
                ctx_state_4_0_reg_462 <= p_read7;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln127_fu_648_p2 = ap_const_lv1_1) and (icmp_ln113_reg_1110 = ap_const_lv1_0))) then 
                ctx_state_4_0_reg_462 <= reg_590;
            end if; 
        end if;
    end process;

    ctx_state_5_0_reg_472_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln115_fu_830_p2 = ap_const_lv1_1))) then 
                ctx_state_5_0_reg_472 <= p_read8;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln127_fu_648_p2 = ap_const_lv1_1) and (icmp_ln113_reg_1110 = ap_const_lv1_0))) then 
                ctx_state_5_0_reg_472 <= reg_595;
            end if; 
        end if;
    end process;

    ctx_state_6_0_reg_482_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln115_fu_830_p2 = ap_const_lv1_1))) then 
                ctx_state_6_0_reg_482 <= p_read9;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln127_fu_648_p2 = ap_const_lv1_1) and (icmp_ln113_reg_1110 = ap_const_lv1_0))) then 
                ctx_state_6_0_reg_482 <= reg_600;
            end if; 
        end if;
    end process;

    ctx_state_7_0_reg_492_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln115_fu_830_p2 = ap_const_lv1_1))) then 
                ctx_state_7_0_reg_492 <= p_read10;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln127_fu_648_p2 = ap_const_lv1_1) and (icmp_ln113_reg_1110 = ap_const_lv1_0))) then 
                ctx_state_7_0_reg_492 <= reg_605;
            end if; 
        end if;
    end process;

    i_0_in_reg_413_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (icmp_ln113_fu_610_p2 = ap_const_lv1_1))) then 
                i_0_in_reg_413 <= ctx_datalen_read;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln115_fu_830_p2 = ap_const_lv1_0))) then 
                i_0_in_reg_413 <= i_fu_824_p2;
            end if; 
        end if;
    end process;

    i_1_in_reg_393_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (icmp_ln113_fu_610_p2 = ap_const_lv1_0))) then 
                i_1_in_reg_393 <= ctx_datalen_read;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln122_fu_637_p2 = ap_const_lv1_1))) then 
                i_1_in_reg_393 <= i_4_fu_621_p2;
            end if; 
        end if;
    end process;

    i_2_reg_402_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln127_fu_648_p2 = ap_const_lv1_0) and (icmp_ln113_reg_1110 = ap_const_lv1_0))) then 
                i_2_reg_402 <= i_5_fu_654_p2;
            elsif (((grp_sha256_transform_fu_514_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_2_reg_402 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_3_reg_502_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                i_3_reg_502 <= i_6_reg_1176;
            elsif (((grp_sha256_transform_fu_514_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                i_3_reg_502 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                i_6_reg_1176 <= i_6_fu_851_p2;
                    zext_ln147_reg_1168(2 downto 0) <= zext_ln147_fu_841_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                icmp_ln113_reg_1110 <= icmp_ln113_fu_610_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln147_fu_845_p2 = ap_const_lv1_0))) then
                    or_ln_reg_1192(2 downto 0) <= or_ln_fu_922_p3(2 downto 0);
                trunc_ln149_1_reg_1181 <= trunc_ln149_1_fu_885_p1;
                trunc_ln152_reg_1197 <= trunc_ln152_fu_941_p1;
                trunc_ln153_reg_1202 <= trunc_ln153_fu_951_p1;
                trunc_ln154_reg_1207 <= trunc_ln154_fu_961_p1;
                trunc_ln155_reg_1212 <= trunc_ln155_fu_971_p1;
                trunc_ln156_reg_1217 <= trunc_ln156_fu_981_p1;
                xor_ln150_reg_1186 <= xor_ln150_fu_900_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((grp_sha256_transform_fu_514_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((grp_sha256_transform_fu_514_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then
                reg_570 <= grp_sha256_transform_fu_514_ap_return_0;
                reg_575 <= grp_sha256_transform_fu_514_ap_return_1;
                reg_580 <= grp_sha256_transform_fu_514_ap_return_2;
                reg_585 <= grp_sha256_transform_fu_514_ap_return_3;
                reg_590 <= grp_sha256_transform_fu_514_ap_return_4;
                reg_595 <= grp_sha256_transform_fu_514_ap_return_5;
                reg_600 <= grp_sha256_transform_fu_514_ap_return_6;
                reg_605 <= grp_sha256_transform_fu_514_ap_return_7;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((icmp_ln127_fu_648_p2 = ap_const_lv1_1) or (icmp_ln113_reg_1110 = ap_const_lv1_1)))) then
                trunc_ln139_reg_1140 <= trunc_ln139_fu_790_p1;
                trunc_ln2_reg_1130 <= add_ln135_1_fu_740_p2(23 downto 16);
                trunc_ln3_reg_1135 <= add_ln134_1_fu_735_p2(31 downto 24);
                trunc_ln5_reg_1145 <= select_ln134_fu_686_p3(15 downto 8);
                trunc_ln6_reg_1150 <= select_ln134_fu_686_p3(23 downto 16);
                trunc_ln7_reg_1155 <= select_ln134_fu_686_p3(31 downto 24);
            end if;
        end if;
    end process;
    zext_ln147_reg_1168(4 downto 3) <= "00";
    or_ln_reg_1192(3) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, grp_sha256_transform_fu_514_ap_done, ap_CS_fsm_state10, icmp_ln113_fu_610_p2, icmp_ln113_reg_1110, ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln127_fu_648_p2, ap_CS_fsm_state5, ap_CS_fsm_state11, icmp_ln147_fu_845_p2, icmp_ln122_fu_637_p2, icmp_ln115_fu_830_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (icmp_ln113_fu_610_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (icmp_ln113_fu_610_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln122_fu_637_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((grp_sha256_transform_fu_514_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((icmp_ln127_fu_648_p2 = ap_const_lv1_1) or (icmp_ln113_reg_1110 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln115_fu_830_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_sha256_transform_fu_514_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln147_fu_845_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln134_1_fu_735_p2 <= std_logic_vector(unsigned(ctx_bitlen_0_read) + unsigned(shl_ln134_fu_665_p2));
    add_ln134_fu_681_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(p_read3));
    add_ln135_1_fu_740_p2 <= std_logic_vector(unsigned(trunc_ln134_7_fu_727_p3) + unsigned(trunc_ln134_6_fu_721_p1));
    add_ln135_2_fu_746_p2 <= std_logic_vector(unsigned(trunc_ln134_5_fu_713_p3) + unsigned(trunc_ln134_3_fu_707_p1));
    add_ln135_fu_752_p2 <= std_logic_vector(unsigned(trunc_ln134_fu_693_p1) + unsigned(trunc_ln134_1_fu_699_p3));
    add_ln154_fu_1011_p2 <= std_logic_vector(signed(ap_const_lv5_14) + signed(zext_ln147_reg_1168));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state11, icmp_ln147_fu_845_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln147_fu_845_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11, icmp_ln147_fu_845_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln147_fu_845_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ctx_data_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state10, icmp_ln113_reg_1110, ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln127_fu_648_p2, grp_sha256_transform_fu_514_data_address0, icmp_ln122_fu_637_p2, zext_ln114_fu_616_p1, zext_ln124_fu_643_p1, zext_ln128_fu_660_p1, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ctx_data_address0 <= ap_const_lv64_38(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ctx_data_address0 <= ap_const_lv64_3A(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ctx_data_address0 <= ap_const_lv64_3C(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and ((icmp_ln127_fu_648_p2 = ap_const_lv1_1) or (icmp_ln113_reg_1110 = ap_const_lv1_1)))) then 
            ctx_data_address0 <= ap_const_lv64_3F(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln127_fu_648_p2 = ap_const_lv1_0) and (icmp_ln113_reg_1110 = ap_const_lv1_0))) then 
            ctx_data_address0 <= zext_ln128_fu_660_p1(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln122_fu_637_p2 = ap_const_lv1_1))) then 
            ctx_data_address0 <= zext_ln124_fu_643_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            ctx_data_address0 <= zext_ln114_fu_616_p1(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ctx_data_address0 <= grp_sha256_transform_fu_514_data_address0;
        else 
            ctx_data_address0 <= "XXXXXX";
        end if; 
    end process;


    ctx_data_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state4, ap_CS_fsm_state5, grp_sha256_transform_fu_514_data_address1, zext_ln117_fu_836_p1, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ctx_data_address1 <= ap_const_lv64_39(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ctx_data_address1 <= ap_const_lv64_3B(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ctx_data_address1 <= ap_const_lv64_3D(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ctx_data_address1 <= zext_ln117_fu_836_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ctx_data_address1 <= ap_const_lv64_3E(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ctx_data_address1 <= grp_sha256_transform_fu_514_data_address1;
        else 
            ctx_data_address1 <= "XXXXXX";
        end if; 
    end process;


    ctx_data_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state10, icmp_ln113_reg_1110, ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln127_fu_648_p2, grp_sha256_transform_fu_514_data_ce0, icmp_ln122_fu_637_p2, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and ((icmp_ln127_fu_648_p2 = ap_const_lv1_1) or (icmp_ln113_reg_1110 = ap_const_lv1_1))) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln127_fu_648_p2 = ap_const_lv1_0) and (icmp_ln113_reg_1110 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln122_fu_637_p2 = ap_const_lv1_1)))) then 
            ctx_data_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ctx_data_ce0 <= grp_sha256_transform_fu_514_data_ce0;
        else 
            ctx_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_data_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state4, ap_CS_fsm_state5, grp_sha256_transform_fu_514_data_ce1, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ctx_data_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ctx_data_ce1 <= grp_sha256_transform_fu_514_data_ce1;
        else 
            ctx_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_data_d0_assign_proc : process(ap_CS_fsm_state1, icmp_ln113_reg_1110, ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln127_fu_648_p2, trunc_ln3_reg_1135, trunc_ln5_reg_1145, trunc_ln7_reg_1155, icmp_ln122_fu_637_p2, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, add_ln135_fu_752_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ctx_data_d0 <= trunc_ln7_reg_1155;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ctx_data_d0 <= trunc_ln5_reg_1145;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ctx_data_d0 <= trunc_ln3_reg_1135;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and ((icmp_ln127_fu_648_p2 = ap_const_lv1_1) or (icmp_ln113_reg_1110 = ap_const_lv1_1)))) then 
            ctx_data_d0 <= add_ln135_fu_752_p2;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln127_fu_648_p2 = ap_const_lv1_0) and (icmp_ln113_reg_1110 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln122_fu_637_p2 = ap_const_lv1_1)))) then 
            ctx_data_d0 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            ctx_data_d0 <= ap_const_lv8_80;
        else 
            ctx_data_d0 <= "XXXXXXXX";
        end if; 
    end process;


    ctx_data_d1_assign_proc : process(ap_CS_fsm_state4, trunc_ln2_reg_1130, trunc_ln139_reg_1140, trunc_ln6_reg_1150, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, add_ln135_2_fu_746_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ctx_data_d1 <= trunc_ln6_reg_1150;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ctx_data_d1 <= trunc_ln139_reg_1140;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ctx_data_d1 <= trunc_ln2_reg_1130;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ctx_data_d1 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ctx_data_d1 <= add_ln135_2_fu_746_p2(15 downto 8);
        else 
            ctx_data_d1 <= "XXXXXXXX";
        end if; 
    end process;


    ctx_data_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln113_reg_1110, ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln127_fu_648_p2, icmp_ln122_fu_637_p2, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and ((icmp_ln127_fu_648_p2 = ap_const_lv1_1) or (icmp_ln113_reg_1110 = ap_const_lv1_1))) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln127_fu_648_p2 = ap_const_lv1_0) and (icmp_ln113_reg_1110 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln122_fu_637_p2 = ap_const_lv1_1)))) then 
            ctx_data_we0 <= ap_const_logic_1;
        else 
            ctx_data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_data_we1_assign_proc : process(icmp_ln113_reg_1110, ap_CS_fsm_state4, icmp_ln127_fu_648_p2, ap_CS_fsm_state5, icmp_ln115_fu_830_p2, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln115_fu_830_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and ((icmp_ln127_fu_648_p2 = ap_const_lv1_1) or (icmp_ln113_reg_1110 = ap_const_lv1_1))))) then 
            ctx_data_we1 <= ap_const_logic_1;
        else 
            ctx_data_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_sha256_transform_fu_514_ap_start <= grp_sha256_transform_fu_514_ap_start_reg;

    grp_sha256_transform_fu_514_ctx_state_0_read_assign_proc : process(p_read2, ap_CS_fsm_state3, ap_CS_fsm_state10, ctx_state_0_0_reg_422)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_sha256_transform_fu_514_ctx_state_0_read <= ctx_state_0_0_reg_422;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_sha256_transform_fu_514_ctx_state_0_read <= p_read2;
        else 
            grp_sha256_transform_fu_514_ctx_state_0_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_sha256_transform_fu_514_ctx_state_1_read_assign_proc : process(p_read4, ap_CS_fsm_state3, ap_CS_fsm_state10, ctx_state_1_0_reg_432)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_sha256_transform_fu_514_ctx_state_1_read <= ctx_state_1_0_reg_432;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_sha256_transform_fu_514_ctx_state_1_read <= p_read4;
        else 
            grp_sha256_transform_fu_514_ctx_state_1_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_sha256_transform_fu_514_ctx_state_2_read_assign_proc : process(p_read5, ap_CS_fsm_state3, ap_CS_fsm_state10, ctx_state_2_0_reg_442)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_sha256_transform_fu_514_ctx_state_2_read <= ctx_state_2_0_reg_442;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_sha256_transform_fu_514_ctx_state_2_read <= p_read5;
        else 
            grp_sha256_transform_fu_514_ctx_state_2_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_sha256_transform_fu_514_ctx_state_3_read_assign_proc : process(p_read6, ap_CS_fsm_state3, ap_CS_fsm_state10, ctx_state_3_0_reg_452)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_sha256_transform_fu_514_ctx_state_3_read <= ctx_state_3_0_reg_452;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_sha256_transform_fu_514_ctx_state_3_read <= p_read6;
        else 
            grp_sha256_transform_fu_514_ctx_state_3_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_sha256_transform_fu_514_ctx_state_4_read_assign_proc : process(p_read7, ap_CS_fsm_state3, ap_CS_fsm_state10, ctx_state_4_0_reg_462)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_sha256_transform_fu_514_ctx_state_4_read <= ctx_state_4_0_reg_462;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_sha256_transform_fu_514_ctx_state_4_read <= p_read7;
        else 
            grp_sha256_transform_fu_514_ctx_state_4_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_sha256_transform_fu_514_ctx_state_5_read_assign_proc : process(p_read8, ap_CS_fsm_state3, ap_CS_fsm_state10, ctx_state_5_0_reg_472)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_sha256_transform_fu_514_ctx_state_5_read <= ctx_state_5_0_reg_472;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_sha256_transform_fu_514_ctx_state_5_read <= p_read8;
        else 
            grp_sha256_transform_fu_514_ctx_state_5_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_sha256_transform_fu_514_ctx_state_6_read_assign_proc : process(p_read9, ap_CS_fsm_state3, ap_CS_fsm_state10, ctx_state_6_0_reg_482)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_sha256_transform_fu_514_ctx_state_6_read <= ctx_state_6_0_reg_482;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_sha256_transform_fu_514_ctx_state_6_read <= p_read9;
        else 
            grp_sha256_transform_fu_514_ctx_state_6_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_sha256_transform_fu_514_ctx_state_7_read_assign_proc : process(p_read10, ap_CS_fsm_state3, ap_CS_fsm_state10, ctx_state_7_0_reg_492)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_sha256_transform_fu_514_ctx_state_7_read <= ctx_state_7_0_reg_492;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_sha256_transform_fu_514_ctx_state_7_read <= p_read10;
        else 
            grp_sha256_transform_fu_514_ctx_state_7_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    hash_address0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state14, zext_ln150_fu_906_p1, zext_ln149_fu_985_p1, ap_CS_fsm_state12, zext_ln153_fu_1006_p1, ap_CS_fsm_state13, zext_ln155_fu_1024_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            hash_address0 <= zext_ln155_fu_1024_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            hash_address0 <= zext_ln153_fu_1006_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            hash_address0 <= zext_ln149_fu_985_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            hash_address0 <= zext_ln150_fu_906_p1(6 - 1 downto 0);
        else 
            hash_address0 <= "XXXXXX";
        end if; 
    end process;


    hash_address1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state14, zext_ln151_fu_930_p1, ap_CS_fsm_state12, zext_ln152_fu_993_p1, ap_CS_fsm_state13, zext_ln154_fu_1016_p1, zext_ln156_fu_1032_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            hash_address1 <= zext_ln156_fu_1032_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            hash_address1 <= zext_ln154_fu_1016_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            hash_address1 <= zext_ln152_fu_993_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            hash_address1 <= zext_ln151_fu_930_p1(6 - 1 downto 0);
        else 
            hash_address1 <= "XXXXXX";
        end if; 
    end process;


    hash_ce0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            hash_ce0 <= ap_const_logic_1;
        else 
            hash_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hash_ce1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            hash_ce1 <= ap_const_logic_1;
        else 
            hash_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    hash_d0_assign_proc : process(ap_CS_fsm_state11, trunc_ln149_1_reg_1181, trunc_ln153_reg_1202, trunc_ln155_reg_1212, ap_CS_fsm_state14, ap_CS_fsm_state12, ap_CS_fsm_state13, trunc_ln150_fu_895_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            hash_d0 <= trunc_ln155_reg_1212;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            hash_d0 <= trunc_ln153_reg_1202;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            hash_d0 <= trunc_ln149_1_reg_1181;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            hash_d0 <= trunc_ln150_fu_895_p1;
        else 
            hash_d0 <= "XXXXXXXX";
        end if; 
    end process;


    hash_d1_assign_proc : process(ap_CS_fsm_state11, trunc_ln152_reg_1197, trunc_ln154_reg_1207, trunc_ln156_reg_1217, ap_CS_fsm_state14, ap_CS_fsm_state12, ap_CS_fsm_state13, trunc_ln151_fu_917_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            hash_d1 <= trunc_ln156_reg_1217;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            hash_d1 <= trunc_ln154_reg_1207;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            hash_d1 <= trunc_ln152_reg_1197;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            hash_d1 <= trunc_ln151_fu_917_p1;
        else 
            hash_d1 <= "XXXXXXXX";
        end if; 
    end process;


    hash_we0_assign_proc : process(ap_CS_fsm_state11, icmp_ln147_fu_845_p2, ap_CS_fsm_state14, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln147_fu_845_p2 = ap_const_lv1_0)))) then 
            hash_we0 <= ap_const_logic_1;
        else 
            hash_we0 <= ap_const_logic_0;
        end if; 
    end process;


    hash_we1_assign_proc : process(ap_CS_fsm_state11, icmp_ln147_fu_845_p2, ap_CS_fsm_state14, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln147_fu_845_p2 = ap_const_lv1_0)))) then 
            hash_we1 <= ap_const_logic_1;
        else 
            hash_we1 <= ap_const_logic_0;
        end if; 
    end process;

    i_4_fu_621_p2 <= std_logic_vector(unsigned(i_1_in_reg_393) + unsigned(ap_const_lv32_1));
    i_5_fu_654_p2 <= std_logic_vector(unsigned(i_2_reg_402) + unsigned(ap_const_lv6_1));
    i_6_fu_851_p2 <= std_logic_vector(unsigned(i_3_reg_502) + unsigned(ap_const_lv3_1));
    i_fu_824_p2 <= std_logic_vector(unsigned(i_0_in_reg_413) + unsigned(ap_const_lv32_1));
    icmp_ln113_fu_610_p2 <= "1" when (unsigned(ctx_datalen_read) < unsigned(ap_const_lv32_38)) else "0";
    icmp_ln115_fu_830_p2 <= "1" when (i_0_in_reg_413 = ap_const_lv32_37) else "0";
    icmp_ln122_fu_637_p2 <= "1" when (tmp_2_fu_627_p4 = ap_const_lv26_0) else "0";
    icmp_ln127_fu_648_p2 <= "1" when (i_2_reg_402 = ap_const_lv6_38) else "0";
    icmp_ln134_fu_676_p2 <= "1" when (unsigned(ctx_bitlen_0_read) > unsigned(xor_ln134_fu_670_p2)) else "0";
    icmp_ln147_fu_845_p2 <= "1" when (i_3_reg_502 = ap_const_lv3_4) else "0";
    lshr_ln149_fu_879_p2 <= std_logic_vector(shift_right(unsigned(reg_570),to_integer(unsigned('0' & zext_ln149_1_fu_875_p1(31-1 downto 0)))));
    lshr_ln150_fu_889_p2 <= std_logic_vector(shift_right(unsigned(reg_575),to_integer(unsigned('0' & zext_ln149_1_fu_875_p1(31-1 downto 0)))));
    lshr_ln151_fu_911_p2 <= std_logic_vector(shift_right(unsigned(reg_580),to_integer(unsigned('0' & zext_ln149_1_fu_875_p1(31-1 downto 0)))));
    lshr_ln152_fu_935_p2 <= std_logic_vector(shift_right(unsigned(reg_585),to_integer(unsigned('0' & zext_ln149_1_fu_875_p1(31-1 downto 0)))));
    lshr_ln153_fu_945_p2 <= std_logic_vector(shift_right(unsigned(reg_590),to_integer(unsigned('0' & zext_ln149_1_fu_875_p1(31-1 downto 0)))));
    lshr_ln154_fu_955_p2 <= std_logic_vector(shift_right(unsigned(reg_595),to_integer(unsigned('0' & zext_ln149_1_fu_875_p1(31-1 downto 0)))));
    lshr_ln155_fu_965_p2 <= std_logic_vector(shift_right(unsigned(reg_600),to_integer(unsigned('0' & zext_ln149_1_fu_875_p1(31-1 downto 0)))));
    lshr_ln156_fu_975_p2 <= std_logic_vector(shift_right(unsigned(reg_605),to_integer(unsigned('0' & zext_ln149_1_fu_875_p1(31-1 downto 0)))));
    or_ln3_fu_998_p3 <= (ap_const_lv2_2 & i_3_reg_502);
    or_ln_fu_922_p3 <= (ap_const_lv1_1 & i_3_reg_502);
    select_ln134_fu_686_p3 <= 
        add_ln134_fu_681_p2 when (icmp_ln134_fu_676_p2(0) = '1') else 
        p_read3;
        sext_ln152_fu_990_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln150_reg_1186),4));

        sext_ln155_fu_1021_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln_reg_1192),5));

        sext_ln156_fu_1029_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln150_reg_1186),5));

    shl_ln134_fu_665_p2 <= std_logic_vector(shift_left(unsigned(ctx_datalen_read),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));
    shl_ln1_fu_861_p3 <= (trunc_ln149_fu_857_p1 & ap_const_lv3_0);
    sub_ln149_fu_869_p2 <= std_logic_vector(signed(ap_const_lv5_18) - signed(shl_ln1_fu_861_p3));
    tmp_2_fu_627_p4 <= i_4_fu_621_p2(31 downto 6);
    trunc_ln134_1_fu_699_p3 <= (trunc_ln134_2_fu_696_p1 & ap_const_lv3_0);
    trunc_ln134_2_fu_696_p1 <= ctx_datalen_read(5 - 1 downto 0);
    trunc_ln134_3_fu_707_p1 <= ctx_bitlen_0_read(16 - 1 downto 0);
    trunc_ln134_4_fu_710_p1 <= ctx_datalen_read(13 - 1 downto 0);
    trunc_ln134_5_fu_713_p3 <= (trunc_ln134_4_fu_710_p1 & ap_const_lv3_0);
    trunc_ln134_6_fu_721_p1 <= ctx_bitlen_0_read(24 - 1 downto 0);
    trunc_ln134_7_fu_727_p3 <= (trunc_ln134_8_fu_724_p1 & ap_const_lv3_0);
    trunc_ln134_8_fu_724_p1 <= ctx_datalen_read(21 - 1 downto 0);
    trunc_ln134_fu_693_p1 <= ctx_bitlen_0_read(8 - 1 downto 0);
    trunc_ln139_fu_790_p1 <= select_ln134_fu_686_p3(8 - 1 downto 0);
    trunc_ln149_1_fu_885_p1 <= lshr_ln149_fu_879_p2(8 - 1 downto 0);
    trunc_ln149_fu_857_p1 <= i_3_reg_502(2 - 1 downto 0);
    trunc_ln150_fu_895_p1 <= lshr_ln150_fu_889_p2(8 - 1 downto 0);
    trunc_ln151_fu_917_p1 <= lshr_ln151_fu_911_p2(8 - 1 downto 0);
    trunc_ln152_fu_941_p1 <= lshr_ln152_fu_935_p2(8 - 1 downto 0);
    trunc_ln153_fu_951_p1 <= lshr_ln153_fu_945_p2(8 - 1 downto 0);
    trunc_ln154_fu_961_p1 <= lshr_ln154_fu_955_p2(8 - 1 downto 0);
    trunc_ln155_fu_971_p1 <= lshr_ln155_fu_965_p2(8 - 1 downto 0);
    trunc_ln156_fu_981_p1 <= lshr_ln156_fu_975_p2(8 - 1 downto 0);
    xor_ln134_fu_670_p2 <= (shl_ln134_fu_665_p2 xor ap_const_lv32_FFFFFFFF);
    xor_ln150_fu_900_p2 <= (i_3_reg_502 xor ap_const_lv3_4);
    zext_ln114_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ctx_datalen_read),64));
    zext_ln117_fu_836_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_824_p2),64));
    zext_ln124_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_fu_621_p2),64));
    zext_ln128_fu_660_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_402),64));
    zext_ln147_fu_841_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_502),5));
    zext_ln149_1_fu_875_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln149_fu_869_p2),32));
    zext_ln149_fu_985_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_502),64));
    zext_ln150_fu_906_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln150_fu_900_p2),64));
    zext_ln151_fu_930_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_922_p3),64));
    zext_ln152_fu_993_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln152_fu_990_p1),64));
    zext_ln153_fu_1006_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln3_fu_998_p3),64));
    zext_ln154_fu_1016_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln154_fu_1011_p2),64));
    zext_ln155_fu_1024_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln155_fu_1021_p1),64));
    zext_ln156_fu_1032_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln156_fu_1029_p1),64));
end behav;
