-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha256_transform is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ctx_state_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
    ctx_state_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
    ctx_state_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
    ctx_state_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
    ctx_state_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
    ctx_state_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
    ctx_state_6_read : IN STD_LOGIC_VECTOR (31 downto 0);
    ctx_state_7_read : IN STD_LOGIC_VECTOR (31 downto 0);
    data_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    data_ce0 : OUT STD_LOGIC;
    data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    data_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    data_ce1 : OUT STD_LOGIC;
    data_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sha256_transform is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_10 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_7E : STD_LOGIC_VECTOR (6 downto 0) := "1111110";
    constant ap_const_lv7_79 : STD_LOGIC_VECTOR (6 downto 0) := "1111001";
    constant ap_const_lv7_71 : STD_LOGIC_VECTOR (6 downto 0) := "1110001";
    constant ap_const_lv7_70 : STD_LOGIC_VECTOR (6 downto 0) := "1110000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal k_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_ce0 : STD_LOGIC;
    signal k_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_435 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln34_fu_445_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln34_reg_1130 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln34_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln34_fu_456_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln34_reg_1140 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_fu_471_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_reg_1151 : STD_LOGIC_VECTOR (6 downto 0);
    signal data_load_reg_1156 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal data_load_1_reg_1161 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln38_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_load_1_reg_1189 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln40_5_fu_703_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln40_5_reg_1204 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_725_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_3_fu_737_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_3_reg_1217 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln51_fu_731_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln53_2_fu_857_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln53_2_reg_1232 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln54_3_fu_881_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln54_3_reg_1237 : STD_LOGIC_VECTOR (31 downto 0);
    signal t1_fu_981_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t1_reg_1242 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal e_fu_1064_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal a_fu_1073_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal m_ce0 : STD_LOGIC;
    signal m_we0 : STD_LOGIC;
    signal m_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal m_ce1 : STD_LOGIC;
    signal m_we1 : STD_LOGIC;
    signal m_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_304 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal j_0_reg_316 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_reg_327 : STD_LOGIC_VECTOR (6 downto 0);
    signal h_reg_348 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_0_reg_339 : STD_LOGIC_VECTOR (31 downto 0);
    signal g_reg_359 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_reg_370 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_reg_391 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_0_reg_381 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_reg_402 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_413 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_reg_424 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln36_fu_451_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_1_fu_466_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_2_fu_482_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_3_fu_492_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_4_fu_508_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_fu_525_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_1_fu_536_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_2_fu_547_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_3_fu_558_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_4_fu_720_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln53_fu_845_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln36_fu_460_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln36_1_fu_477_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln36_2_fu_487_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln40_fu_519_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln40_1_fu_530_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln40_2_fu_541_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln40_3_fu_552_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln40_fu_573_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal lshr_ln_fu_563_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln40_1_fu_595_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal lshr_ln40_1_fu_585_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal lshr_ln40_2_fu_607_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln40_5_fu_617_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln40_1_fu_599_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln40_fu_621_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_fu_577_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln40_2_fu_643_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln40_3_fu_633_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln40_3_fu_665_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal lshr_ln40_4_fu_655_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal lshr_ln40_5_fu_677_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln40_6_fu_687_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln40_3_fu_669_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln40_2_fu_691_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln40_2_fu_647_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln40_1_fu_627_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln40_3_fu_697_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln40_4_fu_709_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln53_fu_753_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal lshr_ln1_fu_743_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln53_1_fu_775_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal lshr_ln53_1_fu_765_p4 : STD_LOGIC_VECTOR (20 downto 0);
    signal trunc_ln53_2_fu_797_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal lshr_ln53_2_fu_787_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln1_fu_757_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln53_1_fu_779_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln53_fu_809_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln53_2_fu_801_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln53_2_fu_827_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln53_fu_821_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln53_1_fu_833_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln53_1_fu_815_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln53_3_fu_839_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln53_1_fu_851_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln54_2_fu_863_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln54_fu_869_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln54_1_fu_875_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln65_fu_887_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln66_fu_892_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln67_fu_897_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln68_fu_902_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln69_fu_907_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_fu_912_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln71_fu_917_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln72_fu_922_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln53_fu_975_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln54_fu_996_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln2_fu_986_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln54_1_fu_1018_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal lshr_ln54_1_fu_1008_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln54_2_fu_1040_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal lshr_ln54_2_fu_1030_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln2_fu_1000_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln54_1_fu_1022_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln54_fu_1052_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln54_2_fu_1044_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln62_fu_1069_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln54_1_fu_1058_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_5_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_6_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_7_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component sha256_transform_k IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sha256_transform_m IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    k_U : component sha256_transform_k
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => k_address0,
        ce0 => k_ce0,
        q0 => k_q0);

    m_U : component sha256_transform_m
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => m_address0,
        ce0 => m_ce0,
        we0 => m_we0,
        d0 => m_d0,
        q0 => m_q0,
        address1 => m_address1,
        ce1 => m_ce1,
        we1 => m_we1,
        d1 => m_d1,
        q1 => m_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln51_fu_731_p2 = ap_const_lv1_1))) then 
                    ap_return_0_preg <= add_ln65_fu_887_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln51_fu_731_p2 = ap_const_lv1_1))) then 
                    ap_return_1_preg <= add_ln66_fu_892_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln51_fu_731_p2 = ap_const_lv1_1))) then 
                    ap_return_2_preg <= add_ln67_fu_897_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln51_fu_731_p2 = ap_const_lv1_1))) then 
                    ap_return_3_preg <= add_ln68_fu_902_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln51_fu_731_p2 = ap_const_lv1_1))) then 
                    ap_return_4_preg <= add_ln69_fu_907_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_5_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_5_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln51_fu_731_p2 = ap_const_lv1_1))) then 
                    ap_return_5_preg <= add_ln70_fu_912_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_6_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_6_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln51_fu_731_p2 = ap_const_lv1_1))) then 
                    ap_return_6_preg <= add_ln71_fu_917_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_7_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_7_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln51_fu_731_p2 = ap_const_lv1_1))) then 
                    ap_return_7_preg <= add_ln72_fu_922_p2;
                end if; 
            end if;
        end if;
    end process;


    b_reg_413_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln38_fu_513_p2 = ap_const_lv1_1))) then 
                b_reg_413 <= ctx_state_0_read;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                b_reg_413 <= a_fu_1073_p2;
            end if; 
        end if;
    end process;

    c_reg_402_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln38_fu_513_p2 = ap_const_lv1_1))) then 
                c_reg_402 <= ctx_state_1_read;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                c_reg_402 <= b_reg_413;
            end if; 
        end if;
    end process;

    d_0_reg_381_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln38_fu_513_p2 = ap_const_lv1_1))) then 
                d_0_reg_381 <= ctx_state_3_read;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                d_0_reg_381 <= d_reg_391;
            end if; 
        end if;
    end process;

    d_reg_391_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln38_fu_513_p2 = ap_const_lv1_1))) then 
                d_reg_391 <= ctx_state_2_read;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                d_reg_391 <= c_reg_402;
            end if; 
        end if;
    end process;

    f_reg_370_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln38_fu_513_p2 = ap_const_lv1_1))) then 
                f_reg_370 <= ctx_state_4_read;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                f_reg_370 <= e_fu_1064_p2;
            end if; 
        end if;
    end process;

    g_reg_359_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln38_fu_513_p2 = ap_const_lv1_1))) then 
                g_reg_359 <= ctx_state_5_read;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                g_reg_359 <= f_reg_370;
            end if; 
        end if;
    end process;

    h_0_reg_339_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln38_fu_513_p2 = ap_const_lv1_1))) then 
                h_0_reg_339 <= ctx_state_7_read;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                h_0_reg_339 <= h_reg_348;
            end if; 
        end if;
    end process;

    h_reg_348_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln38_fu_513_p2 = ap_const_lv1_1))) then 
                h_reg_348 <= ctx_state_6_read;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                h_reg_348 <= g_reg_359;
            end if; 
        end if;
    end process;

    i_0_reg_304_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_0_reg_304 <= add_ln34_reg_1130;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_304 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_1_reg_327_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln34_fu_439_p2 = ap_const_lv1_1))) then 
                i_1_reg_327 <= ap_const_lv7_10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_1_reg_327 <= i_fu_725_p2;
            end if; 
        end if;
    end process;

    i_2_reg_424_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln38_fu_513_p2 = ap_const_lv1_1))) then 
                i_2_reg_424 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_2_reg_424 <= i_3_reg_1217;
            end if; 
        end if;
    end process;

    j_0_reg_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_0_reg_316 <= j_reg_1151;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_0_reg_316 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln34_reg_1130 <= add_ln34_fu_445_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln40_5_reg_1204 <= add_ln40_5_fu_703_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln51_fu_731_p2 = ap_const_lv1_0))) then
                add_ln53_2_reg_1232 <= add_ln53_2_fu_857_p2;
                xor_ln54_3_reg_1237 <= xor_ln54_3_fu_881_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                data_load_1_reg_1161 <= data_q1;
                data_load_reg_1156 <= data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                i_3_reg_1217 <= i_3_fu_737_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln34_fu_439_p2 = ap_const_lv1_0))) then
                j_reg_1151 <= j_fu_471_p2;
                trunc_ln34_reg_1140 <= trunc_ln34_fu_456_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                m_load_1_reg_1189 <= m_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
                reg_435 <= m_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                t1_reg_1242 <= t1_fu_981_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln34_fu_439_p2, ap_CS_fsm_state5, icmp_ln38_fu_513_p2, ap_CS_fsm_state9, icmp_ln51_fu_731_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln34_fu_439_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln38_fu_513_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln51_fu_731_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    a_fu_1073_p2 <= std_logic_vector(unsigned(add_ln62_fu_1069_p2) + unsigned(xor_ln54_1_fu_1058_p2));
    add_ln34_fu_445_p2 <= std_logic_vector(unsigned(i_0_reg_304) + unsigned(ap_const_lv5_1));
    add_ln40_1_fu_530_p2 <= std_logic_vector(signed(ap_const_lv7_79) + signed(i_1_reg_327));
    add_ln40_2_fu_541_p2 <= std_logic_vector(signed(ap_const_lv7_71) + signed(i_1_reg_327));
    add_ln40_3_fu_552_p2 <= std_logic_vector(signed(ap_const_lv7_70) + signed(i_1_reg_327));
    add_ln40_4_fu_709_p2 <= std_logic_vector(unsigned(m_load_1_reg_1189) + unsigned(reg_435));
    add_ln40_5_fu_703_p2 <= std_logic_vector(unsigned(xor_ln40_1_fu_627_p2) + unsigned(xor_ln40_3_fu_697_p2));
    add_ln40_fu_519_p2 <= std_logic_vector(signed(ap_const_lv7_7E) + signed(i_1_reg_327));
    add_ln53_1_fu_851_p2 <= std_logic_vector(unsigned(xor_ln53_1_fu_815_p2) + unsigned(xor_ln53_3_fu_839_p2));
    add_ln53_2_fu_857_p2 <= std_logic_vector(unsigned(add_ln53_1_fu_851_p2) + unsigned(h_0_reg_339));
    add_ln53_fu_975_p2 <= std_logic_vector(unsigned(k_q0) + unsigned(m_q0));
    add_ln62_fu_1069_p2 <= std_logic_vector(unsigned(xor_ln54_3_reg_1237) + unsigned(t1_reg_1242));
    add_ln65_fu_887_p2 <= std_logic_vector(unsigned(b_reg_413) + unsigned(ctx_state_0_read));
    add_ln66_fu_892_p2 <= std_logic_vector(unsigned(c_reg_402) + unsigned(ctx_state_1_read));
    add_ln67_fu_897_p2 <= std_logic_vector(unsigned(d_reg_391) + unsigned(ctx_state_2_read));
    add_ln68_fu_902_p2 <= std_logic_vector(unsigned(d_0_reg_381) + unsigned(ctx_state_3_read));
    add_ln69_fu_907_p2 <= std_logic_vector(unsigned(f_reg_370) + unsigned(ctx_state_4_read));
    add_ln70_fu_912_p2 <= std_logic_vector(unsigned(g_reg_359) + unsigned(ctx_state_5_read));
    add_ln71_fu_917_p2 <= std_logic_vector(unsigned(h_reg_348) + unsigned(ctx_state_6_read));
    add_ln72_fu_922_p2 <= std_logic_vector(unsigned(h_0_reg_339) + unsigned(ctx_state_7_read));
    and_ln53_1_fu_833_p2 <= (xor_ln53_2_fu_827_p2 and h_reg_348);
    and_ln53_fu_821_p2 <= (g_reg_359 and f_reg_370);
    and_ln54_1_fu_875_p2 <= (d_reg_391 and c_reg_402);
    and_ln54_fu_869_p2 <= (xor_ln54_2_fu_863_p2 and b_reg_413);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state9, icmp_ln51_fu_731_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln51_fu_731_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9, icmp_ln51_fu_731_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln51_fu_731_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state9, icmp_ln51_fu_731_p2, add_ln65_fu_887_p2, ap_return_0_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln51_fu_731_p2 = ap_const_lv1_1))) then 
            ap_return_0 <= add_ln65_fu_887_p2;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state9, icmp_ln51_fu_731_p2, add_ln66_fu_892_p2, ap_return_1_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln51_fu_731_p2 = ap_const_lv1_1))) then 
            ap_return_1 <= add_ln66_fu_892_p2;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_CS_fsm_state9, icmp_ln51_fu_731_p2, add_ln67_fu_897_p2, ap_return_2_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln51_fu_731_p2 = ap_const_lv1_1))) then 
            ap_return_2 <= add_ln67_fu_897_p2;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_CS_fsm_state9, icmp_ln51_fu_731_p2, add_ln68_fu_902_p2, ap_return_3_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln51_fu_731_p2 = ap_const_lv1_1))) then 
            ap_return_3 <= add_ln68_fu_902_p2;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ap_return_4_assign_proc : process(ap_CS_fsm_state9, icmp_ln51_fu_731_p2, add_ln69_fu_907_p2, ap_return_4_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln51_fu_731_p2 = ap_const_lv1_1))) then 
            ap_return_4 <= add_ln69_fu_907_p2;
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;


    ap_return_5_assign_proc : process(ap_CS_fsm_state9, icmp_ln51_fu_731_p2, add_ln70_fu_912_p2, ap_return_5_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln51_fu_731_p2 = ap_const_lv1_1))) then 
            ap_return_5 <= add_ln70_fu_912_p2;
        else 
            ap_return_5 <= ap_return_5_preg;
        end if; 
    end process;


    ap_return_6_assign_proc : process(ap_CS_fsm_state9, icmp_ln51_fu_731_p2, add_ln71_fu_917_p2, ap_return_6_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln51_fu_731_p2 = ap_const_lv1_1))) then 
            ap_return_6 <= add_ln71_fu_917_p2;
        else 
            ap_return_6 <= ap_return_6_preg;
        end if; 
    end process;


    ap_return_7_assign_proc : process(ap_CS_fsm_state9, icmp_ln51_fu_731_p2, add_ln72_fu_922_p2, ap_return_7_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln51_fu_731_p2 = ap_const_lv1_1))) then 
            ap_return_7 <= add_ln72_fu_922_p2;
        else 
            ap_return_7 <= ap_return_7_preg;
        end if; 
    end process;


    data_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, zext_ln36_fu_451_p1, zext_ln36_2_fu_482_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            data_address0 <= zext_ln36_2_fu_482_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_address0 <= zext_ln36_fu_451_p1(6 - 1 downto 0);
        else 
            data_address0 <= "XXXXXX";
        end if; 
    end process;


    data_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, zext_ln36_1_fu_466_p1, zext_ln36_3_fu_492_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            data_address1 <= zext_ln36_3_fu_492_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_address1 <= zext_ln36_1_fu_466_p1(6 - 1 downto 0);
        else 
            data_address1 <= "XXXXXX";
        end if; 
    end process;


    data_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data_ce0 <= ap_const_logic_1;
        else 
            data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data_ce1 <= ap_const_logic_1;
        else 
            data_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    e_fu_1064_p2 <= std_logic_vector(unsigned(t1_reg_1242) + unsigned(d_0_reg_381));
    i_3_fu_737_p2 <= std_logic_vector(unsigned(i_2_reg_424) + unsigned(ap_const_lv7_1));
    i_fu_725_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(i_1_reg_327));
    icmp_ln34_fu_439_p2 <= "1" when (i_0_reg_304 = ap_const_lv5_10) else "0";
    icmp_ln38_fu_513_p2 <= "1" when (i_1_reg_327 = ap_const_lv7_40) else "0";
    icmp_ln51_fu_731_p2 <= "1" when (i_2_reg_424 = ap_const_lv7_40) else "0";
    j_fu_471_p2 <= std_logic_vector(unsigned(ap_const_lv7_4) + unsigned(j_0_reg_316));
    k_address0 <= zext_ln53_fu_845_p1(6 - 1 downto 0);

    k_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            k_ce0 <= ap_const_logic_1;
        else 
            k_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln1_fu_743_p4 <= f_reg_370(31 downto 6);
    lshr_ln2_fu_986_p4 <= b_reg_413(31 downto 2);
    lshr_ln40_1_fu_585_p4 <= reg_435(31 downto 19);
    lshr_ln40_2_fu_607_p4 <= reg_435(31 downto 10);
    lshr_ln40_3_fu_633_p4 <= m_q1(31 downto 7);
    lshr_ln40_4_fu_655_p4 <= m_q1(31 downto 18);
    lshr_ln40_5_fu_677_p4 <= m_q1(31 downto 3);
    lshr_ln53_1_fu_765_p4 <= f_reg_370(31 downto 11);
    lshr_ln53_2_fu_787_p4 <= f_reg_370(31 downto 25);
    lshr_ln54_1_fu_1008_p4 <= b_reg_413(31 downto 13);
    lshr_ln54_2_fu_1030_p4 <= b_reg_413(31 downto 22);
    lshr_ln_fu_563_p4 <= reg_435(31 downto 17);

    m_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state4, zext_ln36_4_fu_508_p1, zext_ln40_fu_525_p1, zext_ln40_3_fu_558_p1, zext_ln53_fu_845_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            m_address0 <= zext_ln53_fu_845_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            m_address0 <= zext_ln40_3_fu_558_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            m_address0 <= zext_ln40_fu_525_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            m_address0 <= zext_ln36_4_fu_508_p1(6 - 1 downto 0);
        else 
            m_address0 <= "XXXXXX";
        end if; 
    end process;


    m_address1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state5, ap_CS_fsm_state8, zext_ln40_1_fu_536_p1, zext_ln40_2_fu_547_p1, zext_ln40_4_fu_720_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            m_address1 <= zext_ln40_4_fu_720_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            m_address1 <= zext_ln40_2_fu_547_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            m_address1 <= zext_ln40_1_fu_536_p1(6 - 1 downto 0);
        else 
            m_address1 <= "XXXXXX";
        end if; 
    end process;


    m_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_ce0 <= ap_const_logic_1;
        else 
            m_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    m_ce1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_ce1 <= ap_const_logic_1;
        else 
            m_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    m_d0 <= (((data_load_reg_1156 & data_load_1_reg_1161) & data_q0) & data_q1);
    m_d1 <= std_logic_vector(unsigned(add_ln40_5_reg_1204) + unsigned(add_ln40_4_fu_709_p2));

    m_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            m_we0 <= ap_const_logic_1;
        else 
            m_we0 <= ap_const_logic_0;
        end if; 
    end process;


    m_we1_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            m_we1 <= ap_const_logic_1;
        else 
            m_we1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln1_fu_757_p3 <= (trunc_ln53_fu_753_p1 & lshr_ln1_fu_743_p4);
    or_ln2_fu_1000_p3 <= (trunc_ln54_fu_996_p1 & lshr_ln2_fu_986_p4);
    or_ln36_1_fu_477_p2 <= (trunc_ln34_reg_1140 or ap_const_lv6_2);
    or_ln36_2_fu_487_p2 <= (trunc_ln34_reg_1140 or ap_const_lv6_3);
    or_ln36_fu_460_p2 <= (trunc_ln34_fu_456_p1 or ap_const_lv6_1);
    or_ln40_1_fu_599_p3 <= (trunc_ln40_1_fu_595_p1 & lshr_ln40_1_fu_585_p4);
    or_ln40_2_fu_647_p3 <= (trunc_ln40_2_fu_643_p1 & lshr_ln40_3_fu_633_p4);
    or_ln40_3_fu_669_p3 <= (trunc_ln40_3_fu_665_p1 & lshr_ln40_4_fu_655_p4);
    or_ln53_1_fu_779_p3 <= (trunc_ln53_1_fu_775_p1 & lshr_ln53_1_fu_765_p4);
    or_ln53_2_fu_801_p3 <= (trunc_ln53_2_fu_797_p1 & lshr_ln53_2_fu_787_p4);
    or_ln54_1_fu_1022_p3 <= (trunc_ln54_1_fu_1018_p1 & lshr_ln54_1_fu_1008_p4);
    or_ln54_2_fu_1044_p3 <= (trunc_ln54_2_fu_1040_p1 & lshr_ln54_2_fu_1030_p4);
    or_ln_fu_577_p3 <= (trunc_ln40_fu_573_p1 & lshr_ln_fu_563_p4);
    t1_fu_981_p2 <= std_logic_vector(unsigned(add_ln53_2_reg_1232) + unsigned(add_ln53_fu_975_p2));
    trunc_ln34_fu_456_p1 <= j_0_reg_316(6 - 1 downto 0);
    trunc_ln40_1_fu_595_p1 <= reg_435(19 - 1 downto 0);
    trunc_ln40_2_fu_643_p1 <= m_q1(7 - 1 downto 0);
    trunc_ln40_3_fu_665_p1 <= m_q1(18 - 1 downto 0);
    trunc_ln40_fu_573_p1 <= reg_435(17 - 1 downto 0);
    trunc_ln53_1_fu_775_p1 <= f_reg_370(11 - 1 downto 0);
    trunc_ln53_2_fu_797_p1 <= f_reg_370(25 - 1 downto 0);
    trunc_ln53_fu_753_p1 <= f_reg_370(6 - 1 downto 0);
    trunc_ln54_1_fu_1018_p1 <= b_reg_413(13 - 1 downto 0);
    trunc_ln54_2_fu_1040_p1 <= b_reg_413(22 - 1 downto 0);
    trunc_ln54_fu_996_p1 <= b_reg_413(2 - 1 downto 0);
    xor_ln40_1_fu_627_p2 <= (xor_ln40_fu_621_p2 xor or_ln_fu_577_p3);
    xor_ln40_2_fu_691_p2 <= (zext_ln40_6_fu_687_p1 xor or_ln40_3_fu_669_p3);
    xor_ln40_3_fu_697_p2 <= (xor_ln40_2_fu_691_p2 xor or_ln40_2_fu_647_p3);
    xor_ln40_fu_621_p2 <= (zext_ln40_5_fu_617_p1 xor or_ln40_1_fu_599_p3);
    xor_ln53_1_fu_815_p2 <= (xor_ln53_fu_809_p2 xor or_ln53_2_fu_801_p3);
    xor_ln53_2_fu_827_p2 <= (f_reg_370 xor ap_const_lv32_FFFFFFFF);
    xor_ln53_3_fu_839_p2 <= (and_ln53_fu_821_p2 xor and_ln53_1_fu_833_p2);
    xor_ln53_fu_809_p2 <= (or_ln53_1_fu_779_p3 xor or_ln1_fu_757_p3);
    xor_ln54_1_fu_1058_p2 <= (xor_ln54_fu_1052_p2 xor or_ln54_2_fu_1044_p3);
    xor_ln54_2_fu_863_p2 <= (d_reg_391 xor c_reg_402);
    xor_ln54_3_fu_881_p2 <= (and_ln54_fu_869_p2 xor and_ln54_1_fu_875_p2);
    xor_ln54_fu_1052_p2 <= (or_ln54_1_fu_1022_p3 xor or_ln2_fu_1000_p3);
    zext_ln36_1_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln36_fu_460_p2),64));
    zext_ln36_2_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln36_1_fu_477_p2),64));
    zext_ln36_3_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln36_2_fu_487_p2),64));
    zext_ln36_4_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_304),64));
    zext_ln36_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_316),64));
    zext_ln40_1_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_1_fu_530_p2),64));
    zext_ln40_2_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_2_fu_541_p2),64));
    zext_ln40_3_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_3_fu_552_p2),64));
    zext_ln40_4_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_327),64));
    zext_ln40_5_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln40_2_fu_607_p4),32));
    zext_ln40_6_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln40_5_fu_677_p4),32));
    zext_ln40_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_fu_519_p2),64));
    zext_ln53_fu_845_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_424),64));
end behav;
