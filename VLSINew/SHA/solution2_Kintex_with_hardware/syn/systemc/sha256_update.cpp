// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "sha256_update.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic sha256_update::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic sha256_update::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<49> sha256_update::ap_ST_fsm_state1 = "1";
const sc_lv<49> sha256_update::ap_ST_fsm_state2 = "10";
const sc_lv<49> sha256_update::ap_ST_fsm_state3 = "100";
const sc_lv<49> sha256_update::ap_ST_fsm_state4 = "1000";
const sc_lv<49> sha256_update::ap_ST_fsm_state5 = "10000";
const sc_lv<49> sha256_update::ap_ST_fsm_state6 = "100000";
const sc_lv<49> sha256_update::ap_ST_fsm_state7 = "1000000";
const sc_lv<49> sha256_update::ap_ST_fsm_state8 = "10000000";
const sc_lv<49> sha256_update::ap_ST_fsm_state9 = "100000000";
const sc_lv<49> sha256_update::ap_ST_fsm_state10 = "1000000000";
const sc_lv<49> sha256_update::ap_ST_fsm_state11 = "10000000000";
const sc_lv<49> sha256_update::ap_ST_fsm_state12 = "100000000000";
const sc_lv<49> sha256_update::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<49> sha256_update::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<49> sha256_update::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<49> sha256_update::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<49> sha256_update::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<49> sha256_update::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<49> sha256_update::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<49> sha256_update::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<49> sha256_update::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<49> sha256_update::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<49> sha256_update::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<49> sha256_update::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<49> sha256_update::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<49> sha256_update::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<49> sha256_update::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<49> sha256_update::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<49> sha256_update::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<49> sha256_update::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<49> sha256_update::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<49> sha256_update::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<49> sha256_update::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<49> sha256_update::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<49> sha256_update::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<49> sha256_update::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<49> sha256_update::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<49> sha256_update::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<49> sha256_update::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<49> sha256_update::ap_ST_fsm_state40 = "1000000000000000000000000000000000000000";
const sc_lv<49> sha256_update::ap_ST_fsm_state41 = "10000000000000000000000000000000000000000";
const sc_lv<49> sha256_update::ap_ST_fsm_state42 = "100000000000000000000000000000000000000000";
const sc_lv<49> sha256_update::ap_ST_fsm_state43 = "1000000000000000000000000000000000000000000";
const sc_lv<49> sha256_update::ap_ST_fsm_state44 = "10000000000000000000000000000000000000000000";
const sc_lv<49> sha256_update::ap_ST_fsm_state45 = "100000000000000000000000000000000000000000000";
const sc_lv<49> sha256_update::ap_ST_fsm_state46 = "1000000000000000000000000000000000000000000000";
const sc_lv<49> sha256_update::ap_ST_fsm_state47 = "10000000000000000000000000000000000000000000000";
const sc_lv<49> sha256_update::ap_ST_fsm_state48 = "100000000000000000000000000000000000000000000000";
const sc_lv<49> sha256_update::ap_ST_fsm_state49 = "1000000000000000000000000000000000000000000000000";
const sc_lv<32> sha256_update::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> sha256_update::ap_const_lv32_1 = "1";
const sc_lv<1> sha256_update::ap_const_lv1_0 = "0";
const sc_lv<32> sha256_update::ap_const_lv32_2 = "10";
const sc_lv<32> sha256_update::ap_const_lv32_8 = "1000";
const sc_lv<7> sha256_update::ap_const_lv7_0 = "0000000";
const sc_lv<32> sha256_update::ap_const_lv32_30 = "110000";
const sc_lv<32> sha256_update::ap_const_lv32_7 = "111";
const sc_lv<32> sha256_update::ap_const_lv32_9 = "1001";
const sc_lv<32> sha256_update::ap_const_lv32_A = "1010";
const sc_lv<32> sha256_update::ap_const_lv32_B = "1011";
const sc_lv<32> sha256_update::ap_const_lv32_C = "1100";
const sc_lv<32> sha256_update::ap_const_lv32_D = "1101";
const sc_lv<32> sha256_update::ap_const_lv32_E = "1110";
const sc_lv<32> sha256_update::ap_const_lv32_F = "1111";
const sc_lv<32> sha256_update::ap_const_lv32_10 = "10000";
const sc_lv<1> sha256_update::ap_const_lv1_1 = "1";
const sc_lv<2> sha256_update::ap_const_lv2_2 = "10";
const sc_lv<2> sha256_update::ap_const_lv2_1 = "1";
const sc_lv<2> sha256_update::ap_const_lv2_0 = "00";
const sc_lv<2> sha256_update::ap_const_lv2_3 = "11";
const sc_lv<7> sha256_update::ap_const_lv7_1 = "1";
const sc_lv<32> sha256_update::ap_const_lv32_1F = "11111";
const sc_lv<32> sha256_update::ap_const_lv32_40 = "1000000";
const bool sha256_update::ap_const_boolean_1 = true;

sha256_update::sha256_update(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_sha256_transform_fu_246 = new sha256_transform("grp_sha256_transform_fu_246");
    grp_sha256_transform_fu_246->ap_clk(ap_clk);
    grp_sha256_transform_fu_246->ap_rst(ap_rst);
    grp_sha256_transform_fu_246->ap_start(grp_sha256_transform_fu_246_ap_start);
    grp_sha256_transform_fu_246->ap_done(grp_sha256_transform_fu_246_ap_done);
    grp_sha256_transform_fu_246->ap_idle(grp_sha256_transform_fu_246_ap_idle);
    grp_sha256_transform_fu_246->ap_ready(grp_sha256_transform_fu_246_ap_ready);
    grp_sha256_transform_fu_246->ap_ce(ap_var_for_const0);
    grp_sha256_transform_fu_246->ctx_state_0_read(ctx_state_0_0_fu_102);
    grp_sha256_transform_fu_246->ctx_state_1_read(ctx_state_1_0_fu_98);
    grp_sha256_transform_fu_246->ctx_state_2_read(ctx_state_2_0_fu_94);
    grp_sha256_transform_fu_246->ctx_state_3_read(ctx_state_3_0_fu_90);
    grp_sha256_transform_fu_246->ctx_state_4_read(ctx_state_4_0_fu_86);
    grp_sha256_transform_fu_246->ctx_state_5_read(ctx_state_5_0_fu_82);
    grp_sha256_transform_fu_246->ctx_state_6_read(ctx_state_6_0_fu_78);
    grp_sha256_transform_fu_246->ctx_state_7_read(ctx_state_7_0_fu_74);
    grp_sha256_transform_fu_246->data_0_address0(grp_sha256_transform_fu_246_data_0_address0);
    grp_sha256_transform_fu_246->data_0_ce0(grp_sha256_transform_fu_246_data_0_ce0);
    grp_sha256_transform_fu_246->data_0_q0(ctx_data_0_q0);
    grp_sha256_transform_fu_246->data_0_address1(grp_sha256_transform_fu_246_data_0_address1);
    grp_sha256_transform_fu_246->data_0_ce1(grp_sha256_transform_fu_246_data_0_ce1);
    grp_sha256_transform_fu_246->data_0_q1(ctx_data_0_q1);
    grp_sha256_transform_fu_246->data_1_address0(grp_sha256_transform_fu_246_data_1_address0);
    grp_sha256_transform_fu_246->data_1_ce0(grp_sha256_transform_fu_246_data_1_ce0);
    grp_sha256_transform_fu_246->data_1_q0(ctx_data_1_q0);
    grp_sha256_transform_fu_246->data_1_address1(grp_sha256_transform_fu_246_data_1_address1);
    grp_sha256_transform_fu_246->data_1_ce1(grp_sha256_transform_fu_246_data_1_ce1);
    grp_sha256_transform_fu_246->data_1_q1(ctx_data_1_q1);
    grp_sha256_transform_fu_246->data_2_address0(grp_sha256_transform_fu_246_data_2_address0);
    grp_sha256_transform_fu_246->data_2_ce0(grp_sha256_transform_fu_246_data_2_ce0);
    grp_sha256_transform_fu_246->data_2_q0(ctx_data_2_q0);
    grp_sha256_transform_fu_246->data_2_address1(grp_sha256_transform_fu_246_data_2_address1);
    grp_sha256_transform_fu_246->data_2_ce1(grp_sha256_transform_fu_246_data_2_ce1);
    grp_sha256_transform_fu_246->data_2_q1(ctx_data_2_q1);
    grp_sha256_transform_fu_246->data_3_address0(grp_sha256_transform_fu_246_data_3_address0);
    grp_sha256_transform_fu_246->data_3_ce0(grp_sha256_transform_fu_246_data_3_ce0);
    grp_sha256_transform_fu_246->data_3_q0(ctx_data_3_q0);
    grp_sha256_transform_fu_246->data_3_address1(grp_sha256_transform_fu_246_data_3_address1);
    grp_sha256_transform_fu_246->data_3_ce1(grp_sha256_transform_fu_246_data_3_ce1);
    grp_sha256_transform_fu_246->data_3_q1(ctx_data_3_q1);
    grp_sha256_transform_fu_246->ap_return_0(grp_sha256_transform_fu_246_ap_return_0);
    grp_sha256_transform_fu_246->ap_return_1(grp_sha256_transform_fu_246_ap_return_1);
    grp_sha256_transform_fu_246->ap_return_2(grp_sha256_transform_fu_246_ap_return_2);
    grp_sha256_transform_fu_246->ap_return_3(grp_sha256_transform_fu_246_ap_return_3);
    grp_sha256_transform_fu_246->ap_return_4(grp_sha256_transform_fu_246_ap_return_4);
    grp_sha256_transform_fu_246->ap_return_5(grp_sha256_transform_fu_246_ap_return_5);
    grp_sha256_transform_fu_246->ap_return_6(grp_sha256_transform_fu_246_ap_return_6);
    grp_sha256_transform_fu_246->ap_return_7(grp_sha256_transform_fu_246_ap_return_7);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln130_fu_445_p2);
    sensitive << ( ctx_datalen_0_fu_70 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state49);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_NS_fsm_state9);
    sensitive << ( ap_NS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln127_fu_350_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln127_fu_350_p2 );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln127_fu_350_p2 );
    sensitive << ( ctx_datalen_0_fu_70 );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln127_fu_350_p2 );
    sensitive << ( ctx_state_0_0_fu_102 );

    SC_METHOD(thread_ap_return_2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln127_fu_350_p2 );
    sensitive << ( ctx_state_1_0_fu_98 );

    SC_METHOD(thread_ap_return_3);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln127_fu_350_p2 );
    sensitive << ( ctx_state_2_0_fu_94 );

    SC_METHOD(thread_ap_return_4);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln127_fu_350_p2 );
    sensitive << ( ctx_state_3_0_fu_90 );

    SC_METHOD(thread_ap_return_5);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln127_fu_350_p2 );
    sensitive << ( ctx_state_4_0_fu_86 );

    SC_METHOD(thread_ap_return_6);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln127_fu_350_p2 );
    sensitive << ( ctx_state_5_0_fu_82 );

    SC_METHOD(thread_ap_return_7);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln127_fu_350_p2 );
    sensitive << ( ctx_state_6_0_fu_78 );

    SC_METHOD(thread_ap_return_8);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln127_fu_350_p2 );
    sensitive << ( ctx_state_7_0_fu_74 );

    SC_METHOD(thread_ctx_data_0_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_sha256_transform_fu_246_data_0_address0 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( zext_ln129_1_fu_434_p1 );

    SC_METHOD(thread_ctx_data_0_address1);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_sha256_transform_fu_246_data_0_address1 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_ctx_data_0_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_sha256_transform_fu_246_data_0_ce0 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_ctx_data_0_ce1);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_sha256_transform_fu_246_data_0_ce1 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_ctx_data_0_d0);
    sensitive << ( data_q0 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ctx_data_0_we0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( trunc_ln129_fu_420_p1 );

    SC_METHOD(thread_ctx_data_1_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_sha256_transform_fu_246_data_1_address0 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( zext_ln129_1_fu_434_p1 );

    SC_METHOD(thread_ctx_data_1_address1);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_sha256_transform_fu_246_data_1_address1 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_ctx_data_1_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_sha256_transform_fu_246_data_1_ce0 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_ctx_data_1_ce1);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_sha256_transform_fu_246_data_1_ce1 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_ctx_data_1_d0);
    sensitive << ( data_q0 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ctx_data_1_we0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( trunc_ln129_fu_420_p1 );

    SC_METHOD(thread_ctx_data_2_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_sha256_transform_fu_246_data_2_address0 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( zext_ln129_1_fu_434_p1 );

    SC_METHOD(thread_ctx_data_2_address1);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_sha256_transform_fu_246_data_2_address1 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_ctx_data_2_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_sha256_transform_fu_246_data_2_ce0 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_ctx_data_2_ce1);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_sha256_transform_fu_246_data_2_ce1 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_ctx_data_2_d0);
    sensitive << ( data_q0 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ctx_data_2_we0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( trunc_ln129_fu_420_p1 );

    SC_METHOD(thread_ctx_data_3_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_sha256_transform_fu_246_data_3_address0 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( zext_ln129_1_fu_434_p1 );

    SC_METHOD(thread_ctx_data_3_address1);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_sha256_transform_fu_246_data_3_address1 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_ctx_data_3_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_sha256_transform_fu_246_data_3_ce0 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_ctx_data_3_ce1);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_sha256_transform_fu_246_data_3_ce1 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_ctx_data_3_d0);
    sensitive << ( data_q0 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ctx_data_3_we0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( trunc_ln129_fu_420_p1 );

    SC_METHOD(thread_data_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln129_fu_361_p1 );

    SC_METHOD(thread_data_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_empty_fu_301_p1);
    sensitive << ( len );

    SC_METHOD(thread_grp_sha256_transform_fu_246_ap_start);
    sensitive << ( grp_sha256_transform_fu_246_ap_start_reg );

    SC_METHOD(thread_i_fu_355_p2);
    sensitive << ( i_0_reg_235 );

    SC_METHOD(thread_icmp_ln127_fu_350_p2);
    sensitive << ( empty_reg_604 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_235 );

    SC_METHOD(thread_icmp_ln131_fu_451_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( add_ln130_fu_445_p2 );

    SC_METHOD(thread_lshr_ln_fu_424_p4);
    sensitive << ( ctx_datalen_0_fu_70 );

    SC_METHOD(thread_trunc_ln129_fu_420_p1);
    sensitive << ( ctx_datalen_0_fu_70 );

    SC_METHOD(thread_zext_ln129_1_fu_434_p1);
    sensitive << ( lshr_ln_fu_424_p4 );

    SC_METHOD(thread_zext_ln129_fu_361_p1);
    sensitive << ( i_0_reg_235 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln127_fu_350_p2 );
    sensitive << ( icmp_ln131_fu_451_p2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0000000000000000000000000000000000000000000000001";
    grp_sha256_transform_fu_246_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "sha256_update_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ctx_data_0_address0, "(port)ctx_data_0_address0");
    sc_trace(mVcdFile, ctx_data_0_ce0, "(port)ctx_data_0_ce0");
    sc_trace(mVcdFile, ctx_data_0_we0, "(port)ctx_data_0_we0");
    sc_trace(mVcdFile, ctx_data_0_d0, "(port)ctx_data_0_d0");
    sc_trace(mVcdFile, ctx_data_0_q0, "(port)ctx_data_0_q0");
    sc_trace(mVcdFile, ctx_data_0_address1, "(port)ctx_data_0_address1");
    sc_trace(mVcdFile, ctx_data_0_ce1, "(port)ctx_data_0_ce1");
    sc_trace(mVcdFile, ctx_data_0_q1, "(port)ctx_data_0_q1");
    sc_trace(mVcdFile, ctx_data_1_address0, "(port)ctx_data_1_address0");
    sc_trace(mVcdFile, ctx_data_1_ce0, "(port)ctx_data_1_ce0");
    sc_trace(mVcdFile, ctx_data_1_we0, "(port)ctx_data_1_we0");
    sc_trace(mVcdFile, ctx_data_1_d0, "(port)ctx_data_1_d0");
    sc_trace(mVcdFile, ctx_data_1_q0, "(port)ctx_data_1_q0");
    sc_trace(mVcdFile, ctx_data_1_address1, "(port)ctx_data_1_address1");
    sc_trace(mVcdFile, ctx_data_1_ce1, "(port)ctx_data_1_ce1");
    sc_trace(mVcdFile, ctx_data_1_q1, "(port)ctx_data_1_q1");
    sc_trace(mVcdFile, ctx_data_2_address0, "(port)ctx_data_2_address0");
    sc_trace(mVcdFile, ctx_data_2_ce0, "(port)ctx_data_2_ce0");
    sc_trace(mVcdFile, ctx_data_2_we0, "(port)ctx_data_2_we0");
    sc_trace(mVcdFile, ctx_data_2_d0, "(port)ctx_data_2_d0");
    sc_trace(mVcdFile, ctx_data_2_q0, "(port)ctx_data_2_q0");
    sc_trace(mVcdFile, ctx_data_2_address1, "(port)ctx_data_2_address1");
    sc_trace(mVcdFile, ctx_data_2_ce1, "(port)ctx_data_2_ce1");
    sc_trace(mVcdFile, ctx_data_2_q1, "(port)ctx_data_2_q1");
    sc_trace(mVcdFile, ctx_data_3_address0, "(port)ctx_data_3_address0");
    sc_trace(mVcdFile, ctx_data_3_ce0, "(port)ctx_data_3_ce0");
    sc_trace(mVcdFile, ctx_data_3_we0, "(port)ctx_data_3_we0");
    sc_trace(mVcdFile, ctx_data_3_d0, "(port)ctx_data_3_d0");
    sc_trace(mVcdFile, ctx_data_3_q0, "(port)ctx_data_3_q0");
    sc_trace(mVcdFile, ctx_data_3_address1, "(port)ctx_data_3_address1");
    sc_trace(mVcdFile, ctx_data_3_ce1, "(port)ctx_data_3_ce1");
    sc_trace(mVcdFile, ctx_data_3_q1, "(port)ctx_data_3_q1");
    sc_trace(mVcdFile, ctx_datalen_read, "(port)ctx_datalen_read");
    sc_trace(mVcdFile, p_read1, "(port)p_read1");
    sc_trace(mVcdFile, p_read2, "(port)p_read2");
    sc_trace(mVcdFile, p_read3, "(port)p_read3");
    sc_trace(mVcdFile, p_read4, "(port)p_read4");
    sc_trace(mVcdFile, p_read5, "(port)p_read5");
    sc_trace(mVcdFile, p_read6, "(port)p_read6");
    sc_trace(mVcdFile, p_read7, "(port)p_read7");
    sc_trace(mVcdFile, p_read8, "(port)p_read8");
    sc_trace(mVcdFile, data_address0, "(port)data_address0");
    sc_trace(mVcdFile, data_ce0, "(port)data_ce0");
    sc_trace(mVcdFile, data_q0, "(port)data_q0");
    sc_trace(mVcdFile, len, "(port)len");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
    sc_trace(mVcdFile, ap_return_2, "(port)ap_return_2");
    sc_trace(mVcdFile, ap_return_3, "(port)ap_return_3");
    sc_trace(mVcdFile, ap_return_4, "(port)ap_return_4");
    sc_trace(mVcdFile, ap_return_5, "(port)ap_return_5");
    sc_trace(mVcdFile, ap_return_6, "(port)ap_return_6");
    sc_trace(mVcdFile, ap_return_7, "(port)ap_return_7");
    sc_trace(mVcdFile, ap_return_8, "(port)ap_return_8");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, empty_fu_301_p1, "empty_fu_301_p1");
    sc_trace(mVcdFile, empty_reg_604, "empty_reg_604");
    sc_trace(mVcdFile, i_fu_355_p2, "i_fu_355_p2");
    sc_trace(mVcdFile, i_reg_612, "i_reg_612");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln127_fu_350_p2, "icmp_ln127_fu_350_p2");
    sc_trace(mVcdFile, icmp_ln131_fu_451_p2, "icmp_ln131_fu_451_p2");
    sc_trace(mVcdFile, icmp_ln131_reg_625, "icmp_ln131_reg_625");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, grp_sha256_transform_fu_246_ap_start, "grp_sha256_transform_fu_246_ap_start");
    sc_trace(mVcdFile, grp_sha256_transform_fu_246_ap_done, "grp_sha256_transform_fu_246_ap_done");
    sc_trace(mVcdFile, grp_sha256_transform_fu_246_ap_idle, "grp_sha256_transform_fu_246_ap_idle");
    sc_trace(mVcdFile, grp_sha256_transform_fu_246_ap_ready, "grp_sha256_transform_fu_246_ap_ready");
    sc_trace(mVcdFile, grp_sha256_transform_fu_246_data_0_address0, "grp_sha256_transform_fu_246_data_0_address0");
    sc_trace(mVcdFile, grp_sha256_transform_fu_246_data_0_ce0, "grp_sha256_transform_fu_246_data_0_ce0");
    sc_trace(mVcdFile, grp_sha256_transform_fu_246_data_0_address1, "grp_sha256_transform_fu_246_data_0_address1");
    sc_trace(mVcdFile, grp_sha256_transform_fu_246_data_0_ce1, "grp_sha256_transform_fu_246_data_0_ce1");
    sc_trace(mVcdFile, grp_sha256_transform_fu_246_data_1_address0, "grp_sha256_transform_fu_246_data_1_address0");
    sc_trace(mVcdFile, grp_sha256_transform_fu_246_data_1_ce0, "grp_sha256_transform_fu_246_data_1_ce0");
    sc_trace(mVcdFile, grp_sha256_transform_fu_246_data_1_address1, "grp_sha256_transform_fu_246_data_1_address1");
    sc_trace(mVcdFile, grp_sha256_transform_fu_246_data_1_ce1, "grp_sha256_transform_fu_246_data_1_ce1");
    sc_trace(mVcdFile, grp_sha256_transform_fu_246_data_2_address0, "grp_sha256_transform_fu_246_data_2_address0");
    sc_trace(mVcdFile, grp_sha256_transform_fu_246_data_2_ce0, "grp_sha256_transform_fu_246_data_2_ce0");
    sc_trace(mVcdFile, grp_sha256_transform_fu_246_data_2_address1, "grp_sha256_transform_fu_246_data_2_address1");
    sc_trace(mVcdFile, grp_sha256_transform_fu_246_data_2_ce1, "grp_sha256_transform_fu_246_data_2_ce1");
    sc_trace(mVcdFile, grp_sha256_transform_fu_246_data_3_address0, "grp_sha256_transform_fu_246_data_3_address0");
    sc_trace(mVcdFile, grp_sha256_transform_fu_246_data_3_ce0, "grp_sha256_transform_fu_246_data_3_ce0");
    sc_trace(mVcdFile, grp_sha256_transform_fu_246_data_3_address1, "grp_sha256_transform_fu_246_data_3_address1");
    sc_trace(mVcdFile, grp_sha256_transform_fu_246_data_3_ce1, "grp_sha256_transform_fu_246_data_3_ce1");
    sc_trace(mVcdFile, grp_sha256_transform_fu_246_ap_return_0, "grp_sha256_transform_fu_246_ap_return_0");
    sc_trace(mVcdFile, grp_sha256_transform_fu_246_ap_return_1, "grp_sha256_transform_fu_246_ap_return_1");
    sc_trace(mVcdFile, grp_sha256_transform_fu_246_ap_return_2, "grp_sha256_transform_fu_246_ap_return_2");
    sc_trace(mVcdFile, grp_sha256_transform_fu_246_ap_return_3, "grp_sha256_transform_fu_246_ap_return_3");
    sc_trace(mVcdFile, grp_sha256_transform_fu_246_ap_return_4, "grp_sha256_transform_fu_246_ap_return_4");
    sc_trace(mVcdFile, grp_sha256_transform_fu_246_ap_return_5, "grp_sha256_transform_fu_246_ap_return_5");
    sc_trace(mVcdFile, grp_sha256_transform_fu_246_ap_return_6, "grp_sha256_transform_fu_246_ap_return_6");
    sc_trace(mVcdFile, grp_sha256_transform_fu_246_ap_return_7, "grp_sha256_transform_fu_246_ap_return_7");
    sc_trace(mVcdFile, i_0_reg_235, "i_0_reg_235");
    sc_trace(mVcdFile, ap_CS_fsm_state49, "ap_CS_fsm_state49");
    sc_trace(mVcdFile, grp_sha256_transform_fu_246_ap_start_reg, "grp_sha256_transform_fu_246_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_NS_fsm_state9, "ap_NS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, zext_ln129_fu_361_p1, "zext_ln129_fu_361_p1");
    sc_trace(mVcdFile, zext_ln129_1_fu_434_p1, "zext_ln129_1_fu_434_p1");
    sc_trace(mVcdFile, ctx_datalen_0_fu_70, "ctx_datalen_0_fu_70");
    sc_trace(mVcdFile, add_ln130_fu_445_p2, "add_ln130_fu_445_p2");
    sc_trace(mVcdFile, ctx_state_7_0_fu_74, "ctx_state_7_0_fu_74");
    sc_trace(mVcdFile, ctx_state_6_0_fu_78, "ctx_state_6_0_fu_78");
    sc_trace(mVcdFile, ctx_state_5_0_fu_82, "ctx_state_5_0_fu_82");
    sc_trace(mVcdFile, ctx_state_4_0_fu_86, "ctx_state_4_0_fu_86");
    sc_trace(mVcdFile, ctx_state_3_0_fu_90, "ctx_state_3_0_fu_90");
    sc_trace(mVcdFile, ctx_state_2_0_fu_94, "ctx_state_2_0_fu_94");
    sc_trace(mVcdFile, ctx_state_1_0_fu_98, "ctx_state_1_0_fu_98");
    sc_trace(mVcdFile, ctx_state_0_0_fu_102, "ctx_state_0_0_fu_102");
    sc_trace(mVcdFile, trunc_ln129_fu_420_p1, "trunc_ln129_fu_420_p1");
    sc_trace(mVcdFile, lshr_ln_fu_424_p4, "lshr_ln_fu_424_p4");
#endif

    }
}

sha256_update::~sha256_update() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete grp_sha256_transform_fu_246;
}

void sha256_update::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void sha256_update::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln131_fu_451_p2.read(), ap_const_lv1_1))) {
        ctx_datalen_0_fu_70 = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln131_fu_451_p2.read()))) {
        ctx_datalen_0_fu_70 = add_ln130_fu_445_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ctx_datalen_0_fu_70 = ctx_datalen_read.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) && 
         esl_seteq<1,1,1>(icmp_ln131_reg_625.read(), ap_const_lv1_1))) {
        ctx_state_0_0_fu_102 = grp_sha256_transform_fu_246_ap_return_0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ctx_state_0_0_fu_102 = p_read1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) && 
         esl_seteq<1,1,1>(icmp_ln131_reg_625.read(), ap_const_lv1_1))) {
        ctx_state_1_0_fu_98 = grp_sha256_transform_fu_246_ap_return_1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ctx_state_1_0_fu_98 = p_read2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) && 
         esl_seteq<1,1,1>(icmp_ln131_reg_625.read(), ap_const_lv1_1))) {
        ctx_state_2_0_fu_94 = grp_sha256_transform_fu_246_ap_return_2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ctx_state_2_0_fu_94 = p_read3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) && 
         esl_seteq<1,1,1>(icmp_ln131_reg_625.read(), ap_const_lv1_1))) {
        ctx_state_3_0_fu_90 = grp_sha256_transform_fu_246_ap_return_3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ctx_state_3_0_fu_90 = p_read4.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) && 
         esl_seteq<1,1,1>(icmp_ln131_reg_625.read(), ap_const_lv1_1))) {
        ctx_state_4_0_fu_86 = grp_sha256_transform_fu_246_ap_return_4.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ctx_state_4_0_fu_86 = p_read5.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) && 
         esl_seteq<1,1,1>(icmp_ln131_reg_625.read(), ap_const_lv1_1))) {
        ctx_state_5_0_fu_82 = grp_sha256_transform_fu_246_ap_return_5.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ctx_state_5_0_fu_82 = p_read6.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) && 
         esl_seteq<1,1,1>(icmp_ln131_reg_625.read(), ap_const_lv1_1))) {
        ctx_state_6_0_fu_78 = grp_sha256_transform_fu_246_ap_return_6.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ctx_state_6_0_fu_78 = p_read7.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) && 
         esl_seteq<1,1,1>(icmp_ln131_reg_625.read(), ap_const_lv1_1))) {
        ctx_state_7_0_fu_74 = grp_sha256_transform_fu_246_ap_return_7.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ctx_state_7_0_fu_74 = p_read8.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_sha256_transform_fu_246_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_NS_fsm_state9.read()))) {
            grp_sha256_transform_fu_246_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_sha256_transform_fu_246_ap_ready.read())) {
            grp_sha256_transform_fu_246_ap_start_reg = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read())) {
        i_0_reg_235 = i_reg_612.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_235 = ap_const_lv7_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        empty_reg_604 = empty_fu_301_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_612 = i_fu_355_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        icmp_ln131_reg_625 = icmp_ln131_fu_451_p2.read();
    }
}

void sha256_update::thread_add_ln130_fu_445_p2() {
    add_ln130_fu_445_p2 = (!ctx_datalen_0_fu_70.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(ctx_datalen_0_fu_70.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void sha256_update::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void sha256_update::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void sha256_update::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void sha256_update::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void sha256_update::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void sha256_update::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void sha256_update::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void sha256_update::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void sha256_update::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void sha256_update::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void sha256_update::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void sha256_update::thread_ap_CS_fsm_state49() {
    ap_CS_fsm_state49 = ap_CS_fsm.read()[48];
}

void sha256_update::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void sha256_update::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void sha256_update::thread_ap_NS_fsm_state9() {
    ap_NS_fsm_state9 = ap_NS_fsm.read()[8];
}

void sha256_update::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln127_fu_350_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void sha256_update::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void sha256_update::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln127_fu_350_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void sha256_update::thread_ap_return_0() {
    ap_return_0 = ctx_datalen_0_fu_70.read();
}

void sha256_update::thread_ap_return_1() {
    ap_return_1 = ctx_state_0_0_fu_102.read();
}

void sha256_update::thread_ap_return_2() {
    ap_return_2 = ctx_state_1_0_fu_98.read();
}

void sha256_update::thread_ap_return_3() {
    ap_return_3 = ctx_state_2_0_fu_94.read();
}

void sha256_update::thread_ap_return_4() {
    ap_return_4 = ctx_state_3_0_fu_90.read();
}

void sha256_update::thread_ap_return_5() {
    ap_return_5 = ctx_state_4_0_fu_86.read();
}

void sha256_update::thread_ap_return_6() {
    ap_return_6 = ctx_state_5_0_fu_82.read();
}

void sha256_update::thread_ap_return_7() {
    ap_return_7 = ctx_state_6_0_fu_78.read();
}

void sha256_update::thread_ap_return_8() {
    ap_return_8 = ctx_state_7_0_fu_74.read();
}

void sha256_update::thread_ctx_data_0_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ctx_data_0_address0 =  (sc_lv<4>) (zext_ln129_1_fu_434_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        ctx_data_0_address0 = grp_sha256_transform_fu_246_data_0_address0.read();
    } else {
        ctx_data_0_address0 = "XXXX";
    }
}

void sha256_update::thread_ctx_data_0_address1() {
    ctx_data_0_address1 = grp_sha256_transform_fu_246_data_0_address1.read();
}

void sha256_update::thread_ctx_data_0_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ctx_data_0_ce0 = ap_const_logic_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        ctx_data_0_ce0 = grp_sha256_transform_fu_246_data_0_ce0.read();
    } else {
        ctx_data_0_ce0 = ap_const_logic_0;
    }
}

void sha256_update::thread_ctx_data_0_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        ctx_data_0_ce1 = grp_sha256_transform_fu_246_data_0_ce1.read();
    } else {
        ctx_data_0_ce1 = ap_const_logic_0;
    }
}

void sha256_update::thread_ctx_data_0_d0() {
    ctx_data_0_d0 = data_q0.read();
}

void sha256_update::thread_ctx_data_0_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,2,2>(trunc_ln129_fu_420_p1.read(), ap_const_lv2_0))) {
        ctx_data_0_we0 = ap_const_logic_1;
    } else {
        ctx_data_0_we0 = ap_const_logic_0;
    }
}

void sha256_update::thread_ctx_data_1_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ctx_data_1_address0 =  (sc_lv<4>) (zext_ln129_1_fu_434_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        ctx_data_1_address0 = grp_sha256_transform_fu_246_data_1_address0.read();
    } else {
        ctx_data_1_address0 = "XXXX";
    }
}

void sha256_update::thread_ctx_data_1_address1() {
    ctx_data_1_address1 = grp_sha256_transform_fu_246_data_1_address1.read();
}

void sha256_update::thread_ctx_data_1_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ctx_data_1_ce0 = ap_const_logic_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        ctx_data_1_ce0 = grp_sha256_transform_fu_246_data_1_ce0.read();
    } else {
        ctx_data_1_ce0 = ap_const_logic_0;
    }
}

void sha256_update::thread_ctx_data_1_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        ctx_data_1_ce1 = grp_sha256_transform_fu_246_data_1_ce1.read();
    } else {
        ctx_data_1_ce1 = ap_const_logic_0;
    }
}

void sha256_update::thread_ctx_data_1_d0() {
    ctx_data_1_d0 = data_q0.read();
}

void sha256_update::thread_ctx_data_1_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,2,2>(trunc_ln129_fu_420_p1.read(), ap_const_lv2_1))) {
        ctx_data_1_we0 = ap_const_logic_1;
    } else {
        ctx_data_1_we0 = ap_const_logic_0;
    }
}

void sha256_update::thread_ctx_data_2_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ctx_data_2_address0 =  (sc_lv<4>) (zext_ln129_1_fu_434_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        ctx_data_2_address0 = grp_sha256_transform_fu_246_data_2_address0.read();
    } else {
        ctx_data_2_address0 = "XXXX";
    }
}

void sha256_update::thread_ctx_data_2_address1() {
    ctx_data_2_address1 = grp_sha256_transform_fu_246_data_2_address1.read();
}

void sha256_update::thread_ctx_data_2_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ctx_data_2_ce0 = ap_const_logic_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        ctx_data_2_ce0 = grp_sha256_transform_fu_246_data_2_ce0.read();
    } else {
        ctx_data_2_ce0 = ap_const_logic_0;
    }
}

void sha256_update::thread_ctx_data_2_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        ctx_data_2_ce1 = grp_sha256_transform_fu_246_data_2_ce1.read();
    } else {
        ctx_data_2_ce1 = ap_const_logic_0;
    }
}

void sha256_update::thread_ctx_data_2_d0() {
    ctx_data_2_d0 = data_q0.read();
}

void sha256_update::thread_ctx_data_2_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,2,2>(trunc_ln129_fu_420_p1.read(), ap_const_lv2_2))) {
        ctx_data_2_we0 = ap_const_logic_1;
    } else {
        ctx_data_2_we0 = ap_const_logic_0;
    }
}

void sha256_update::thread_ctx_data_3_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ctx_data_3_address0 =  (sc_lv<4>) (zext_ln129_1_fu_434_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        ctx_data_3_address0 = grp_sha256_transform_fu_246_data_3_address0.read();
    } else {
        ctx_data_3_address0 = "XXXX";
    }
}

void sha256_update::thread_ctx_data_3_address1() {
    ctx_data_3_address1 = grp_sha256_transform_fu_246_data_3_address1.read();
}

void sha256_update::thread_ctx_data_3_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ctx_data_3_ce0 = ap_const_logic_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        ctx_data_3_ce0 = grp_sha256_transform_fu_246_data_3_ce0.read();
    } else {
        ctx_data_3_ce0 = ap_const_logic_0;
    }
}

void sha256_update::thread_ctx_data_3_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        ctx_data_3_ce1 = grp_sha256_transform_fu_246_data_3_ce1.read();
    } else {
        ctx_data_3_ce1 = ap_const_logic_0;
    }
}

void sha256_update::thread_ctx_data_3_d0() {
    ctx_data_3_d0 = data_q0.read();
}

void sha256_update::thread_ctx_data_3_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,2,2>(trunc_ln129_fu_420_p1.read(), ap_const_lv2_3))) {
        ctx_data_3_we0 = ap_const_logic_1;
    } else {
        ctx_data_3_we0 = ap_const_logic_0;
    }
}

void sha256_update::thread_data_address0() {
    data_address0 =  (sc_lv<6>) (zext_ln129_fu_361_p1.read());
}

void sha256_update::thread_data_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        data_ce0 = ap_const_logic_1;
    } else {
        data_ce0 = ap_const_logic_0;
    }
}

void sha256_update::thread_empty_fu_301_p1() {
    empty_fu_301_p1 = len.read().range(7-1, 0);
}

void sha256_update::thread_grp_sha256_transform_fu_246_ap_start() {
    grp_sha256_transform_fu_246_ap_start = grp_sha256_transform_fu_246_ap_start_reg.read();
}

void sha256_update::thread_i_fu_355_p2() {
    i_fu_355_p2 = (!i_0_reg_235.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(i_0_reg_235.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void sha256_update::thread_icmp_ln127_fu_350_p2() {
    icmp_ln127_fu_350_p2 = (!i_0_reg_235.read().is_01() || !empty_reg_604.read().is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_235.read() == empty_reg_604.read());
}

void sha256_update::thread_icmp_ln131_fu_451_p2() {
    icmp_ln131_fu_451_p2 = (!add_ln130_fu_445_p2.read().is_01() || !ap_const_lv32_40.is_01())? sc_lv<1>(): sc_lv<1>(add_ln130_fu_445_p2.read() == ap_const_lv32_40);
}

void sha256_update::thread_lshr_ln_fu_424_p4() {
    lshr_ln_fu_424_p4 = ctx_datalen_0_fu_70.read().range(31, 2);
}

void sha256_update::thread_trunc_ln129_fu_420_p1() {
    trunc_ln129_fu_420_p1 = ctx_datalen_0_fu_70.read().range(2-1, 0);
}

void sha256_update::thread_zext_ln129_1_fu_434_p1() {
    zext_ln129_1_fu_434_p1 = esl_zext<64,30>(lshr_ln_fu_424_p4.read());
}

void sha256_update::thread_zext_ln129_fu_361_p1() {
    zext_ln129_fu_361_p1 = esl_zext<64,7>(i_0_reg_235.read());
}

void sha256_update::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln127_fu_350_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln131_fu_451_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state49;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_fsm_state36;
            break;
        case 34359738368 : 
            ap_NS_fsm = ap_ST_fsm_state37;
            break;
        case 68719476736 : 
            ap_NS_fsm = ap_ST_fsm_state38;
            break;
        case 137438953472 : 
            ap_NS_fsm = ap_ST_fsm_state39;
            break;
        case 274877906944 : 
            ap_NS_fsm = ap_ST_fsm_state40;
            break;
        case 549755813888 : 
            ap_NS_fsm = ap_ST_fsm_state41;
            break;
        case 1099511627776 : 
            ap_NS_fsm = ap_ST_fsm_state42;
            break;
        case 2199023255552 : 
            ap_NS_fsm = ap_ST_fsm_state43;
            break;
        case 4398046511104 : 
            ap_NS_fsm = ap_ST_fsm_state44;
            break;
        case 8796093022208 : 
            ap_NS_fsm = ap_ST_fsm_state45;
            break;
        case 17592186044416 : 
            ap_NS_fsm = ap_ST_fsm_state46;
            break;
        case 35184372088832 : 
            ap_NS_fsm = ap_ST_fsm_state47;
            break;
        case 70368744177664 : 
            ap_NS_fsm = ap_ST_fsm_state48;
            break;
        case 140737488355328 : 
            ap_NS_fsm = ap_ST_fsm_state49;
            break;
        case 281474976710656 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<49>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

}

