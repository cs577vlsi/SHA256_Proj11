// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "EP0.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic EP0::ap_const_logic_1 = sc_dt::Log_1;
const bool EP0::ap_const_boolean_1 = true;
const sc_lv<32> EP0::ap_const_lv32_2 = "10";
const sc_lv<32> EP0::ap_const_lv32_1F = "11111";
const sc_lv<32> EP0::ap_const_lv32_D = "1101";
const sc_lv<32> EP0::ap_const_lv32_16 = "10110";
const sc_logic EP0::ap_const_logic_0 = sc_dt::Log_0;

EP0::EP0(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_ready);

    SC_METHOD(thread_ap_return);
    sensitive << ( xor_ln47_fu_96_p2 );
    sensitive << ( or_ln35_5_fu_66_p3 );

    SC_METHOD(thread_lshr_ln35_5_fu_52_p4);
    sensitive << ( x );

    SC_METHOD(thread_lshr_ln35_6_fu_74_p4);
    sensitive << ( x );

    SC_METHOD(thread_lshr_ln_fu_30_p4);
    sensitive << ( x );

    SC_METHOD(thread_or_ln35_5_fu_66_p3);
    sensitive << ( trunc_ln35_5_fu_62_p1 );
    sensitive << ( lshr_ln35_5_fu_52_p4 );

    SC_METHOD(thread_or_ln35_6_fu_88_p3);
    sensitive << ( trunc_ln35_6_fu_84_p1 );
    sensitive << ( lshr_ln35_6_fu_74_p4 );

    SC_METHOD(thread_or_ln_fu_44_p3);
    sensitive << ( trunc_ln35_fu_40_p1 );
    sensitive << ( lshr_ln_fu_30_p4 );

    SC_METHOD(thread_trunc_ln35_5_fu_62_p1);
    sensitive << ( x );

    SC_METHOD(thread_trunc_ln35_6_fu_84_p1);
    sensitive << ( x );

    SC_METHOD(thread_trunc_ln35_fu_40_p1);
    sensitive << ( x );

    SC_METHOD(thread_xor_ln47_fu_96_p2);
    sensitive << ( or_ln_fu_44_p3 );
    sensitive << ( or_ln35_6_fu_88_p3 );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "EP0_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, x, "(port)x");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, trunc_ln35_fu_40_p1, "trunc_ln35_fu_40_p1");
    sc_trace(mVcdFile, lshr_ln_fu_30_p4, "lshr_ln_fu_30_p4");
    sc_trace(mVcdFile, trunc_ln35_5_fu_62_p1, "trunc_ln35_5_fu_62_p1");
    sc_trace(mVcdFile, lshr_ln35_5_fu_52_p4, "lshr_ln35_5_fu_52_p4");
    sc_trace(mVcdFile, trunc_ln35_6_fu_84_p1, "trunc_ln35_6_fu_84_p1");
    sc_trace(mVcdFile, lshr_ln35_6_fu_74_p4, "lshr_ln35_6_fu_74_p4");
    sc_trace(mVcdFile, or_ln_fu_44_p3, "or_ln_fu_44_p3");
    sc_trace(mVcdFile, or_ln35_6_fu_88_p3, "or_ln35_6_fu_88_p3");
    sc_trace(mVcdFile, xor_ln47_fu_96_p2, "xor_ln47_fu_96_p2");
    sc_trace(mVcdFile, or_ln35_5_fu_66_p3, "or_ln35_5_fu_66_p3");
#endif

    }
}

EP0::~EP0() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void EP0::thread_ap_ready() {
    ap_ready = ap_const_logic_1;
}

void EP0::thread_ap_return() {
    ap_return = (xor_ln47_fu_96_p2.read() ^ or_ln35_5_fu_66_p3.read());
}

void EP0::thread_lshr_ln35_5_fu_52_p4() {
    lshr_ln35_5_fu_52_p4 = x.read().range(31, 13);
}

void EP0::thread_lshr_ln35_6_fu_74_p4() {
    lshr_ln35_6_fu_74_p4 = x.read().range(31, 22);
}

void EP0::thread_lshr_ln_fu_30_p4() {
    lshr_ln_fu_30_p4 = x.read().range(31, 2);
}

void EP0::thread_or_ln35_5_fu_66_p3() {
    or_ln35_5_fu_66_p3 = esl_concat<13,19>(trunc_ln35_5_fu_62_p1.read(), lshr_ln35_5_fu_52_p4.read());
}

void EP0::thread_or_ln35_6_fu_88_p3() {
    or_ln35_6_fu_88_p3 = esl_concat<22,10>(trunc_ln35_6_fu_84_p1.read(), lshr_ln35_6_fu_74_p4.read());
}

void EP0::thread_or_ln_fu_44_p3() {
    or_ln_fu_44_p3 = esl_concat<2,30>(trunc_ln35_fu_40_p1.read(), lshr_ln_fu_30_p4.read());
}

void EP0::thread_trunc_ln35_5_fu_62_p1() {
    trunc_ln35_5_fu_62_p1 = x.read().range(13-1, 0);
}

void EP0::thread_trunc_ln35_6_fu_84_p1() {
    trunc_ln35_6_fu_84_p1 = x.read().range(22-1, 0);
}

void EP0::thread_trunc_ln35_fu_40_p1() {
    trunc_ln35_fu_40_p1 = x.read().range(2-1, 0);
}

void EP0::thread_xor_ln47_fu_96_p2() {
    xor_ln47_fu_96_p2 = (or_ln_fu_44_p3.read() ^ or_ln35_6_fu_88_p3.read());
}

}

