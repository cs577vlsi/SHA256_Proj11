// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sha256_update (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ctx_data_0_address0,
        ctx_data_0_ce0,
        ctx_data_0_we0,
        ctx_data_0_d0,
        ctx_data_0_q0,
        ctx_data_0_address1,
        ctx_data_0_ce1,
        ctx_data_0_q1,
        ctx_data_1_address0,
        ctx_data_1_ce0,
        ctx_data_1_we0,
        ctx_data_1_d0,
        ctx_data_1_q0,
        ctx_data_1_address1,
        ctx_data_1_ce1,
        ctx_data_1_q1,
        ctx_data_2_address0,
        ctx_data_2_ce0,
        ctx_data_2_we0,
        ctx_data_2_d0,
        ctx_data_2_q0,
        ctx_data_2_address1,
        ctx_data_2_ce1,
        ctx_data_2_q1,
        ctx_data_3_address0,
        ctx_data_3_ce0,
        ctx_data_3_we0,
        ctx_data_3_d0,
        ctx_data_3_q0,
        ctx_data_3_address1,
        ctx_data_3_ce1,
        ctx_data_3_q1,
        ctx_datalen_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        p_read8,
        p_read9,
        p_read10,
        data_address0,
        data_ce0,
        data_q0,
        len,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10
);

parameter    ap_ST_fsm_state1 = 48'd1;
parameter    ap_ST_fsm_state2 = 48'd2;
parameter    ap_ST_fsm_state3 = 48'd4;
parameter    ap_ST_fsm_state4 = 48'd8;
parameter    ap_ST_fsm_state5 = 48'd16;
parameter    ap_ST_fsm_state6 = 48'd32;
parameter    ap_ST_fsm_state7 = 48'd64;
parameter    ap_ST_fsm_state8 = 48'd128;
parameter    ap_ST_fsm_state9 = 48'd256;
parameter    ap_ST_fsm_state10 = 48'd512;
parameter    ap_ST_fsm_state11 = 48'd1024;
parameter    ap_ST_fsm_state12 = 48'd2048;
parameter    ap_ST_fsm_state13 = 48'd4096;
parameter    ap_ST_fsm_state14 = 48'd8192;
parameter    ap_ST_fsm_state15 = 48'd16384;
parameter    ap_ST_fsm_state16 = 48'd32768;
parameter    ap_ST_fsm_state17 = 48'd65536;
parameter    ap_ST_fsm_state18 = 48'd131072;
parameter    ap_ST_fsm_state19 = 48'd262144;
parameter    ap_ST_fsm_state20 = 48'd524288;
parameter    ap_ST_fsm_state21 = 48'd1048576;
parameter    ap_ST_fsm_state22 = 48'd2097152;
parameter    ap_ST_fsm_state23 = 48'd4194304;
parameter    ap_ST_fsm_state24 = 48'd8388608;
parameter    ap_ST_fsm_state25 = 48'd16777216;
parameter    ap_ST_fsm_state26 = 48'd33554432;
parameter    ap_ST_fsm_state27 = 48'd67108864;
parameter    ap_ST_fsm_state28 = 48'd134217728;
parameter    ap_ST_fsm_state29 = 48'd268435456;
parameter    ap_ST_fsm_state30 = 48'd536870912;
parameter    ap_ST_fsm_state31 = 48'd1073741824;
parameter    ap_ST_fsm_state32 = 48'd2147483648;
parameter    ap_ST_fsm_state33 = 48'd4294967296;
parameter    ap_ST_fsm_state34 = 48'd8589934592;
parameter    ap_ST_fsm_state35 = 48'd17179869184;
parameter    ap_ST_fsm_state36 = 48'd34359738368;
parameter    ap_ST_fsm_state37 = 48'd68719476736;
parameter    ap_ST_fsm_state38 = 48'd137438953472;
parameter    ap_ST_fsm_state39 = 48'd274877906944;
parameter    ap_ST_fsm_state40 = 48'd549755813888;
parameter    ap_ST_fsm_state41 = 48'd1099511627776;
parameter    ap_ST_fsm_state42 = 48'd2199023255552;
parameter    ap_ST_fsm_state43 = 48'd4398046511104;
parameter    ap_ST_fsm_state44 = 48'd8796093022208;
parameter    ap_ST_fsm_state45 = 48'd17592186044416;
parameter    ap_ST_fsm_state46 = 48'd35184372088832;
parameter    ap_ST_fsm_state47 = 48'd70368744177664;
parameter    ap_ST_fsm_state48 = 48'd140737488355328;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] ctx_data_0_address0;
output   ctx_data_0_ce0;
output   ctx_data_0_we0;
output  [7:0] ctx_data_0_d0;
input  [7:0] ctx_data_0_q0;
output  [3:0] ctx_data_0_address1;
output   ctx_data_0_ce1;
input  [7:0] ctx_data_0_q1;
output  [3:0] ctx_data_1_address0;
output   ctx_data_1_ce0;
output   ctx_data_1_we0;
output  [7:0] ctx_data_1_d0;
input  [7:0] ctx_data_1_q0;
output  [3:0] ctx_data_1_address1;
output   ctx_data_1_ce1;
input  [7:0] ctx_data_1_q1;
output  [3:0] ctx_data_2_address0;
output   ctx_data_2_ce0;
output   ctx_data_2_we0;
output  [7:0] ctx_data_2_d0;
input  [7:0] ctx_data_2_q0;
output  [3:0] ctx_data_2_address1;
output   ctx_data_2_ce1;
input  [7:0] ctx_data_2_q1;
output  [3:0] ctx_data_3_address0;
output   ctx_data_3_ce0;
output   ctx_data_3_we0;
output  [7:0] ctx_data_3_d0;
input  [7:0] ctx_data_3_q0;
output  [3:0] ctx_data_3_address1;
output   ctx_data_3_ce1;
input  [7:0] ctx_data_3_q1;
input  [31:0] ctx_datalen_read;
input  [31:0] p_read1;
input  [31:0] p_read2;
input  [31:0] p_read3;
input  [31:0] p_read4;
input  [31:0] p_read5;
input  [31:0] p_read6;
input  [31:0] p_read7;
input  [31:0] p_read8;
input  [31:0] p_read9;
input  [31:0] p_read10;
output  [5:0] data_address0;
output   data_ce0;
input  [7:0] data_q0;
input  [31:0] len;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;
output  [31:0] ap_return_3;
output  [31:0] ap_return_4;
output  [31:0] ap_return_5;
output  [31:0] ap_return_6;
output  [31:0] ap_return_7;
output  [31:0] ap_return_8;
output  [31:0] ap_return_9;
output  [31:0] ap_return_10;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] ctx_data_0_address0;
reg ctx_data_0_ce0;
reg ctx_data_0_we0;
reg ctx_data_0_ce1;
reg[3:0] ctx_data_1_address0;
reg ctx_data_1_ce0;
reg ctx_data_1_we0;
reg ctx_data_1_ce1;
reg[3:0] ctx_data_2_address0;
reg ctx_data_2_ce0;
reg ctx_data_2_we0;
reg ctx_data_2_ce1;
reg[3:0] ctx_data_3_address0;
reg ctx_data_3_ce0;
reg ctx_data_3_we0;
reg ctx_data_3_ce1;
reg data_ce0;

(* fsm_encoding = "none" *) reg   [47:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] empty_fu_335_p1;
reg   [6:0] empty_reg_710;
wire   [6:0] i_fu_399_p2;
reg   [6:0] i_reg_718;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln95_fu_394_p2;
wire   [0:0] icmp_ln99_fu_507_p2;
reg   [0:0] icmp_ln99_reg_731;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state9;
wire    grp_sha256_transform_fu_274_ap_start;
wire    grp_sha256_transform_fu_274_ap_done;
wire    grp_sha256_transform_fu_274_ap_idle;
wire    grp_sha256_transform_fu_274_ap_ready;
wire   [3:0] grp_sha256_transform_fu_274_data_0_address0;
wire    grp_sha256_transform_fu_274_data_0_ce0;
wire   [3:0] grp_sha256_transform_fu_274_data_0_address1;
wire    grp_sha256_transform_fu_274_data_0_ce1;
wire   [3:0] grp_sha256_transform_fu_274_data_1_address0;
wire    grp_sha256_transform_fu_274_data_1_ce0;
wire   [3:0] grp_sha256_transform_fu_274_data_1_address1;
wire    grp_sha256_transform_fu_274_data_1_ce1;
wire   [3:0] grp_sha256_transform_fu_274_data_2_address0;
wire    grp_sha256_transform_fu_274_data_2_ce0;
wire   [3:0] grp_sha256_transform_fu_274_data_2_address1;
wire    grp_sha256_transform_fu_274_data_2_ce1;
wire   [3:0] grp_sha256_transform_fu_274_data_3_address0;
wire    grp_sha256_transform_fu_274_data_3_ce0;
wire   [3:0] grp_sha256_transform_fu_274_data_3_address1;
wire    grp_sha256_transform_fu_274_data_3_ce1;
wire   [31:0] grp_sha256_transform_fu_274_ap_return_0;
wire   [31:0] grp_sha256_transform_fu_274_ap_return_1;
wire   [31:0] grp_sha256_transform_fu_274_ap_return_2;
wire   [31:0] grp_sha256_transform_fu_274_ap_return_3;
wire   [31:0] grp_sha256_transform_fu_274_ap_return_4;
wire   [31:0] grp_sha256_transform_fu_274_ap_return_5;
wire   [31:0] grp_sha256_transform_fu_274_ap_return_6;
wire   [31:0] grp_sha256_transform_fu_274_ap_return_7;
reg   [6:0] i_0_reg_263;
wire    ap_CS_fsm_state48;
reg    grp_sha256_transform_fu_274_ap_start_reg;
wire    ap_CS_fsm_state8;
reg   [47:0] ap_NS_fsm;
wire    ap_NS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire   [63:0] zext_ln97_fu_405_p1;
wire   [63:0] zext_ln97_1_fu_490_p1;
reg   [31:0] ctx_datalen_0_fu_78;
wire   [31:0] add_ln98_fu_501_p2;
reg   [31:0] ctx_state_7_0_fu_82;
reg   [31:0] ctx_state_6_0_fu_86;
reg   [31:0] ctx_state_5_0_fu_90;
reg   [31:0] ctx_state_4_0_fu_94;
reg   [31:0] ctx_state_3_0_fu_98;
reg   [31:0] ctx_state_2_0_fu_102;
reg   [31:0] ctx_state_1_0_fu_106;
reg   [31:0] ctx_state_0_0_fu_110;
reg   [31:0] ctx_bitlen_1_0_fu_114;
wire   [31:0] select_ln101_fu_567_p3;
reg   [31:0] ctx_bitlen_0_0_fu_118;
wire   [31:0] add_ln101_1_fu_575_p2;
wire   [1:0] trunc_ln97_fu_476_p1;
wire   [29:0] lshr_ln_fu_480_p4;
wire   [0:0] icmp_ln101_fu_555_p2;
wire   [31:0] add_ln101_fu_561_p2;

// power-on initialization
initial begin
#0 ap_CS_fsm = 48'd1;
#0 grp_sha256_transform_fu_274_ap_start_reg = 1'b0;
end

sha256_transform grp_sha256_transform_fu_274(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_sha256_transform_fu_274_ap_start),
    .ap_done(grp_sha256_transform_fu_274_ap_done),
    .ap_idle(grp_sha256_transform_fu_274_ap_idle),
    .ap_ready(grp_sha256_transform_fu_274_ap_ready),
    .ap_ce(1'b1),
    .ctx_state_0_read(ctx_state_0_0_fu_110),
    .ctx_state_1_read(ctx_state_1_0_fu_106),
    .ctx_state_2_read(ctx_state_2_0_fu_102),
    .ctx_state_3_read(ctx_state_3_0_fu_98),
    .ctx_state_4_read(ctx_state_4_0_fu_94),
    .ctx_state_5_read(ctx_state_5_0_fu_90),
    .ctx_state_6_read(ctx_state_6_0_fu_86),
    .ctx_state_7_read(ctx_state_7_0_fu_82),
    .data_0_address0(grp_sha256_transform_fu_274_data_0_address0),
    .data_0_ce0(grp_sha256_transform_fu_274_data_0_ce0),
    .data_0_q0(ctx_data_0_q0),
    .data_0_address1(grp_sha256_transform_fu_274_data_0_address1),
    .data_0_ce1(grp_sha256_transform_fu_274_data_0_ce1),
    .data_0_q1(ctx_data_0_q1),
    .data_1_address0(grp_sha256_transform_fu_274_data_1_address0),
    .data_1_ce0(grp_sha256_transform_fu_274_data_1_ce0),
    .data_1_q0(ctx_data_1_q0),
    .data_1_address1(grp_sha256_transform_fu_274_data_1_address1),
    .data_1_ce1(grp_sha256_transform_fu_274_data_1_ce1),
    .data_1_q1(ctx_data_1_q1),
    .data_2_address0(grp_sha256_transform_fu_274_data_2_address0),
    .data_2_ce0(grp_sha256_transform_fu_274_data_2_ce0),
    .data_2_q0(ctx_data_2_q0),
    .data_2_address1(grp_sha256_transform_fu_274_data_2_address1),
    .data_2_ce1(grp_sha256_transform_fu_274_data_2_ce1),
    .data_2_q1(ctx_data_2_q1),
    .data_3_address0(grp_sha256_transform_fu_274_data_3_address0),
    .data_3_ce0(grp_sha256_transform_fu_274_data_3_ce0),
    .data_3_q0(ctx_data_3_q0),
    .data_3_address1(grp_sha256_transform_fu_274_data_3_address1),
    .data_3_ce1(grp_sha256_transform_fu_274_data_3_ce1),
    .data_3_q1(ctx_data_3_q1),
    .ap_return_0(grp_sha256_transform_fu_274_ap_return_0),
    .ap_return_1(grp_sha256_transform_fu_274_ap_return_1),
    .ap_return_2(grp_sha256_transform_fu_274_ap_return_2),
    .ap_return_3(grp_sha256_transform_fu_274_ap_return_3),
    .ap_return_4(grp_sha256_transform_fu_274_ap_return_4),
    .ap_return_5(grp_sha256_transform_fu_274_ap_return_5),
    .ap_return_6(grp_sha256_transform_fu_274_ap_return_6),
    .ap_return_7(grp_sha256_transform_fu_274_ap_return_7)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_sha256_transform_fu_274_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state9) & (1'b1 == ap_CS_fsm_state8))) begin
            grp_sha256_transform_fu_274_ap_start_reg <= 1'b1;
        end else if ((grp_sha256_transform_fu_274_ap_ready == 1'b1)) begin
            grp_sha256_transform_fu_274_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state48) & (icmp_ln99_reg_731 == 1'd1))) begin
        ctx_bitlen_0_0_fu_118 <= add_ln101_1_fu_575_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ctx_bitlen_0_0_fu_118 <= p_read1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state48) & (icmp_ln99_reg_731 == 1'd1))) begin
        ctx_bitlen_1_0_fu_114 <= select_ln101_fu_567_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ctx_bitlen_1_0_fu_114 <= p_read2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln99_fu_507_p2 == 1'd1))) begin
        ctx_datalen_0_fu_78 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln99_fu_507_p2 == 1'd0))) begin
        ctx_datalen_0_fu_78 <= add_ln98_fu_501_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ctx_datalen_0_fu_78 <= ctx_datalen_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state48) & (icmp_ln99_reg_731 == 1'd1))) begin
        ctx_state_0_0_fu_110 <= grp_sha256_transform_fu_274_ap_return_0;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ctx_state_0_0_fu_110 <= p_read3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state48) & (icmp_ln99_reg_731 == 1'd1))) begin
        ctx_state_1_0_fu_106 <= grp_sha256_transform_fu_274_ap_return_1;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ctx_state_1_0_fu_106 <= p_read4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state48) & (icmp_ln99_reg_731 == 1'd1))) begin
        ctx_state_2_0_fu_102 <= grp_sha256_transform_fu_274_ap_return_2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ctx_state_2_0_fu_102 <= p_read5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state48) & (icmp_ln99_reg_731 == 1'd1))) begin
        ctx_state_3_0_fu_98 <= grp_sha256_transform_fu_274_ap_return_3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ctx_state_3_0_fu_98 <= p_read6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state48) & (icmp_ln99_reg_731 == 1'd1))) begin
        ctx_state_4_0_fu_94 <= grp_sha256_transform_fu_274_ap_return_4;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ctx_state_4_0_fu_94 <= p_read7;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state48) & (icmp_ln99_reg_731 == 1'd1))) begin
        ctx_state_5_0_fu_90 <= grp_sha256_transform_fu_274_ap_return_5;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ctx_state_5_0_fu_90 <= p_read8;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state48) & (icmp_ln99_reg_731 == 1'd1))) begin
        ctx_state_6_0_fu_86 <= grp_sha256_transform_fu_274_ap_return_6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ctx_state_6_0_fu_86 <= p_read9;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state48) & (icmp_ln99_reg_731 == 1'd1))) begin
        ctx_state_7_0_fu_82 <= grp_sha256_transform_fu_274_ap_return_7;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ctx_state_7_0_fu_82 <= p_read10;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        i_0_reg_263 <= i_reg_718;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_263 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_reg_710 <= empty_fu_335_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_718 <= i_fu_399_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        icmp_ln99_reg_731 <= icmp_ln99_fu_507_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln95_fu_394_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln95_fu_394_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ctx_data_0_address0 = zext_ln97_1_fu_490_p1;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        ctx_data_0_address0 = grp_sha256_transform_fu_274_data_0_address0;
    end else begin
        ctx_data_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ctx_data_0_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        ctx_data_0_ce0 = grp_sha256_transform_fu_274_data_0_ce0;
    end else begin
        ctx_data_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        ctx_data_0_ce1 = grp_sha256_transform_fu_274_data_0_ce1;
    end else begin
        ctx_data_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln97_fu_476_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        ctx_data_0_we0 = 1'b1;
    end else begin
        ctx_data_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ctx_data_1_address0 = zext_ln97_1_fu_490_p1;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        ctx_data_1_address0 = grp_sha256_transform_fu_274_data_1_address0;
    end else begin
        ctx_data_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ctx_data_1_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        ctx_data_1_ce0 = grp_sha256_transform_fu_274_data_1_ce0;
    end else begin
        ctx_data_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        ctx_data_1_ce1 = grp_sha256_transform_fu_274_data_1_ce1;
    end else begin
        ctx_data_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln97_fu_476_p1 == 2'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ctx_data_1_we0 = 1'b1;
    end else begin
        ctx_data_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ctx_data_2_address0 = zext_ln97_1_fu_490_p1;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        ctx_data_2_address0 = grp_sha256_transform_fu_274_data_2_address0;
    end else begin
        ctx_data_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ctx_data_2_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        ctx_data_2_ce0 = grp_sha256_transform_fu_274_data_2_ce0;
    end else begin
        ctx_data_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        ctx_data_2_ce1 = grp_sha256_transform_fu_274_data_2_ce1;
    end else begin
        ctx_data_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln97_fu_476_p1 == 2'd2) & (1'b1 == ap_CS_fsm_state3))) begin
        ctx_data_2_we0 = 1'b1;
    end else begin
        ctx_data_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ctx_data_3_address0 = zext_ln97_1_fu_490_p1;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        ctx_data_3_address0 = grp_sha256_transform_fu_274_data_3_address0;
    end else begin
        ctx_data_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ctx_data_3_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        ctx_data_3_ce0 = grp_sha256_transform_fu_274_data_3_ce0;
    end else begin
        ctx_data_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        ctx_data_3_ce1 = grp_sha256_transform_fu_274_data_3_ce1;
    end else begin
        ctx_data_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln97_fu_476_p1 == 2'd3) & (1'b1 == ap_CS_fsm_state3))) begin
        ctx_data_3_we0 = 1'b1;
    end else begin
        ctx_data_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data_ce0 = 1'b1;
    end else begin
        data_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln95_fu_394_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln99_fu_507_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln101_1_fu_575_p2 = (ctx_bitlen_0_0_fu_118 + 32'd512);

assign add_ln101_fu_561_p2 = (ctx_bitlen_1_0_fu_114 + 32'd1);

assign add_ln98_fu_501_p2 = (ctx_datalen_0_fu_78 + 32'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_NS_fsm_state9 = ap_NS_fsm[32'd8];

assign ap_return_0 = ctx_datalen_0_fu_78;

assign ap_return_1 = ctx_bitlen_0_0_fu_118;

assign ap_return_10 = ctx_state_7_0_fu_82;

assign ap_return_2 = ctx_bitlen_1_0_fu_114;

assign ap_return_3 = ctx_state_0_0_fu_110;

assign ap_return_4 = ctx_state_1_0_fu_106;

assign ap_return_5 = ctx_state_2_0_fu_102;

assign ap_return_6 = ctx_state_3_0_fu_98;

assign ap_return_7 = ctx_state_4_0_fu_94;

assign ap_return_8 = ctx_state_5_0_fu_90;

assign ap_return_9 = ctx_state_6_0_fu_86;

assign ctx_data_0_address1 = grp_sha256_transform_fu_274_data_0_address1;

assign ctx_data_0_d0 = data_q0;

assign ctx_data_1_address1 = grp_sha256_transform_fu_274_data_1_address1;

assign ctx_data_1_d0 = data_q0;

assign ctx_data_2_address1 = grp_sha256_transform_fu_274_data_2_address1;

assign ctx_data_2_d0 = data_q0;

assign ctx_data_3_address1 = grp_sha256_transform_fu_274_data_3_address1;

assign ctx_data_3_d0 = data_q0;

assign data_address0 = zext_ln97_fu_405_p1;

assign empty_fu_335_p1 = len[6:0];

assign grp_sha256_transform_fu_274_ap_start = grp_sha256_transform_fu_274_ap_start_reg;

assign i_fu_399_p2 = (i_0_reg_263 + 7'd1);

assign icmp_ln101_fu_555_p2 = ((ctx_bitlen_0_0_fu_118 > 32'd4294966783) ? 1'b1 : 1'b0);

assign icmp_ln95_fu_394_p2 = ((i_0_reg_263 == empty_reg_710) ? 1'b1 : 1'b0);

assign icmp_ln99_fu_507_p2 = ((add_ln98_fu_501_p2 == 32'd64) ? 1'b1 : 1'b0);

assign lshr_ln_fu_480_p4 = {{ctx_datalen_0_fu_78[31:2]}};

assign select_ln101_fu_567_p3 = ((icmp_ln101_fu_555_p2[0:0] === 1'b1) ? add_ln101_fu_561_p2 : ctx_bitlen_1_0_fu_114);

assign trunc_ln97_fu_476_p1 = ctx_datalen_0_fu_78[1:0];

assign zext_ln97_1_fu_490_p1 = lshr_ln_fu_480_p4;

assign zext_ln97_fu_405_p1 = i_0_reg_263;

endmodule //sha256_update
