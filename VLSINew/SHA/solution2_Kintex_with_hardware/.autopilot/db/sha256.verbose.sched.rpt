

================================================================
== Vivado HLS Report for 'sha256'
================================================================
* Date:           Wed Apr 14 12:12:40 2021

* Version:        2019.1 (Build 2552052 on Fri May 24 15:28:33 MDT 2019)
* Project:        SHA
* Solution:       solution2_Kintex_with_hardware
* Product family: kintexu
* Target device:  xcku025-ffva1156-1-c


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|     8.750|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-------+-----+-------+---------+
    |   Latency   |   Interval  | Pipeline|
    | min |  max  | min |  max  |   Type  |
    +-----+-------+-----+-------+---------+
    |  461|  18187|  461|  18187|   none  |
    +-----+-------+-----+-------+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-------------+-----+-------+----------+-----------+-----------+----------+----------+
        |             |   Latency   | Iteration|  Initiation Interval  |   Trip   |          |
        |  Loop Name  | min |  max  |  Latency |  achieved |   target  |   Count  | Pipelined|
        +-------------+-----+-------+----------+-----------+-----------+----------+----------+
        |- Loop 1     |  336|  18000| 28 ~ 180 |          -|          -| 12 ~ 100 |    no    |
        | + Loop 1.1  |  128|    128|         2|          -|          -|        64|    no    |
        | + Loop 1.2  |   24|    126|         2|          -|          -|  12 ~ 63 |    no    |
        |- Loop 2     |   64|     64|         2|          -|          -|        32|    no    |
        +-------------+-----+-------+----------+-----------+-----------+----------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 10
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 8 3 6 
3 --> 4 5 
4 --> 3 
5 --> 2 
6 --> 5 7 
7 --> 6 
8 --> 9 
9 --> 10 
10 --> 9 

* FSM state operations: 

State 1 <SV = 0> <Delay = 2.09>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%n_0 = alloca i32"   --->   Operation 11 'alloca' 'n_0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%sha256ctx_datalen_1 = alloca i32"   --->   Operation 12 'alloca' 'sha256ctx_datalen_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%sha256ctx_state_7_2 = alloca i32"   --->   Operation 13 'alloca' 'sha256ctx_state_7_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "%sha256ctx_state_6_2 = alloca i32"   --->   Operation 14 'alloca' 'sha256ctx_state_6_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "%sha256ctx_state_0_2 = alloca i32"   --->   Operation 15 'alloca' 'sha256ctx_state_0_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "%sha256ctx_state_1_2 = alloca i32"   --->   Operation 16 'alloca' 'sha256ctx_state_1_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "%sha256ctx_state_2_2 = alloca i32"   --->   Operation 17 'alloca' 'sha256ctx_state_2_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%sha256ctx_state_3_2 = alloca i32"   --->   Operation 18 'alloca' 'sha256ctx_state_3_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "%sha256ctx_state_4_2 = alloca i32"   --->   Operation 19 'alloca' 'sha256ctx_state_4_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "%sha256ctx_state_5_2 = alloca i32"   --->   Operation 20 'alloca' 'sha256ctx_state_5_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "%seg_offset_1 = alloca i32"   --->   Operation 21 'alloca' 'seg_offset_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap([256 x i8]* %data) nounwind, !map !46"   --->   Operation 22 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 23 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i32 %base_offset) nounwind, !map !52"   --->   Operation 23 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i32 %bytes) nounwind, !map !58"   --->   Operation 24 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 25 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap([32 x i8]* %digest) nounwind, !map !62"   --->   Operation 25 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 26 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecTopModule([7 x i8]* @sha256_str) nounwind"   --->   Operation 26 'spectopmodule' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 27 [1/1] (1.00ns)   --->   "%bytes_read = call i32 @_ssdm_op_Read.s_axilite.i32(i32 %bytes) nounwind"   --->   Operation 27 'read' 'bytes_read' <Predicate = true> <Delay = 1.00> <Core = "s_axilite">   --->   Core 10 's_axilite' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write'>
ST_1 : Operation 28 [1/1] (1.00ns)   --->   "%base_offset_read = call i32 @_ssdm_op_Read.s_axilite.i32(i32 %base_offset) nounwind"   --->   Operation 28 'read' 'base_offset_read' <Predicate = true> <Delay = 1.00> <Core = "s_axilite">   --->   Core 10 's_axilite' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write'>
ST_1 : Operation 29 [1/1] (0.00ns)   --->   "%seg_buf = alloca [64 x i8], align 16" [SHA_new/SHA_new/sha256.c:23]   --->   Operation 29 'alloca' 'seg_buf' <Predicate = true> <Delay = 0.00> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 0.85> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 64> <RAM>
ST_1 : Operation 30 [1/1] (0.00ns)   --->   "%sha256ctx_data_0 = alloca [16 x i8], align 1" [SHA_new/SHA_new/sha256.c:29]   --->   Operation 30 'alloca' 'sha256ctx_data_0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 31 [1/1] (0.00ns)   --->   "%sha256ctx_data_1 = alloca [16 x i8], align 1" [SHA_new/SHA_new/sha256.c:29]   --->   Operation 31 'alloca' 'sha256ctx_data_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 32 [1/1] (0.00ns)   --->   "%sha256ctx_data_2 = alloca [16 x i8], align 1" [SHA_new/SHA_new/sha256.c:29]   --->   Operation 32 'alloca' 'sha256ctx_data_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 33 [1/1] (0.00ns)   --->   "%sha256ctx_data_3 = alloca [16 x i8], align 1" [SHA_new/SHA_new/sha256.c:29]   --->   Operation 33 'alloca' 'sha256ctx_data_3' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 34 [1/1] (0.00ns)   --->   "%empty = call i32 (...)* @_ssdm_op_SpecMemCore([256 x i8]* %data, [1 x i8]* @p_str3, [7 x i8]* @RAM_1P_str, [1 x i8]* @p_str3, i32 -1, [1 x i8]* @p_str3, [1 x i8]* @p_str3, [1 x i8]* @p_str3, [1 x i8]* @p_str3, [1 x i8]* @p_str3) nounwind" [SHA_new/SHA_new/sha256.c:16]   --->   Operation 34 'specmemcore' 'empty' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 35 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface([256 x i8]* %data, [10 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind" [SHA_new/SHA_new/sha256.c:16]   --->   Operation 35 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 36 [1/1] (0.00ns)   --->   "%empty_9 = call i32 (...)* @_ssdm_op_SpecMemCore([32 x i8]* %digest, [1 x i8]* @p_str4, [7 x i8]* @RAM_1P_str, [1 x i8]* @p_str4, i32 -1, [1 x i8]* @p_str4, [1 x i8]* @p_str4, [1 x i8]* @p_str4, [1 x i8]* @p_str4, [1 x i8]* @p_str4) nounwind" [SHA_new/SHA_new/sha256.c:17]   --->   Operation 36 'specmemcore' 'empty_9' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 37 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface([32 x i8]* %digest, [10 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind" [SHA_new/SHA_new/sha256.c:17]   --->   Operation 37 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 38 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i32 %base_offset, [10 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind" [SHA_new/SHA_new/sha256.c:18]   --->   Operation 38 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 39 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i32 %bytes, [10 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind" [SHA_new/SHA_new/sha256.c:19]   --->   Operation 39 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 40 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i32 0, [10 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind" [SHA_new/SHA_new/sha256.c:20]   --->   Operation 40 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 41 [1/1] (0.00ns)   --->   "%trunc_ln33 = trunc i32 %base_offset_read to i10" [SHA_new/SHA_new/sha256.c:33]   --->   Operation 41 'trunc' 'trunc_ln33' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 42 [1/1] (1.02ns)   --->   "store i32 0, i32* %seg_offset_1" [SHA_new/SHA_new/sha256.c:33]   --->   Operation 42 'store' <Predicate = true> <Delay = 1.02>
ST_1 : Operation 43 [1/1] (1.09ns)   --->   "store i32 -1694144372, i32* %sha256ctx_state_5_2" [SHA_new/SHA_new/sha256.c:33]   --->   Operation 43 'store' <Predicate = true> <Delay = 1.09>
ST_1 : Operation 44 [1/1] (1.09ns)   --->   "store i32 1359893119, i32* %sha256ctx_state_4_2" [SHA_new/SHA_new/sha256.c:33]   --->   Operation 44 'store' <Predicate = true> <Delay = 1.09>
ST_1 : Operation 45 [1/1] (1.09ns)   --->   "store i32 -1521486534, i32* %sha256ctx_state_3_2" [SHA_new/SHA_new/sha256.c:33]   --->   Operation 45 'store' <Predicate = true> <Delay = 1.09>
ST_1 : Operation 46 [1/1] (1.09ns)   --->   "store i32 1013904242, i32* %sha256ctx_state_2_2" [SHA_new/SHA_new/sha256.c:33]   --->   Operation 46 'store' <Predicate = true> <Delay = 1.09>
ST_1 : Operation 47 [1/1] (1.09ns)   --->   "store i32 -1150833019, i32* %sha256ctx_state_1_2" [SHA_new/SHA_new/sha256.c:33]   --->   Operation 47 'store' <Predicate = true> <Delay = 1.09>
ST_1 : Operation 48 [1/1] (1.09ns)   --->   "store i32 1779033703, i32* %sha256ctx_state_0_2" [SHA_new/SHA_new/sha256.c:33]   --->   Operation 48 'store' <Predicate = true> <Delay = 1.09>
ST_1 : Operation 49 [1/1] (1.09ns)   --->   "store i32 528734635, i32* %sha256ctx_state_6_2" [SHA_new/SHA_new/sha256.c:33]   --->   Operation 49 'store' <Predicate = true> <Delay = 1.09>
ST_1 : Operation 50 [1/1] (1.09ns)   --->   "store i32 1541459225, i32* %sha256ctx_state_7_2" [SHA_new/SHA_new/sha256.c:33]   --->   Operation 50 'store' <Predicate = true> <Delay = 1.09>
ST_1 : Operation 51 [1/1] (1.09ns)   --->   "store i32 0, i32* %sha256ctx_datalen_1" [SHA_new/SHA_new/sha256.c:33]   --->   Operation 51 'store' <Predicate = true> <Delay = 1.09>
ST_1 : Operation 52 [1/1] (1.09ns)   --->   "store i32 %bytes_read, i32* %n_0" [SHA_new/SHA_new/sha256.c:33]   --->   Operation 52 'store' <Predicate = true> <Delay = 1.09>
ST_1 : Operation 53 [1/1] (0.00ns)   --->   "br label %1" [SHA_new/SHA_new/sha256.c:33]   --->   Operation 53 'br' <Predicate = true> <Delay = 0.00>

State 2 <SV = 1> <Delay = 1.22>
ST_2 : Operation 54 [1/1] (0.00ns)   --->   "%n_0_load = load i32* %n_0" [SHA_new/SHA_new/sha256.c:40]   --->   Operation 54 'load' 'n_0_load' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 55 [1/1] (1.22ns)   --->   "%icmp_ln33 = icmp eq i32 %n_0_load, 0" [SHA_new/SHA_new/sha256.c:33]   --->   Operation 55 'icmp' 'icmp_ln33' <Predicate = true> <Delay = 1.22> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 0.99> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 56 [1/1] (0.00ns)   --->   "br i1 %icmp_ln33, label %6, label %hls_label_0_begin" [SHA_new/SHA_new/sha256.c:33]   --->   Operation 56 'br' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 57 [1/1] (0.00ns)   --->   "%seg_offset_1_load = load i32* %seg_offset_1" [SHA_new/SHA_new/sha256.c:36]   --->   Operation 57 'load' 'seg_offset_1_load' <Predicate = (!icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 58 [1/1] (0.00ns)   --->   "%tmp = call i32 (...)* @_ssdm_op_SpecRegionBegin([12 x i8]* @p_str2) nounwind" [SHA_new/SHA_new/sha256.c:34]   --->   Operation 58 'specregionbegin' 'tmp' <Predicate = (!icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 59 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopTripCount(i32 12, i32 100, i32 56, [1 x i8]* @p_str1) nounwind" [SHA_new/SHA_new/sha256.c:35]   --->   Operation 59 'speclooptripcount' <Predicate = (!icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 60 [1/1] (0.00ns)   --->   "%tmp_2 = call i26 @_ssdm_op_PartSelect.i26.i32.i32.i32(i32 %n_0_load, i32 6, i32 31)" [SHA_new/SHA_new/sha256.c:36]   --->   Operation 60 'partselect' 'tmp_2' <Predicate = (!icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 61 [1/1] (1.20ns)   --->   "%icmp_ln36 = icmp eq i26 %tmp_2, 0" [SHA_new/SHA_new/sha256.c:36]   --->   Operation 61 'icmp' 'icmp_ln36' <Predicate = (!icmp_ln33)> <Delay = 1.20> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 0.99> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 62 [1/1] (0.00ns)   --->   "%trunc_ln36 = trunc i32 %seg_offset_1_load to i10" [SHA_new/SHA_new/sha256.c:36]   --->   Operation 62 'trunc' 'trunc_ln36' <Predicate = (!icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 63 [1/1] (0.00ns)   --->   "br i1 %icmp_ln36, label %.preheader.preheader, label %.preheader4.preheader" [SHA_new/SHA_new/sha256.c:36]   --->   Operation 63 'br' <Predicate = (!icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 64 [1/1] (1.02ns)   --->   "br label %.preheader4" [SHA_new/SHA_new/sha256.c:38]   --->   Operation 64 'br' <Predicate = (!icmp_ln33 & !icmp_ln36)> <Delay = 1.02>
ST_2 : Operation 65 [1/1] (1.02ns)   --->   "br label %.preheader" [SHA_new/SHA_new/sha256.c:46]   --->   Operation 65 'br' <Predicate = (!icmp_ln33 & icmp_ln36)> <Delay = 1.02>
ST_2 : Operation 66 [1/1] (0.00ns)   --->   "%sha256ctx_datalen_1_2 = load i32* %sha256ctx_datalen_1" [SHA_new/SHA_new/sha256.c:55]   --->   Operation 66 'load' 'sha256ctx_datalen_1_2' <Predicate = (icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 67 [1/1] (0.00ns)   --->   "%sha256ctx_state_7_2_3 = load i32* %sha256ctx_state_7_2" [SHA_new/SHA_new/sha256.c:55]   --->   Operation 67 'load' 'sha256ctx_state_7_2_3' <Predicate = (icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 68 [1/1] (0.00ns)   --->   "%sha256ctx_state_6_2_3 = load i32* %sha256ctx_state_6_2" [SHA_new/SHA_new/sha256.c:55]   --->   Operation 68 'load' 'sha256ctx_state_6_2_3' <Predicate = (icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 69 [1/1] (0.00ns)   --->   "%sha256ctx_state_0_2_3 = load i32* %sha256ctx_state_0_2" [SHA_new/SHA_new/sha256.c:55]   --->   Operation 69 'load' 'sha256ctx_state_0_2_3' <Predicate = (icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 70 [1/1] (0.00ns)   --->   "%sha256ctx_state_1_2_3 = load i32* %sha256ctx_state_1_2" [SHA_new/SHA_new/sha256.c:55]   --->   Operation 70 'load' 'sha256ctx_state_1_2_3' <Predicate = (icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 71 [1/1] (0.00ns)   --->   "%sha256ctx_state_2_2_3 = load i32* %sha256ctx_state_2_2" [SHA_new/SHA_new/sha256.c:55]   --->   Operation 71 'load' 'sha256ctx_state_2_2_3' <Predicate = (icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 72 [1/1] (0.00ns)   --->   "%sha256ctx_state_3_2_3 = load i32* %sha256ctx_state_3_2" [SHA_new/SHA_new/sha256.c:55]   --->   Operation 72 'load' 'sha256ctx_state_3_2_3' <Predicate = (icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 73 [1/1] (0.00ns)   --->   "%sha256ctx_state_4_2_3 = load i32* %sha256ctx_state_4_2" [SHA_new/SHA_new/sha256.c:55]   --->   Operation 73 'load' 'sha256ctx_state_4_2_3' <Predicate = (icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 74 [1/1] (0.00ns)   --->   "%sha256ctx_state_5_2_3 = load i32* %sha256ctx_state_5_2" [SHA_new/SHA_new/sha256.c:55]   --->   Operation 74 'load' 'sha256ctx_state_5_2_3' <Predicate = (icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 75 [2/2] (1.22ns)   --->   "call fastcc void @sha256_final([16 x i8]* %sha256ctx_data_0, [16 x i8]* %sha256ctx_data_1, [16 x i8]* %sha256ctx_data_2, [16 x i8]* %sha256ctx_data_3, i32 %sha256ctx_datalen_1_2, i32 %sha256ctx_state_0_2_3, i32 %sha256ctx_state_1_2_3, i32 %sha256ctx_state_2_2_3, i32 %sha256ctx_state_3_2_3, i32 %sha256ctx_state_4_2_3, i32 %sha256ctx_state_5_2_3, i32 %sha256ctx_state_6_2_3, i32 %sha256ctx_state_7_2_3, [64 x i8]* %seg_buf) nounwind" [SHA_new/SHA_new/sha256.c:55]   --->   Operation 75 'call' <Predicate = (icmp_ln33)> <Delay = 1.22> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 3 <SV = 2> <Delay = 2.74>
ST_3 : Operation 76 [1/1] (0.00ns)   --->   "%i_0 = phi i7 [ %i_4, %2 ], [ 0, %.preheader4.preheader ]"   --->   Operation 76 'phi' 'i_0' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 77 [1/1] (0.96ns)   --->   "%icmp_ln38 = icmp eq i7 %i_0, -64" [SHA_new/SHA_new/sha256.c:38]   --->   Operation 77 'icmp' 'icmp_ln38' <Predicate = true> <Delay = 0.96> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 0.99> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 78 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopTripCount(i64 64, i64 64, i64 64)"   --->   Operation 78 'speclooptripcount' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 79 [1/1] (1.36ns)   --->   "%i_4 = add i7 %i_0, 1" [SHA_new/SHA_new/sha256.c:38]   --->   Operation 79 'add' 'i_4' <Predicate = true> <Delay = 1.36> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.26> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 80 [1/1] (0.00ns)   --->   "br i1 %icmp_ln38, label %3, label %2" [SHA_new/SHA_new/sha256.c:38]   --->   Operation 80 'br' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 81 [1/1] (0.00ns)   --->   "%zext_ln39_1 = zext i7 %i_0 to i10" [SHA_new/SHA_new/sha256.c:39]   --->   Operation 81 'zext' 'zext_ln39_1' <Predicate = (!icmp_ln38)> <Delay = 0.00>
ST_3 : Operation 82 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln39 = add i10 %trunc_ln36, %zext_ln39_1" [SHA_new/SHA_new/sha256.c:39]   --->   Operation 82 'add' 'add_ln39' <Predicate = (!icmp_ln38)> <Delay = 0.00> <Core = "TAddSub">   --->   Core 83 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.69> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 83 [1/1] (1.38ns) (root node of TernaryAdder)   --->   "%add_ln39_1 = add i10 %add_ln39, %trunc_ln33" [SHA_new/SHA_new/sha256.c:39]   --->   Operation 83 'add' 'add_ln39_1' <Predicate = (!icmp_ln38)> <Delay = 1.38> <Core = "TAddSub">   --->   Core 83 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.69> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 84 [1/1] (0.00ns)   --->   "%zext_ln39_2 = zext i10 %add_ln39_1 to i64" [SHA_new/SHA_new/sha256.c:39]   --->   Operation 84 'zext' 'zext_ln39_2' <Predicate = (!icmp_ln38)> <Delay = 0.00>
ST_3 : Operation 85 [1/1] (0.00ns)   --->   "%data_addr = getelementptr [256 x i8]* %data, i64 0, i64 %zext_ln39_2" [SHA_new/SHA_new/sha256.c:39]   --->   Operation 85 'getelementptr' 'data_addr' <Predicate = (!icmp_ln38)> <Delay = 0.00>
ST_3 : Operation 86 [2/2] (1.00ns)   --->   "%data_load = load i8* %data_addr, align 1" [SHA_new/SHA_new/sha256.c:39]   --->   Operation 86 'load' 'data_load' <Predicate = (!icmp_ln38)> <Delay = 1.00> <Core = "RAM_1P">   --->   Core 44 'RAM_1P' <Latency = 1> <II = 1> <Delay = 0.85> <Storage> <Opcode : 'load' 'store'> <Ports = 1> <Width = 8> <Depth = 32> <RAM>
ST_3 : Operation 87 [1/1] (0.00ns)   --->   "%sha256ctx_datalen_1_s = load i32* %sha256ctx_datalen_1" [SHA_new/SHA_new/sha256.c:42]   --->   Operation 87 'load' 'sha256ctx_datalen_1_s' <Predicate = (icmp_ln38)> <Delay = 0.00>
ST_3 : Operation 88 [1/1] (0.00ns)   --->   "%sha256ctx_state_7_2_1 = load i32* %sha256ctx_state_7_2" [SHA_new/SHA_new/sha256.c:42]   --->   Operation 88 'load' 'sha256ctx_state_7_2_1' <Predicate = (icmp_ln38)> <Delay = 0.00>
ST_3 : Operation 89 [1/1] (0.00ns)   --->   "%sha256ctx_state_6_2_1 = load i32* %sha256ctx_state_6_2" [SHA_new/SHA_new/sha256.c:42]   --->   Operation 89 'load' 'sha256ctx_state_6_2_1' <Predicate = (icmp_ln38)> <Delay = 0.00>
ST_3 : Operation 90 [1/1] (0.00ns)   --->   "%sha256ctx_state_0_2_1 = load i32* %sha256ctx_state_0_2" [SHA_new/SHA_new/sha256.c:42]   --->   Operation 90 'load' 'sha256ctx_state_0_2_1' <Predicate = (icmp_ln38)> <Delay = 0.00>
ST_3 : Operation 91 [1/1] (0.00ns)   --->   "%sha256ctx_state_1_2_1 = load i32* %sha256ctx_state_1_2" [SHA_new/SHA_new/sha256.c:42]   --->   Operation 91 'load' 'sha256ctx_state_1_2_1' <Predicate = (icmp_ln38)> <Delay = 0.00>
ST_3 : Operation 92 [1/1] (0.00ns)   --->   "%sha256ctx_state_2_2_1 = load i32* %sha256ctx_state_2_2" [SHA_new/SHA_new/sha256.c:42]   --->   Operation 92 'load' 'sha256ctx_state_2_2_1' <Predicate = (icmp_ln38)> <Delay = 0.00>
ST_3 : Operation 93 [1/1] (0.00ns)   --->   "%sha256ctx_state_3_2_1 = load i32* %sha256ctx_state_3_2" [SHA_new/SHA_new/sha256.c:42]   --->   Operation 93 'load' 'sha256ctx_state_3_2_1' <Predicate = (icmp_ln38)> <Delay = 0.00>
ST_3 : Operation 94 [1/1] (0.00ns)   --->   "%sha256ctx_state_4_2_1 = load i32* %sha256ctx_state_4_2" [SHA_new/SHA_new/sha256.c:42]   --->   Operation 94 'load' 'sha256ctx_state_4_2_1' <Predicate = (icmp_ln38)> <Delay = 0.00>
ST_3 : Operation 95 [1/1] (0.00ns)   --->   "%sha256ctx_state_5_2_1 = load i32* %sha256ctx_state_5_2" [SHA_new/SHA_new/sha256.c:42]   --->   Operation 95 'load' 'sha256ctx_state_5_2_1' <Predicate = (icmp_ln38)> <Delay = 0.00>
ST_3 : Operation 96 [1/1] (1.64ns)   --->   "%n = add i32 %n_0_load, -64" [SHA_new/SHA_new/sha256.c:40]   --->   Operation 96 'add' 'n' <Predicate = (icmp_ln38)> <Delay = 1.64> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.26> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 97 [2/2] (2.12ns)   --->   "%call_ret2 = call fastcc { i32, i32, i32, i32, i32, i32, i32, i32, i32 } @sha256_update([16 x i8]* %sha256ctx_data_0, [16 x i8]* %sha256ctx_data_1, [16 x i8]* %sha256ctx_data_2, [16 x i8]* %sha256ctx_data_3, i32 %sha256ctx_datalen_1_s, i32 %sha256ctx_state_0_2_1, i32 %sha256ctx_state_1_2_1, i32 %sha256ctx_state_2_2_1, i32 %sha256ctx_state_3_2_1, i32 %sha256ctx_state_4_2_1, i32 %sha256ctx_state_5_2_1, i32 %sha256ctx_state_6_2_1, i32 %sha256ctx_state_7_2_1, [64 x i8]* %seg_buf, i32 64) nounwind" [SHA_new/SHA_new/sha256.c:42]   --->   Operation 97 'call' 'call_ret2' <Predicate = (icmp_ln38)> <Delay = 2.12> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_3 : Operation 98 [1/1] (1.09ns)   --->   "store i32 %n, i32* %n_0" [SHA_new/SHA_new/sha256.c:43]   --->   Operation 98 'store' <Predicate = (icmp_ln38)> <Delay = 1.09>

State 4 <SV = 3> <Delay = 1.86>
ST_4 : Operation 99 [1/1] (0.00ns)   --->   "%zext_ln39 = zext i7 %i_0 to i64" [SHA_new/SHA_new/sha256.c:39]   --->   Operation 99 'zext' 'zext_ln39' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 100 [1/2] (1.00ns)   --->   "%data_load = load i8* %data_addr, align 1" [SHA_new/SHA_new/sha256.c:39]   --->   Operation 100 'load' 'data_load' <Predicate = true> <Delay = 1.00> <Core = "RAM_1P">   --->   Core 44 'RAM_1P' <Latency = 1> <II = 1> <Delay = 0.85> <Storage> <Opcode : 'load' 'store'> <Ports = 1> <Width = 8> <Depth = 32> <RAM>
ST_4 : Operation 101 [1/1] (0.00ns)   --->   "%seg_buf_addr_1 = getelementptr inbounds [64 x i8]* %seg_buf, i64 0, i64 %zext_ln39" [SHA_new/SHA_new/sha256.c:39]   --->   Operation 101 'getelementptr' 'seg_buf_addr_1' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 102 [1/1] (0.85ns)   --->   "store i8 %data_load, i8* %seg_buf_addr_1, align 1" [SHA_new/SHA_new/sha256.c:39]   --->   Operation 102 'store' <Predicate = true> <Delay = 0.85> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 0.85> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 64> <RAM>
ST_4 : Operation 103 [1/1] (0.00ns)   --->   "br label %.preheader4" [SHA_new/SHA_new/sha256.c:38]   --->   Operation 103 'br' <Predicate = true> <Delay = 0.00>

State 5 <SV = 3> <Delay = 2.66>
ST_5 : Operation 104 [1/1] (0.00ns)   --->   "%seg_offset_1_load_1 = load i32* %seg_offset_1" [SHA_new/SHA_new/sha256.c:41]   --->   Operation 104 'load' 'seg_offset_1_load_1' <Predicate = (!icmp_ln36)> <Delay = 0.00>
ST_5 : Operation 105 [1/1] (1.64ns)   --->   "%seg_offset = add i32 %seg_offset_1_load_1, 64" [SHA_new/SHA_new/sha256.c:41]   --->   Operation 105 'add' 'seg_offset' <Predicate = (!icmp_ln36)> <Delay = 1.64> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.26> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 106 [1/2] (0.00ns)   --->   "%call_ret2 = call fastcc { i32, i32, i32, i32, i32, i32, i32, i32, i32 } @sha256_update([16 x i8]* %sha256ctx_data_0, [16 x i8]* %sha256ctx_data_1, [16 x i8]* %sha256ctx_data_2, [16 x i8]* %sha256ctx_data_3, i32 %sha256ctx_datalen_1_s, i32 %sha256ctx_state_0_2_1, i32 %sha256ctx_state_1_2_1, i32 %sha256ctx_state_2_2_1, i32 %sha256ctx_state_3_2_1, i32 %sha256ctx_state_4_2_1, i32 %sha256ctx_state_5_2_1, i32 %sha256ctx_state_6_2_1, i32 %sha256ctx_state_7_2_1, [64 x i8]* %seg_buf, i32 64) nounwind" [SHA_new/SHA_new/sha256.c:42]   --->   Operation 106 'call' 'call_ret2' <Predicate = (!icmp_ln36)> <Delay = 0.00> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_5 : Operation 107 [1/1] (0.00ns)   --->   "%sha256ctx_datalen = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret2, 0" [SHA_new/SHA_new/sha256.c:42]   --->   Operation 107 'extractvalue' 'sha256ctx_datalen' <Predicate = (!icmp_ln36)> <Delay = 0.00>
ST_5 : Operation 108 [1/1] (0.00ns)   --->   "%sha256ctx_state_0 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret2, 1" [SHA_new/SHA_new/sha256.c:42]   --->   Operation 108 'extractvalue' 'sha256ctx_state_0' <Predicate = (!icmp_ln36)> <Delay = 0.00>
ST_5 : Operation 109 [1/1] (0.00ns)   --->   "%sha256ctx_state_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret2, 2" [SHA_new/SHA_new/sha256.c:42]   --->   Operation 109 'extractvalue' 'sha256ctx_state_1' <Predicate = (!icmp_ln36)> <Delay = 0.00>
ST_5 : Operation 110 [1/1] (0.00ns)   --->   "%sha256ctx_state_2 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret2, 3" [SHA_new/SHA_new/sha256.c:42]   --->   Operation 110 'extractvalue' 'sha256ctx_state_2' <Predicate = (!icmp_ln36)> <Delay = 0.00>
ST_5 : Operation 111 [1/1] (0.00ns)   --->   "%sha256ctx_state_3 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret2, 4" [SHA_new/SHA_new/sha256.c:42]   --->   Operation 111 'extractvalue' 'sha256ctx_state_3' <Predicate = (!icmp_ln36)> <Delay = 0.00>
ST_5 : Operation 112 [1/1] (0.00ns)   --->   "%sha256ctx_state_4 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret2, 5" [SHA_new/SHA_new/sha256.c:42]   --->   Operation 112 'extractvalue' 'sha256ctx_state_4' <Predicate = (!icmp_ln36)> <Delay = 0.00>
ST_5 : Operation 113 [1/1] (0.00ns)   --->   "%sha256ctx_state_5 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret2, 6" [SHA_new/SHA_new/sha256.c:42]   --->   Operation 113 'extractvalue' 'sha256ctx_state_5' <Predicate = (!icmp_ln36)> <Delay = 0.00>
ST_5 : Operation 114 [1/1] (0.00ns)   --->   "%sha256ctx_state_6 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret2, 7" [SHA_new/SHA_new/sha256.c:42]   --->   Operation 114 'extractvalue' 'sha256ctx_state_6' <Predicate = (!icmp_ln36)> <Delay = 0.00>
ST_5 : Operation 115 [1/1] (0.00ns)   --->   "%sha256ctx_state_7 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret2, 8" [SHA_new/SHA_new/sha256.c:42]   --->   Operation 115 'extractvalue' 'sha256ctx_state_7' <Predicate = (!icmp_ln36)> <Delay = 0.00>
ST_5 : Operation 116 [1/1] (1.02ns)   --->   "store i32 %seg_offset, i32* %seg_offset_1" [SHA_new/SHA_new/sha256.c:43]   --->   Operation 116 'store' <Predicate = (!icmp_ln36)> <Delay = 1.02>
ST_5 : Operation 117 [1/1] (1.09ns)   --->   "store i32 %sha256ctx_state_5, i32* %sha256ctx_state_5_2" [SHA_new/SHA_new/sha256.c:43]   --->   Operation 117 'store' <Predicate = (!icmp_ln36)> <Delay = 1.09>
ST_5 : Operation 118 [1/1] (1.09ns)   --->   "store i32 %sha256ctx_state_4, i32* %sha256ctx_state_4_2" [SHA_new/SHA_new/sha256.c:43]   --->   Operation 118 'store' <Predicate = (!icmp_ln36)> <Delay = 1.09>
ST_5 : Operation 119 [1/1] (1.09ns)   --->   "store i32 %sha256ctx_state_3, i32* %sha256ctx_state_3_2" [SHA_new/SHA_new/sha256.c:43]   --->   Operation 119 'store' <Predicate = (!icmp_ln36)> <Delay = 1.09>
ST_5 : Operation 120 [1/1] (1.09ns)   --->   "store i32 %sha256ctx_state_2, i32* %sha256ctx_state_2_2" [SHA_new/SHA_new/sha256.c:43]   --->   Operation 120 'store' <Predicate = (!icmp_ln36)> <Delay = 1.09>
ST_5 : Operation 121 [1/1] (1.09ns)   --->   "store i32 %sha256ctx_state_1, i32* %sha256ctx_state_1_2" [SHA_new/SHA_new/sha256.c:43]   --->   Operation 121 'store' <Predicate = (!icmp_ln36)> <Delay = 1.09>
ST_5 : Operation 122 [1/1] (1.09ns)   --->   "store i32 %sha256ctx_state_0, i32* %sha256ctx_state_0_2" [SHA_new/SHA_new/sha256.c:43]   --->   Operation 122 'store' <Predicate = (!icmp_ln36)> <Delay = 1.09>
ST_5 : Operation 123 [1/1] (1.09ns)   --->   "store i32 %sha256ctx_state_6, i32* %sha256ctx_state_6_2" [SHA_new/SHA_new/sha256.c:43]   --->   Operation 123 'store' <Predicate = (!icmp_ln36)> <Delay = 1.09>
ST_5 : Operation 124 [1/1] (1.09ns)   --->   "store i32 %sha256ctx_state_7, i32* %sha256ctx_state_7_2" [SHA_new/SHA_new/sha256.c:43]   --->   Operation 124 'store' <Predicate = (!icmp_ln36)> <Delay = 1.09>
ST_5 : Operation 125 [1/1] (1.09ns)   --->   "store i32 %sha256ctx_datalen, i32* %sha256ctx_datalen_1" [SHA_new/SHA_new/sha256.c:43]   --->   Operation 125 'store' <Predicate = (!icmp_ln36)> <Delay = 1.09>
ST_5 : Operation 126 [1/1] (0.00ns)   --->   "br label %hls_label_0_end" [SHA_new/SHA_new/sha256.c:43]   --->   Operation 126 'br' <Predicate = (!icmp_ln36)> <Delay = 0.00>
ST_5 : Operation 127 [1/2] (0.00ns)   --->   "%call_ret = call fastcc { i32, i32, i32, i32, i32, i32, i32, i32, i32 } @sha256_update([16 x i8]* %sha256ctx_data_0, [16 x i8]* %sha256ctx_data_1, [16 x i8]* %sha256ctx_data_2, [16 x i8]* %sha256ctx_data_3, i32 %sha256ctx_datalen_1_1, i32 %sha256ctx_state_0_2_2, i32 %sha256ctx_state_1_2_2, i32 %sha256ctx_state_2_2_2, i32 %sha256ctx_state_3_2_2, i32 %sha256ctx_state_4_2_2, i32 %sha256ctx_state_5_2_2, i32 %sha256ctx_state_6_2_2, i32 %sha256ctx_state_7_2_2, [64 x i8]* %seg_buf, i32 %n_0_load) nounwind" [SHA_new/SHA_new/sha256.c:49]   --->   Operation 127 'call' 'call_ret' <Predicate = (icmp_ln36)> <Delay = 0.00> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_5 : Operation 128 [1/1] (0.00ns)   --->   "%sha256ctx_datalen_2 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 0" [SHA_new/SHA_new/sha256.c:49]   --->   Operation 128 'extractvalue' 'sha256ctx_datalen_2' <Predicate = (icmp_ln36)> <Delay = 0.00>
ST_5 : Operation 129 [1/1] (0.00ns)   --->   "%sha256ctx_state_0_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 1" [SHA_new/SHA_new/sha256.c:49]   --->   Operation 129 'extractvalue' 'sha256ctx_state_0_1' <Predicate = (icmp_ln36)> <Delay = 0.00>
ST_5 : Operation 130 [1/1] (0.00ns)   --->   "%sha256ctx_state_1_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 2" [SHA_new/SHA_new/sha256.c:49]   --->   Operation 130 'extractvalue' 'sha256ctx_state_1_1' <Predicate = (icmp_ln36)> <Delay = 0.00>
ST_5 : Operation 131 [1/1] (0.00ns)   --->   "%sha256ctx_state_2_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 3" [SHA_new/SHA_new/sha256.c:49]   --->   Operation 131 'extractvalue' 'sha256ctx_state_2_1' <Predicate = (icmp_ln36)> <Delay = 0.00>
ST_5 : Operation 132 [1/1] (0.00ns)   --->   "%sha256ctx_state_3_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 4" [SHA_new/SHA_new/sha256.c:49]   --->   Operation 132 'extractvalue' 'sha256ctx_state_3_1' <Predicate = (icmp_ln36)> <Delay = 0.00>
ST_5 : Operation 133 [1/1] (0.00ns)   --->   "%sha256ctx_state_4_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 5" [SHA_new/SHA_new/sha256.c:49]   --->   Operation 133 'extractvalue' 'sha256ctx_state_4_1' <Predicate = (icmp_ln36)> <Delay = 0.00>
ST_5 : Operation 134 [1/1] (0.00ns)   --->   "%sha256ctx_state_5_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 6" [SHA_new/SHA_new/sha256.c:49]   --->   Operation 134 'extractvalue' 'sha256ctx_state_5_1' <Predicate = (icmp_ln36)> <Delay = 0.00>
ST_5 : Operation 135 [1/1] (0.00ns)   --->   "%sha256ctx_state_6_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 7" [SHA_new/SHA_new/sha256.c:49]   --->   Operation 135 'extractvalue' 'sha256ctx_state_6_1' <Predicate = (icmp_ln36)> <Delay = 0.00>
ST_5 : Operation 136 [1/1] (0.00ns)   --->   "%sha256ctx_state_7_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 8" [SHA_new/SHA_new/sha256.c:49]   --->   Operation 136 'extractvalue' 'sha256ctx_state_7_1' <Predicate = (icmp_ln36)> <Delay = 0.00>
ST_5 : Operation 137 [1/1] (1.09ns)   --->   "store i32 %sha256ctx_state_5_1, i32* %sha256ctx_state_5_2" [SHA_new/SHA_new/sha256.c:49]   --->   Operation 137 'store' <Predicate = (icmp_ln36)> <Delay = 1.09>
ST_5 : Operation 138 [1/1] (1.09ns)   --->   "store i32 %sha256ctx_state_4_1, i32* %sha256ctx_state_4_2" [SHA_new/SHA_new/sha256.c:49]   --->   Operation 138 'store' <Predicate = (icmp_ln36)> <Delay = 1.09>
ST_5 : Operation 139 [1/1] (1.09ns)   --->   "store i32 %sha256ctx_state_3_1, i32* %sha256ctx_state_3_2" [SHA_new/SHA_new/sha256.c:49]   --->   Operation 139 'store' <Predicate = (icmp_ln36)> <Delay = 1.09>
ST_5 : Operation 140 [1/1] (1.09ns)   --->   "store i32 %sha256ctx_state_2_1, i32* %sha256ctx_state_2_2" [SHA_new/SHA_new/sha256.c:49]   --->   Operation 140 'store' <Predicate = (icmp_ln36)> <Delay = 1.09>
ST_5 : Operation 141 [1/1] (1.09ns)   --->   "store i32 %sha256ctx_state_1_1, i32* %sha256ctx_state_1_2" [SHA_new/SHA_new/sha256.c:49]   --->   Operation 141 'store' <Predicate = (icmp_ln36)> <Delay = 1.09>
ST_5 : Operation 142 [1/1] (1.09ns)   --->   "store i32 %sha256ctx_state_0_1, i32* %sha256ctx_state_0_2" [SHA_new/SHA_new/sha256.c:49]   --->   Operation 142 'store' <Predicate = (icmp_ln36)> <Delay = 1.09>
ST_5 : Operation 143 [1/1] (1.09ns)   --->   "store i32 %sha256ctx_state_6_1, i32* %sha256ctx_state_6_2" [SHA_new/SHA_new/sha256.c:49]   --->   Operation 143 'store' <Predicate = (icmp_ln36)> <Delay = 1.09>
ST_5 : Operation 144 [1/1] (1.09ns)   --->   "store i32 %sha256ctx_state_7_1, i32* %sha256ctx_state_7_2" [SHA_new/SHA_new/sha256.c:49]   --->   Operation 144 'store' <Predicate = (icmp_ln36)> <Delay = 1.09>
ST_5 : Operation 145 [1/1] (1.09ns)   --->   "store i32 %sha256ctx_datalen_2, i32* %sha256ctx_datalen_1" [SHA_new/SHA_new/sha256.c:49]   --->   Operation 145 'store' <Predicate = (icmp_ln36)> <Delay = 1.09>
ST_5 : Operation 146 [1/1] (0.00ns)   --->   "br label %hls_label_0_end"   --->   Operation 146 'br' <Predicate = (icmp_ln36)> <Delay = 0.00>
ST_5 : Operation 147 [1/1] (0.00ns)   --->   "%empty_10 = call i32 (...)* @_ssdm_op_SpecRegionEnd([12 x i8]* @p_str2, i32 %tmp) nounwind" [SHA_new/SHA_new/sha256.c:52]   --->   Operation 147 'specregionend' 'empty_10' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 148 [1/1] (0.00ns)   --->   "br label %1" [SHA_new/SHA_new/sha256.c:52]   --->   Operation 148 'br' <Predicate = true> <Delay = 0.00>

State 6 <SV = 2> <Delay = 2.39>
ST_6 : Operation 149 [1/1] (0.00ns)   --->   "%i_1 = phi i6 [ %i_3, %4 ], [ 0, %.preheader.preheader ]"   --->   Operation 149 'phi' 'i_1' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 150 [1/1] (0.00ns)   --->   "%zext_ln46 = zext i6 %i_1 to i32" [SHA_new/SHA_new/sha256.c:46]   --->   Operation 150 'zext' 'zext_ln46' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 151 [1/1] (1.22ns)   --->   "%icmp_ln46 = icmp eq i32 %zext_ln46, %n_0_load" [SHA_new/SHA_new/sha256.c:46]   --->   Operation 151 'icmp' 'icmp_ln46' <Predicate = true> <Delay = 1.22> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 0.99> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 152 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopTripCount(i64 12, i64 63, i64 56)"   --->   Operation 152 'speclooptripcount' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 153 [1/1] (1.26ns)   --->   "%i_3 = add i6 %i_1, 1" [SHA_new/SHA_new/sha256.c:46]   --->   Operation 153 'add' 'i_3' <Predicate = true> <Delay = 1.26> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.26> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 154 [1/1] (0.00ns)   --->   "br i1 %icmp_ln46, label %5, label %4" [SHA_new/SHA_new/sha256.c:46]   --->   Operation 154 'br' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 155 [1/1] (0.00ns)   --->   "%zext_ln48_1 = zext i6 %i_1 to i10" [SHA_new/SHA_new/sha256.c:48]   --->   Operation 155 'zext' 'zext_ln48_1' <Predicate = (!icmp_ln46)> <Delay = 0.00>
ST_6 : Operation 156 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln48 = add i10 %trunc_ln36, %zext_ln48_1" [SHA_new/SHA_new/sha256.c:48]   --->   Operation 156 'add' 'add_ln48' <Predicate = (!icmp_ln46)> <Delay = 0.00> <Core = "TAddSub">   --->   Core 83 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.69> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_6 : Operation 157 [1/1] (1.38ns) (root node of TernaryAdder)   --->   "%add_ln48_1 = add i10 %add_ln48, %trunc_ln33" [SHA_new/SHA_new/sha256.c:48]   --->   Operation 157 'add' 'add_ln48_1' <Predicate = (!icmp_ln46)> <Delay = 1.38> <Core = "TAddSub">   --->   Core 83 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.69> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_6 : Operation 158 [1/1] (0.00ns)   --->   "%zext_ln48_2 = zext i10 %add_ln48_1 to i64" [SHA_new/SHA_new/sha256.c:48]   --->   Operation 158 'zext' 'zext_ln48_2' <Predicate = (!icmp_ln46)> <Delay = 0.00>
ST_6 : Operation 159 [1/1] (0.00ns)   --->   "%data_addr_1 = getelementptr [256 x i8]* %data, i64 0, i64 %zext_ln48_2" [SHA_new/SHA_new/sha256.c:48]   --->   Operation 159 'getelementptr' 'data_addr_1' <Predicate = (!icmp_ln46)> <Delay = 0.00>
ST_6 : Operation 160 [2/2] (1.00ns)   --->   "%data_load_1 = load i8* %data_addr_1, align 1" [SHA_new/SHA_new/sha256.c:48]   --->   Operation 160 'load' 'data_load_1' <Predicate = (!icmp_ln46)> <Delay = 1.00> <Core = "RAM_1P">   --->   Core 44 'RAM_1P' <Latency = 1> <II = 1> <Delay = 0.85> <Storage> <Opcode : 'load' 'store'> <Ports = 1> <Width = 8> <Depth = 32> <RAM>
ST_6 : Operation 161 [1/1] (0.00ns)   --->   "%sha256ctx_datalen_1_1 = load i32* %sha256ctx_datalen_1" [SHA_new/SHA_new/sha256.c:49]   --->   Operation 161 'load' 'sha256ctx_datalen_1_1' <Predicate = (icmp_ln46)> <Delay = 0.00>
ST_6 : Operation 162 [1/1] (0.00ns)   --->   "%sha256ctx_state_7_2_2 = load i32* %sha256ctx_state_7_2" [SHA_new/SHA_new/sha256.c:49]   --->   Operation 162 'load' 'sha256ctx_state_7_2_2' <Predicate = (icmp_ln46)> <Delay = 0.00>
ST_6 : Operation 163 [1/1] (0.00ns)   --->   "%sha256ctx_state_6_2_2 = load i32* %sha256ctx_state_6_2" [SHA_new/SHA_new/sha256.c:49]   --->   Operation 163 'load' 'sha256ctx_state_6_2_2' <Predicate = (icmp_ln46)> <Delay = 0.00>
ST_6 : Operation 164 [1/1] (0.00ns)   --->   "%sha256ctx_state_0_2_2 = load i32* %sha256ctx_state_0_2" [SHA_new/SHA_new/sha256.c:49]   --->   Operation 164 'load' 'sha256ctx_state_0_2_2' <Predicate = (icmp_ln46)> <Delay = 0.00>
ST_6 : Operation 165 [1/1] (0.00ns)   --->   "%sha256ctx_state_1_2_2 = load i32* %sha256ctx_state_1_2" [SHA_new/SHA_new/sha256.c:49]   --->   Operation 165 'load' 'sha256ctx_state_1_2_2' <Predicate = (icmp_ln46)> <Delay = 0.00>
ST_6 : Operation 166 [1/1] (0.00ns)   --->   "%sha256ctx_state_2_2_2 = load i32* %sha256ctx_state_2_2" [SHA_new/SHA_new/sha256.c:49]   --->   Operation 166 'load' 'sha256ctx_state_2_2_2' <Predicate = (icmp_ln46)> <Delay = 0.00>
ST_6 : Operation 167 [1/1] (0.00ns)   --->   "%sha256ctx_state_3_2_2 = load i32* %sha256ctx_state_3_2" [SHA_new/SHA_new/sha256.c:49]   --->   Operation 167 'load' 'sha256ctx_state_3_2_2' <Predicate = (icmp_ln46)> <Delay = 0.00>
ST_6 : Operation 168 [1/1] (0.00ns)   --->   "%sha256ctx_state_4_2_2 = load i32* %sha256ctx_state_4_2" [SHA_new/SHA_new/sha256.c:49]   --->   Operation 168 'load' 'sha256ctx_state_4_2_2' <Predicate = (icmp_ln46)> <Delay = 0.00>
ST_6 : Operation 169 [1/1] (0.00ns)   --->   "%sha256ctx_state_5_2_2 = load i32* %sha256ctx_state_5_2" [SHA_new/SHA_new/sha256.c:49]   --->   Operation 169 'load' 'sha256ctx_state_5_2_2' <Predicate = (icmp_ln46)> <Delay = 0.00>
ST_6 : Operation 170 [2/2] (2.12ns)   --->   "%call_ret = call fastcc { i32, i32, i32, i32, i32, i32, i32, i32, i32 } @sha256_update([16 x i8]* %sha256ctx_data_0, [16 x i8]* %sha256ctx_data_1, [16 x i8]* %sha256ctx_data_2, [16 x i8]* %sha256ctx_data_3, i32 %sha256ctx_datalen_1_1, i32 %sha256ctx_state_0_2_2, i32 %sha256ctx_state_1_2_2, i32 %sha256ctx_state_2_2_2, i32 %sha256ctx_state_3_2_2, i32 %sha256ctx_state_4_2_2, i32 %sha256ctx_state_5_2_2, i32 %sha256ctx_state_6_2_2, i32 %sha256ctx_state_7_2_2, [64 x i8]* %seg_buf, i32 %n_0_load) nounwind" [SHA_new/SHA_new/sha256.c:49]   --->   Operation 170 'call' 'call_ret' <Predicate = (icmp_ln46)> <Delay = 2.12> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_6 : Operation 171 [1/1] (1.09ns)   --->   "store i32 0, i32* %n_0"   --->   Operation 171 'store' <Predicate = (icmp_ln46)> <Delay = 1.09>

State 7 <SV = 3> <Delay = 1.86>
ST_7 : Operation 172 [1/1] (0.00ns)   --->   "%zext_ln48 = zext i6 %i_1 to i64" [SHA_new/SHA_new/sha256.c:48]   --->   Operation 172 'zext' 'zext_ln48' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 173 [1/2] (1.00ns)   --->   "%data_load_1 = load i8* %data_addr_1, align 1" [SHA_new/SHA_new/sha256.c:48]   --->   Operation 173 'load' 'data_load_1' <Predicate = true> <Delay = 1.00> <Core = "RAM_1P">   --->   Core 44 'RAM_1P' <Latency = 1> <II = 1> <Delay = 0.85> <Storage> <Opcode : 'load' 'store'> <Ports = 1> <Width = 8> <Depth = 32> <RAM>
ST_7 : Operation 174 [1/1] (0.00ns)   --->   "%seg_buf_addr_2 = getelementptr inbounds [64 x i8]* %seg_buf, i64 0, i64 %zext_ln48" [SHA_new/SHA_new/sha256.c:48]   --->   Operation 174 'getelementptr' 'seg_buf_addr_2' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 175 [1/1] (0.85ns)   --->   "store i8 %data_load_1, i8* %seg_buf_addr_2, align 1" [SHA_new/SHA_new/sha256.c:48]   --->   Operation 175 'store' <Predicate = true> <Delay = 0.85> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 0.85> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 64> <RAM>
ST_7 : Operation 176 [1/1] (0.00ns)   --->   "br label %.preheader" [SHA_new/SHA_new/sha256.c:46]   --->   Operation 176 'br' <Predicate = true> <Delay = 0.00>

State 8 <SV = 2> <Delay = 1.02>
ST_8 : Operation 177 [1/2] (0.00ns)   --->   "call fastcc void @sha256_final([16 x i8]* %sha256ctx_data_0, [16 x i8]* %sha256ctx_data_1, [16 x i8]* %sha256ctx_data_2, [16 x i8]* %sha256ctx_data_3, i32 %sha256ctx_datalen_1_2, i32 %sha256ctx_state_0_2_3, i32 %sha256ctx_state_1_2_3, i32 %sha256ctx_state_2_2_3, i32 %sha256ctx_state_3_2_3, i32 %sha256ctx_state_4_2_3, i32 %sha256ctx_state_5_2_3, i32 %sha256ctx_state_6_2_3, i32 %sha256ctx_state_7_2_3, [64 x i8]* %seg_buf) nounwind" [SHA_new/SHA_new/sha256.c:55]   --->   Operation 177 'call' <Predicate = true> <Delay = 0.00> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_8 : Operation 178 [1/1] (1.02ns)   --->   "br label %7" [SHA_new/SHA_new/sha256.c:57]   --->   Operation 178 'br' <Predicate = true> <Delay = 1.02>

State 9 <SV = 3> <Delay = 1.26>
ST_9 : Operation 179 [1/1] (0.00ns)   --->   "%i_2 = phi i6 [ 0, %6 ], [ %i, %8 ]"   --->   Operation 179 'phi' 'i_2' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 180 [1/1] (0.99ns)   --->   "%icmp_ln57 = icmp eq i6 %i_2, -32" [SHA_new/SHA_new/sha256.c:57]   --->   Operation 180 'icmp' 'icmp_ln57' <Predicate = true> <Delay = 0.99> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 0.99> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_9 : Operation 181 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopTripCount(i64 32, i64 32, i64 32)"   --->   Operation 181 'speclooptripcount' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 182 [1/1] (1.26ns)   --->   "%i = add i6 %i_2, 1" [SHA_new/SHA_new/sha256.c:57]   --->   Operation 182 'add' 'i' <Predicate = true> <Delay = 1.26> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.26> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_9 : Operation 183 [1/1] (0.00ns)   --->   "br i1 %icmp_ln57, label %9, label %8" [SHA_new/SHA_new/sha256.c:57]   --->   Operation 183 'br' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 184 [1/1] (0.00ns)   --->   "%zext_ln59 = zext i6 %i_2 to i64" [SHA_new/SHA_new/sha256.c:59]   --->   Operation 184 'zext' 'zext_ln59' <Predicate = (!icmp_ln57)> <Delay = 0.00>
ST_9 : Operation 185 [1/1] (0.00ns)   --->   "%seg_buf_addr = getelementptr inbounds [64 x i8]* %seg_buf, i64 0, i64 %zext_ln59" [SHA_new/SHA_new/sha256.c:59]   --->   Operation 185 'getelementptr' 'seg_buf_addr' <Predicate = (!icmp_ln57)> <Delay = 0.00>
ST_9 : Operation 186 [2/2] (0.85ns)   --->   "%seg_buf_load = load i8* %seg_buf_addr, align 1" [SHA_new/SHA_new/sha256.c:59]   --->   Operation 186 'load' 'seg_buf_load' <Predicate = (!icmp_ln57)> <Delay = 0.85> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 0.85> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 64> <RAM>
ST_9 : Operation 187 [1/1] (0.00ns)   --->   "ret void" [SHA_new/SHA_new/sha256.c:61]   --->   Operation 187 'ret' <Predicate = (icmp_ln57)> <Delay = 0.00>

State 10 <SV = 4> <Delay = 1.71>
ST_10 : Operation 188 [1/2] (0.85ns)   --->   "%seg_buf_load = load i8* %seg_buf_addr, align 1" [SHA_new/SHA_new/sha256.c:59]   --->   Operation 188 'load' 'seg_buf_load' <Predicate = true> <Delay = 0.85> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 0.85> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 64> <RAM>
ST_10 : Operation 189 [1/1] (0.00ns)   --->   "%digest_addr = getelementptr [32 x i8]* %digest, i64 0, i64 %zext_ln59" [SHA_new/SHA_new/sha256.c:59]   --->   Operation 189 'getelementptr' 'digest_addr' <Predicate = true> <Delay = 0.00>
ST_10 : Operation 190 [1/1] (0.85ns)   --->   "store i8 %seg_buf_load, i8* %digest_addr, align 1" [SHA_new/SHA_new/sha256.c:59]   --->   Operation 190 'store' <Predicate = true> <Delay = 0.85> <Core = "RAM_1P">   --->   Core 44 'RAM_1P' <Latency = 1> <II = 1> <Delay = 0.85> <Storage> <Opcode : 'load' 'store'> <Ports = 1> <Width = 8> <Depth = 32> <RAM>
ST_10 : Operation 191 [1/1] (0.00ns)   --->   "br label %7" [SHA_new/SHA_new/sha256.c:57]   --->   Operation 191 'br' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 2.1ns
The critical path consists of the following:
	s_axi read on port 'bytes' [21]  (1 ns)
	'store' operation ('store_ln33', SHA_new/SHA_new/sha256.c:33) of variable 'bytes' on local variable 'bytes' [46]  (1.1 ns)

 <State 2>: 1.22ns
The critical path consists of the following:
	'load' operation ('n_0_load', SHA_new/SHA_new/sha256.c:40) on local variable 'bytes' [49]  (0 ns)
	'icmp' operation ('icmp_ln33', SHA_new/SHA_new/sha256.c:33) [50]  (1.22 ns)

 <State 3>: 2.74ns
The critical path consists of the following:
	'add' operation ('n', SHA_new/SHA_new/sha256.c:40) [90]  (1.65 ns)
	'store' operation ('store_ln43', SHA_new/SHA_new/sha256.c:43) of variable 'n', SHA_new/SHA_new/sha256.c:40 on local variable 'bytes' [112]  (1.1 ns)

 <State 4>: 1.86ns
The critical path consists of the following:
	'load' operation ('data_load', SHA_new/SHA_new/sha256.c:39) on array 'data' [75]  (1.01 ns)
	'store' operation ('store_ln39', SHA_new/SHA_new/sha256.c:39) of variable 'data_load', SHA_new/SHA_new/sha256.c:39 on array 'seg_buf', SHA_new/SHA_new/sha256.c:23 [77]  (0.858 ns)

 <State 5>: 2.67ns
The critical path consists of the following:
	'load' operation ('seg_offset_1_load_1', SHA_new/SHA_new/sha256.c:41) on local variable 'seg_offset' [89]  (0 ns)
	'add' operation ('seg_offset', SHA_new/SHA_new/sha256.c:41) [91]  (1.65 ns)
	'store' operation ('store_ln43', SHA_new/SHA_new/sha256.c:43) of variable 'seg_offset', SHA_new/SHA_new/sha256.c:41 on local variable 'seg_offset' [102]  (1.02 ns)

 <State 6>: 2.4ns
The critical path consists of the following:
	'phi' operation ('i') with incoming values : ('i', SHA_new/SHA_new/sha256.c:46) [117]  (0 ns)
	'add' operation ('add_ln48', SHA_new/SHA_new/sha256.c:48) [126]  (0 ns)
	'add' operation ('add_ln48_1', SHA_new/SHA_new/sha256.c:48) [127]  (1.39 ns)
	'getelementptr' operation ('data_addr_1', SHA_new/SHA_new/sha256.c:48) [129]  (0 ns)
	'load' operation ('data_load_1', SHA_new/SHA_new/sha256.c:48) on array 'data' [130]  (1.01 ns)

 <State 7>: 1.86ns
The critical path consists of the following:
	'load' operation ('data_load_1', SHA_new/SHA_new/sha256.c:48) on array 'data' [130]  (1.01 ns)
	'store' operation ('store_ln48', SHA_new/SHA_new/sha256.c:48) of variable 'data_load_1', SHA_new/SHA_new/sha256.c:48 on array 'seg_buf', SHA_new/SHA_new/sha256.c:23 [132]  (0.858 ns)

 <State 8>: 1.02ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('i') with incoming values : ('i', SHA_new/SHA_new/sha256.c:57) [181]  (1.02 ns)

 <State 9>: 1.26ns
The critical path consists of the following:
	'phi' operation ('i') with incoming values : ('i', SHA_new/SHA_new/sha256.c:57) [181]  (0 ns)
	'add' operation ('i', SHA_new/SHA_new/sha256.c:57) [184]  (1.26 ns)

 <State 10>: 1.72ns
The critical path consists of the following:
	'load' operation ('seg_buf_load', SHA_new/SHA_new/sha256.c:59) on array 'seg_buf', SHA_new/SHA_new/sha256.c:23 [189]  (0.858 ns)
	'store' operation ('store_ln59', SHA_new/SHA_new/sha256.c:59) of variable 'seg_buf_load', SHA_new/SHA_new/sha256.c:59 on array 'digest' [191]  (0.858 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
