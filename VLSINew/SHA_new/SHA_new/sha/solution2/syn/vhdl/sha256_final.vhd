-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha256_final is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ctx_data_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ctx_data_ce0 : OUT STD_LOGIC;
    ctx_data_we0 : OUT STD_LOGIC;
    ctx_data_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ctx_data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ctx_data_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ctx_data_ce1 : OUT STD_LOGIC;
    ctx_data_we1 : OUT STD_LOGIC;
    ctx_data_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ctx_data_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    ctx_datalen_read : IN STD_LOGIC_VECTOR (31 downto 0);
    ctx_bitlen_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read9 : IN STD_LOGIC_VECTOR (31 downto 0);
    hash_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    hash_ce0 : OUT STD_LOGIC;
    hash_we0 : OUT STD_LOGIC;
    hash_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    hash_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    hash_ce1 : OUT STD_LOGIC;
    hash_we1 : OUT STD_LOGIC;
    hash_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of sha256_final is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv6_38 : STD_LOGIC_VECTOR (5 downto 0) := "111000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_547 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_sha256_transform_fu_491_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal reg_552 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_557 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_562 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_567 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_572 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_577 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_582 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_587_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1065 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_593_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_5_fu_627_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_62_reg_1085 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_63_reg_1090 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_84_fu_754_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_84_reg_1095 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_64_reg_1100 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_65_reg_1105 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_67_reg_1110 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_788_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_3_cast2_fu_801_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_cast2_reg_1123 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal i_3_cast1_fu_805_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_3_cast1_reg_1128 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_6_fu_815_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_6_reg_1136 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_88_fu_849_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_88_reg_1141 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_68_fu_809_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_89_fu_859_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_89_reg_1146 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_90_fu_869_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_90_reg_1151 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_91_fu_879_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_91_reg_1156 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_92_fu_889_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_92_reg_1161 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_93_fu_899_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_93_reg_1166 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_94_fu_909_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_94_reg_1171 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_95_fu_919_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_95_reg_1176 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum2_fu_923_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum2_reg_1181 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal sum1_fu_934_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sum1_reg_1187 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sha256_transform_fu_491_ap_start : STD_LOGIC;
    signal grp_sha256_transform_fu_491_ap_idle : STD_LOGIC;
    signal grp_sha256_transform_fu_491_ap_ready : STD_LOGIC;
    signal grp_sha256_transform_fu_491_ctx_state_0_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_491_ctx_state_1_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_491_ctx_state_2_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_491_ctx_state_3_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_491_ctx_state_4_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_491_ctx_state_5_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_491_ctx_state_6_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_491_ctx_state_7_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_491_data_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_transform_fu_491_data_ce0 : STD_LOGIC;
    signal grp_sha256_transform_fu_491_data_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_transform_fu_491_data_ce1 : STD_LOGIC;
    signal grp_sha256_transform_fu_491_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_491_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_491_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_491_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_491_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_491_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_491_ap_return_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_491_ap_return_7 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_in_reg_370 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_reg_379 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_0_in_reg_390 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_795_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ctx_state_reg_399 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_1_reg_409 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_2_reg_419 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_3_reg_429 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_4_reg_439 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_5_reg_449 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_6_reg_459 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_7_reg_469 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_reg_479 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_reg_grp_sha256_transform_fu_491_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_2_cast5_fu_616_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal sum2_cast_fu_929_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum4_cast_fu_942_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal sum6_cast_fu_950_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum8_cast_fu_963_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal sum_cast_fu_973_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum1_cast_fu_981_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum3_cast_fu_989_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_60_fu_716_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_66_fu_600_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_74_fu_633_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_56_fu_636_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_74_cast_fu_644_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_57_fu_648_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_58_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_59_fu_659_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_76_fu_671_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_16_fu_692_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_82_fu_696_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_14_fu_685_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_80_fu_689_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_78_fu_682_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_674_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_bitlen_cast_fu_710_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ctx_bitlen_cast3_fu_704_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ctx_bitlen_fu_699_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_86_read3_fu_664_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_86_fu_821_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_69_fu_825_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_70_fu_833_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_94_cast_fu_839_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_71_fu_843_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_72_fu_853_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_73_fu_863_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_75_fu_873_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_77_fu_883_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_79_fu_893_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_81_fu_903_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_83_fu_913_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum6_cast8_fu_947_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sum4_fu_955_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_fu_968_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum1_cast7_fu_978_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum3_cast6_fu_986_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);

    component sha256_transform IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ctx_state_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_6_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_7_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        data_ce0 : OUT STD_LOGIC;
        data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        data_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        data_ce1 : OUT STD_LOGIC;
        data_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_sha256_transform_fu_491 : component sha256_transform
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sha256_transform_fu_491_ap_start,
        ap_done => grp_sha256_transform_fu_491_ap_done,
        ap_idle => grp_sha256_transform_fu_491_ap_idle,
        ap_ready => grp_sha256_transform_fu_491_ap_ready,
        ctx_state_0_read => grp_sha256_transform_fu_491_ctx_state_0_read,
        ctx_state_1_read => grp_sha256_transform_fu_491_ctx_state_1_read,
        ctx_state_2_read => grp_sha256_transform_fu_491_ctx_state_2_read,
        ctx_state_3_read => grp_sha256_transform_fu_491_ctx_state_3_read,
        ctx_state_4_read => grp_sha256_transform_fu_491_ctx_state_4_read,
        ctx_state_5_read => grp_sha256_transform_fu_491_ctx_state_5_read,
        ctx_state_6_read => grp_sha256_transform_fu_491_ctx_state_6_read,
        ctx_state_7_read => grp_sha256_transform_fu_491_ctx_state_7_read,
        data_address0 => grp_sha256_transform_fu_491_data_address0,
        data_ce0 => grp_sha256_transform_fu_491_data_ce0,
        data_q0 => ctx_data_q0,
        data_address1 => grp_sha256_transform_fu_491_data_address1,
        data_ce1 => grp_sha256_transform_fu_491_data_ce1,
        data_q1 => ctx_data_q1,
        ap_return_0 => grp_sha256_transform_fu_491_ap_return_0,
        ap_return_1 => grp_sha256_transform_fu_491_ap_return_1,
        ap_return_2 => grp_sha256_transform_fu_491_ap_return_2,
        ap_return_3 => grp_sha256_transform_fu_491_ap_return_3,
        ap_return_4 => grp_sha256_transform_fu_491_ap_return_4,
        ap_return_5 => grp_sha256_transform_fu_491_ap_return_5,
        ap_return_6 => grp_sha256_transform_fu_491_ap_return_6,
        ap_return_7 => grp_sha256_transform_fu_491_ap_return_7);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_sha256_transform_fu_491_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_sha256_transform_fu_491_ap_start <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = icmp_fu_610_p2)) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                    ap_reg_grp_sha256_transform_fu_491_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_sha256_transform_fu_491_ap_ready)) then 
                    ap_reg_grp_sha256_transform_fu_491_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ctx_state_1_reg_409_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond_fu_795_p2))) then 
                ctx_state_1_reg_409 <= p_read2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_reg_1065 = ap_const_lv1_0) and (ap_const_lv1_1 = tmp_s_fu_621_p2))) then 
                ctx_state_1_reg_409 <= reg_552;
            end if; 
        end if;
    end process;

    ctx_state_2_reg_419_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond_fu_795_p2))) then 
                ctx_state_2_reg_419 <= p_read4;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_reg_1065 = ap_const_lv1_0) and (ap_const_lv1_1 = tmp_s_fu_621_p2))) then 
                ctx_state_2_reg_419 <= reg_557;
            end if; 
        end if;
    end process;

    ctx_state_3_reg_429_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond_fu_795_p2))) then 
                ctx_state_3_reg_429 <= p_read5;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_reg_1065 = ap_const_lv1_0) and (ap_const_lv1_1 = tmp_s_fu_621_p2))) then 
                ctx_state_3_reg_429 <= reg_562;
            end if; 
        end if;
    end process;

    ctx_state_4_reg_439_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond_fu_795_p2))) then 
                ctx_state_4_reg_439 <= p_read6;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_reg_1065 = ap_const_lv1_0) and (ap_const_lv1_1 = tmp_s_fu_621_p2))) then 
                ctx_state_4_reg_439 <= reg_567;
            end if; 
        end if;
    end process;

    ctx_state_5_reg_449_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond_fu_795_p2))) then 
                ctx_state_5_reg_449 <= p_read7;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_reg_1065 = ap_const_lv1_0) and (ap_const_lv1_1 = tmp_s_fu_621_p2))) then 
                ctx_state_5_reg_449 <= reg_572;
            end if; 
        end if;
    end process;

    ctx_state_6_reg_459_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond_fu_795_p2))) then 
                ctx_state_6_reg_459 <= p_read8;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_reg_1065 = ap_const_lv1_0) and (ap_const_lv1_1 = tmp_s_fu_621_p2))) then 
                ctx_state_6_reg_459 <= reg_577;
            end if; 
        end if;
    end process;

    ctx_state_7_reg_469_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond_fu_795_p2))) then 
                ctx_state_7_reg_469 <= p_read9;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_reg_1065 = ap_const_lv1_0) and (ap_const_lv1_1 = tmp_s_fu_621_p2))) then 
                ctx_state_7_reg_469 <= reg_582;
            end if; 
        end if;
    end process;

    ctx_state_reg_399_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond_fu_795_p2))) then 
                ctx_state_reg_399 <= p_read1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_reg_1065 = ap_const_lv1_0) and (ap_const_lv1_1 = tmp_s_fu_621_p2))) then 
                ctx_state_reg_399 <= reg_547;
            end if; 
        end if;
    end process;

    i_0_in_reg_390_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (tmp_fu_587_p2 = ap_const_lv1_1))) then 
                i_0_in_reg_390 <= ctx_datalen_read;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond_fu_795_p2))) then 
                i_0_in_reg_390 <= i_fu_788_p2;
            end if; 
        end if;
    end process;

    i_1_in_reg_370_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (tmp_fu_587_p2 = ap_const_lv1_0))) then 
                i_1_in_reg_370 <= ctx_datalen_read;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = icmp_fu_610_p2))) then 
                i_1_in_reg_370 <= i_1_fu_593_p2;
            end if; 
        end if;
    end process;

    i_2_reg_379_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_reg_1065 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_s_fu_621_p2))) then 
                i_2_reg_379 <= i_5_fu_627_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_sha256_transform_fu_491_ap_done = ap_const_logic_1))) then 
                i_2_reg_379 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_3_reg_479_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i_3_reg_479 <= i_6_reg_1136;
            elsif (((grp_sha256_transform_fu_491_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                i_3_reg_479 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                    i_3_cast1_reg_1128(2 downto 0) <= i_3_cast1_fu_805_p1(2 downto 0);
                    i_3_cast2_reg_1123(2 downto 0) <= i_3_cast2_fu_801_p1(2 downto 0);
                i_6_reg_1136 <= i_6_fu_815_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_sha256_transform_fu_491_ap_done = ap_const_logic_1)) or ((grp_sha256_transform_fu_491_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then
                reg_547 <= grp_sha256_transform_fu_491_ap_return_0;
                reg_552 <= grp_sha256_transform_fu_491_ap_return_1;
                reg_557 <= grp_sha256_transform_fu_491_ap_return_2;
                reg_562 <= grp_sha256_transform_fu_491_ap_return_3;
                reg_567 <= grp_sha256_transform_fu_491_ap_return_4;
                reg_572 <= grp_sha256_transform_fu_491_ap_return_5;
                reg_577 <= grp_sha256_transform_fu_491_ap_return_6;
                reg_582 <= grp_sha256_transform_fu_491_ap_return_7;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                    sum1_reg_1187(2 downto 0) <= sum1_fu_934_p3(2 downto 0);
                sum2_reg_1181 <= sum2_fu_923_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((tmp_reg_1065 = ap_const_lv1_1) or (ap_const_lv1_1 = tmp_s_fu_621_p2)))) then
                tmp_62_reg_1085 <= ctx_bitlen_cast3_fu_704_p2(23 downto 16);
                tmp_63_reg_1090 <= ctx_bitlen_fu_699_p2(31 downto 24);
                tmp_64_reg_1100 <= tmp_86_read3_fu_664_p3(15 downto 8);
                tmp_65_reg_1105 <= tmp_86_read3_fu_664_p3(23 downto 16);
                tmp_67_reg_1110 <= tmp_86_read3_fu_664_p3(31 downto 24);
                tmp_84_reg_1095 <= tmp_84_fu_754_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_0 = tmp_68_fu_809_p2))) then
                tmp_88_reg_1141 <= tmp_88_fu_849_p1;
                tmp_89_reg_1146 <= tmp_89_fu_859_p1;
                tmp_90_reg_1151 <= tmp_90_fu_869_p1;
                tmp_91_reg_1156 <= tmp_91_fu_879_p1;
                tmp_92_reg_1161 <= tmp_92_fu_889_p1;
                tmp_93_reg_1166 <= tmp_93_fu_899_p1;
                tmp_94_reg_1171 <= tmp_94_fu_909_p1;
                tmp_95_reg_1176 <= tmp_95_fu_919_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                tmp_reg_1065 <= tmp_fu_587_p2;
            end if;
        end if;
    end process;
    i_3_cast2_reg_1123(31 downto 3) <= "00000000000000000000000000000";
    i_3_cast1_reg_1128(4 downto 3) <= "00";
    sum1_reg_1187(3) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, grp_sha256_transform_fu_491_ap_done, ap_CS_fsm_state10, tmp_fu_587_p2, tmp_reg_1065, ap_CS_fsm_state2, ap_CS_fsm_state4, tmp_s_fu_621_p2, ap_CS_fsm_state5, ap_CS_fsm_state11, tmp_68_fu_809_p2, icmp_fu_610_p2, exitcond_fu_795_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (tmp_fu_587_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (tmp_fu_587_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = icmp_fu_610_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_sha256_transform_fu_491_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((tmp_reg_1065 = ap_const_lv1_1) or (ap_const_lv1_1 = tmp_s_fu_621_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond_fu_795_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_sha256_transform_fu_491_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_1 = tmp_68_fu_809_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state11, tmp_68_fu_809_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_1 = tmp_68_fu_809_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11, tmp_68_fu_809_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_1 = tmp_68_fu_809_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ctx_bitlen_cast3_fu_704_p2 <= std_logic_vector(unsigned(tmp_16_fu_692_p1) + unsigned(tmp_82_fu_696_p1));
    ctx_bitlen_cast_fu_710_p2 <= std_logic_vector(unsigned(tmp_14_fu_685_p1) + unsigned(tmp_80_fu_689_p1));
    ctx_bitlen_fu_699_p2 <= std_logic_vector(unsigned(ctx_bitlen_0_read) + unsigned(tmp_74_cast_fu_644_p1));

    ctx_data_address0_assign_proc : process(ap_CS_fsm_state1, ctx_datalen_read, ap_CS_fsm_state3, ap_CS_fsm_state10, tmp_reg_1065, i_1_fu_593_p2, ap_CS_fsm_state2, ap_CS_fsm_state4, tmp_s_fu_621_p2, grp_sha256_transform_fu_491_data_address0, icmp_fu_610_p2, i_2_cast5_fu_616_p1, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ctx_data_address0 <= ap_const_lv32_38(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ctx_data_address0 <= ap_const_lv32_3A(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ctx_data_address0 <= ap_const_lv32_3C(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and ((tmp_reg_1065 = ap_const_lv1_1) or (ap_const_lv1_1 = tmp_s_fu_621_p2)))) then 
            ctx_data_address0 <= ap_const_lv32_3F(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_reg_1065 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_s_fu_621_p2))) then 
            ctx_data_address0 <= i_2_cast5_fu_616_p1(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = icmp_fu_610_p2))) then 
            ctx_data_address0 <= i_1_fu_593_p2(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            ctx_data_address0 <= ctx_datalen_read(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ctx_data_address0 <= grp_sha256_transform_fu_491_data_address0;
        else 
            ctx_data_address0 <= "XXXXXX";
        end if; 
    end process;


    ctx_data_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state4, i_fu_788_p2, ap_CS_fsm_state5, grp_sha256_transform_fu_491_data_address1, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ctx_data_address1 <= ap_const_lv32_39(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ctx_data_address1 <= ap_const_lv32_3B(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ctx_data_address1 <= ap_const_lv32_3D(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ctx_data_address1 <= i_fu_788_p2(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ctx_data_address1 <= ap_const_lv32_3E(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ctx_data_address1 <= grp_sha256_transform_fu_491_data_address1;
        else 
            ctx_data_address1 <= "XXXXXX";
        end if; 
    end process;


    ctx_data_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state10, tmp_reg_1065, ap_CS_fsm_state2, ap_CS_fsm_state4, tmp_s_fu_621_p2, grp_sha256_transform_fu_491_data_ce0, icmp_fu_610_p2, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and ((tmp_reg_1065 = ap_const_lv1_1) or (ap_const_lv1_1 = tmp_s_fu_621_p2))) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = icmp_fu_610_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_reg_1065 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_s_fu_621_p2)) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ctx_data_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ctx_data_ce0 <= grp_sha256_transform_fu_491_data_ce0;
        else 
            ctx_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_data_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state4, ap_CS_fsm_state5, grp_sha256_transform_fu_491_data_ce1, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ctx_data_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ctx_data_ce1 <= grp_sha256_transform_fu_491_data_ce1;
        else 
            ctx_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_data_d0_assign_proc : process(ap_CS_fsm_state1, tmp_reg_1065, ap_CS_fsm_state2, ap_CS_fsm_state4, tmp_s_fu_621_p2, tmp_63_reg_1090, tmp_64_reg_1100, tmp_67_reg_1110, icmp_fu_610_p2, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, tmp_60_fu_716_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ctx_data_d0 <= tmp_67_reg_1110;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ctx_data_d0 <= tmp_64_reg_1100;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ctx_data_d0 <= tmp_63_reg_1090;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and ((tmp_reg_1065 = ap_const_lv1_1) or (ap_const_lv1_1 = tmp_s_fu_621_p2)))) then 
            ctx_data_d0 <= tmp_60_fu_716_p2;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = icmp_fu_610_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_reg_1065 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_s_fu_621_p2)))) then 
            ctx_data_d0 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            ctx_data_d0 <= ap_const_lv8_80;
        else 
            ctx_data_d0 <= "XXXXXXXX";
        end if; 
    end process;


    ctx_data_d1_assign_proc : process(ap_CS_fsm_state4, tmp_62_reg_1085, tmp_84_reg_1095, tmp_65_reg_1105, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ctx_bitlen_cast_fu_710_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ctx_data_d1 <= tmp_65_reg_1105;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ctx_data_d1 <= tmp_84_reg_1095;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ctx_data_d1 <= tmp_62_reg_1085;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ctx_data_d1 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ctx_data_d1 <= ctx_bitlen_cast_fu_710_p2(15 downto 8);
        else 
            ctx_data_d1 <= "XXXXXXXX";
        end if; 
    end process;


    ctx_data_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_reg_1065, ap_CS_fsm_state2, ap_CS_fsm_state4, tmp_s_fu_621_p2, icmp_fu_610_p2, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and ((tmp_reg_1065 = ap_const_lv1_1) or (ap_const_lv1_1 = tmp_s_fu_621_p2))) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = icmp_fu_610_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_reg_1065 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_s_fu_621_p2)) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ctx_data_we0 <= ap_const_logic_1;
        else 
            ctx_data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_data_we1_assign_proc : process(tmp_reg_1065, ap_CS_fsm_state4, tmp_s_fu_621_p2, ap_CS_fsm_state5, exitcond_fu_795_p2, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and ((tmp_reg_1065 = ap_const_lv1_1) or (ap_const_lv1_1 = tmp_s_fu_621_p2))) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond_fu_795_p2)) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ctx_data_we1 <= ap_const_logic_1;
        else 
            ctx_data_we1 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_795_p2 <= "1" when (i_0_in_reg_390 = ap_const_lv32_37) else "0";
    grp_sha256_transform_fu_491_ap_start <= ap_reg_grp_sha256_transform_fu_491_ap_start;

    grp_sha256_transform_fu_491_ctx_state_0_read_assign_proc : process(p_read1, ap_CS_fsm_state3, ap_CS_fsm_state10, ctx_state_reg_399)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_sha256_transform_fu_491_ctx_state_0_read <= ctx_state_reg_399;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_sha256_transform_fu_491_ctx_state_0_read <= p_read1;
        else 
            grp_sha256_transform_fu_491_ctx_state_0_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_sha256_transform_fu_491_ctx_state_1_read_assign_proc : process(p_read2, ap_CS_fsm_state3, ap_CS_fsm_state10, ctx_state_1_reg_409)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_sha256_transform_fu_491_ctx_state_1_read <= ctx_state_1_reg_409;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_sha256_transform_fu_491_ctx_state_1_read <= p_read2;
        else 
            grp_sha256_transform_fu_491_ctx_state_1_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_sha256_transform_fu_491_ctx_state_2_read_assign_proc : process(p_read4, ap_CS_fsm_state3, ap_CS_fsm_state10, ctx_state_2_reg_419)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_sha256_transform_fu_491_ctx_state_2_read <= ctx_state_2_reg_419;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_sha256_transform_fu_491_ctx_state_2_read <= p_read4;
        else 
            grp_sha256_transform_fu_491_ctx_state_2_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_sha256_transform_fu_491_ctx_state_3_read_assign_proc : process(p_read5, ap_CS_fsm_state3, ap_CS_fsm_state10, ctx_state_3_reg_429)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_sha256_transform_fu_491_ctx_state_3_read <= ctx_state_3_reg_429;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_sha256_transform_fu_491_ctx_state_3_read <= p_read5;
        else 
            grp_sha256_transform_fu_491_ctx_state_3_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_sha256_transform_fu_491_ctx_state_4_read_assign_proc : process(p_read6, ap_CS_fsm_state3, ap_CS_fsm_state10, ctx_state_4_reg_439)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_sha256_transform_fu_491_ctx_state_4_read <= ctx_state_4_reg_439;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_sha256_transform_fu_491_ctx_state_4_read <= p_read6;
        else 
            grp_sha256_transform_fu_491_ctx_state_4_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_sha256_transform_fu_491_ctx_state_5_read_assign_proc : process(p_read7, ap_CS_fsm_state3, ap_CS_fsm_state10, ctx_state_5_reg_449)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_sha256_transform_fu_491_ctx_state_5_read <= ctx_state_5_reg_449;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_sha256_transform_fu_491_ctx_state_5_read <= p_read7;
        else 
            grp_sha256_transform_fu_491_ctx_state_5_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_sha256_transform_fu_491_ctx_state_6_read_assign_proc : process(p_read8, ap_CS_fsm_state3, ap_CS_fsm_state10, ctx_state_6_reg_459)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_sha256_transform_fu_491_ctx_state_6_read <= ctx_state_6_reg_459;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_sha256_transform_fu_491_ctx_state_6_read <= p_read8;
        else 
            grp_sha256_transform_fu_491_ctx_state_6_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_sha256_transform_fu_491_ctx_state_7_read_assign_proc : process(p_read9, ap_CS_fsm_state3, ap_CS_fsm_state10, ctx_state_7_reg_469)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_sha256_transform_fu_491_ctx_state_7_read <= ctx_state_7_reg_469;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_sha256_transform_fu_491_ctx_state_7_read <= p_read9;
        else 
            grp_sha256_transform_fu_491_ctx_state_7_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    hash_address0_assign_proc : process(i_3_cast2_reg_1123, ap_CS_fsm_state12, ap_CS_fsm_state15, sum2_cast_fu_929_p1, ap_CS_fsm_state13, sum8_cast_fu_963_p1, ap_CS_fsm_state14, sum1_cast_fu_981_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            hash_address0 <= sum1_cast_fu_981_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            hash_address0 <= sum8_cast_fu_963_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            hash_address0 <= i_3_cast2_reg_1123(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            hash_address0 <= sum2_cast_fu_929_p1(6 - 1 downto 0);
        else 
            hash_address0 <= "XXXXXX";
        end if; 
    end process;


    hash_address1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state15, sum4_cast_fu_942_p1, ap_CS_fsm_state13, sum6_cast_fu_950_p1, ap_CS_fsm_state14, sum_cast_fu_973_p1, sum3_cast_fu_989_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            hash_address1 <= sum3_cast_fu_989_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            hash_address1 <= sum_cast_fu_973_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            hash_address1 <= sum6_cast_fu_950_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            hash_address1 <= sum4_cast_fu_942_p1(6 - 1 downto 0);
        else 
            hash_address1 <= "XXXXXX";
        end if; 
    end process;


    hash_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            hash_ce0 <= ap_const_logic_1;
        else 
            hash_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hash_ce1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            hash_ce1 <= ap_const_logic_1;
        else 
            hash_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    hash_d0_assign_proc : process(tmp_88_reg_1141, tmp_89_reg_1146, tmp_92_reg_1161, tmp_94_reg_1171, ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            hash_d0 <= tmp_94_reg_1171;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            hash_d0 <= tmp_92_reg_1161;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            hash_d0 <= tmp_88_reg_1141;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            hash_d0 <= tmp_89_reg_1146;
        else 
            hash_d0 <= "XXXXXXXX";
        end if; 
    end process;


    hash_d1_assign_proc : process(tmp_90_reg_1151, tmp_91_reg_1156, tmp_93_reg_1166, tmp_95_reg_1176, ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            hash_d1 <= tmp_95_reg_1176;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            hash_d1 <= tmp_93_reg_1166;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            hash_d1 <= tmp_91_reg_1156;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            hash_d1 <= tmp_90_reg_1151;
        else 
            hash_d1 <= "XXXXXXXX";
        end if; 
    end process;


    hash_we0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            hash_we0 <= ap_const_logic_1;
        else 
            hash_we0 <= ap_const_logic_0;
        end if; 
    end process;


    hash_we1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            hash_we1 <= ap_const_logic_1;
        else 
            hash_we1 <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_593_p2 <= std_logic_vector(unsigned(i_1_in_reg_370) + unsigned(ap_const_lv32_1));
    i_2_cast5_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_379),32));
    i_3_cast1_fu_805_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_479),5));
    i_3_cast2_fu_801_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_479),32));
    i_5_fu_627_p2 <= std_logic_vector(unsigned(i_2_reg_379) + unsigned(ap_const_lv6_1));
    i_6_fu_815_p2 <= std_logic_vector(unsigned(i_3_reg_479) + unsigned(ap_const_lv3_1));
    i_fu_788_p2 <= std_logic_vector(unsigned(i_0_in_reg_390) + unsigned(ap_const_lv32_1));
    icmp_fu_610_p2 <= "1" when (tmp_66_fu_600_p4 = ap_const_lv26_0) else "0";
        sum1_cast7_fu_978_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum1_reg_1187),5));

    sum1_cast_fu_981_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum1_cast7_fu_978_p1),32));
    sum1_fu_934_p3 <= (ap_const_lv1_1 & i_3_reg_479);
    sum2_cast_fu_929_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_fu_923_p2),32));
    sum2_fu_923_p2 <= (i_3_reg_479 xor ap_const_lv3_4);
        sum3_cast6_fu_986_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum2_reg_1181),5));

    sum3_cast_fu_989_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum3_cast6_fu_986_p1),32));
    sum4_cast_fu_942_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum1_fu_934_p3),32));
    sum4_fu_955_p3 <= (ap_const_lv2_2 & i_3_reg_479);
        sum6_cast8_fu_947_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum2_reg_1181),4));

    sum6_cast_fu_950_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum6_cast8_fu_947_p1),32));
    sum8_cast_fu_963_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum4_fu_955_p3),32));
    sum_cast_fu_973_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_fu_968_p2),32));
    sum_fu_968_p2 <= std_logic_vector(signed(ap_const_lv5_14) + signed(i_3_cast1_reg_1128));
    tmp_12_fu_674_p3 <= (tmp_76_fu_671_p1 & ap_const_lv3_0);
    tmp_14_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_56_fu_636_p3),16));
    tmp_16_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_56_fu_636_p3),24));
    tmp_56_fu_636_p3 <= (tmp_74_fu_633_p1 & ap_const_lv3_0);
    tmp_57_fu_648_p2 <= (tmp_74_cast_fu_644_p1 xor ap_const_lv32_FFFFFFFF);
    tmp_58_fu_654_p2 <= "1" when (unsigned(ctx_bitlen_0_read) > unsigned(tmp_57_fu_648_p2)) else "0";
    tmp_59_fu_659_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(p_read3));
    tmp_60_fu_716_p2 <= std_logic_vector(unsigned(tmp_78_fu_682_p1) + unsigned(tmp_12_fu_674_p3));
    tmp_66_fu_600_p4 <= i_1_fu_593_p2(31 downto 6);
    tmp_68_fu_809_p2 <= "1" when (i_3_reg_479 = ap_const_lv3_4) else "0";
    tmp_69_fu_825_p3 <= (tmp_86_fu_821_p1 & ap_const_lv3_0);
    tmp_70_fu_833_p2 <= std_logic_vector(signed(ap_const_lv5_18) - signed(tmp_69_fu_825_p3));
    tmp_71_fu_843_p2 <= std_logic_vector(shift_right(unsigned(reg_547),to_integer(unsigned('0' & tmp_94_cast_fu_839_p1(31-1 downto 0)))));
    tmp_72_fu_853_p2 <= std_logic_vector(shift_right(unsigned(reg_552),to_integer(unsigned('0' & tmp_94_cast_fu_839_p1(31-1 downto 0)))));
    tmp_73_fu_863_p2 <= std_logic_vector(shift_right(unsigned(reg_557),to_integer(unsigned('0' & tmp_94_cast_fu_839_p1(31-1 downto 0)))));
    tmp_74_cast_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_56_fu_636_p3),32));
    tmp_74_fu_633_p1 <= ctx_datalen_read(6 - 1 downto 0);
    tmp_75_fu_873_p2 <= std_logic_vector(shift_right(unsigned(reg_562),to_integer(unsigned('0' & tmp_94_cast_fu_839_p1(31-1 downto 0)))));
    tmp_76_fu_671_p1 <= ctx_datalen_read(5 - 1 downto 0);
    tmp_77_fu_883_p2 <= std_logic_vector(shift_right(unsigned(reg_567),to_integer(unsigned('0' & tmp_94_cast_fu_839_p1(31-1 downto 0)))));
    tmp_78_fu_682_p1 <= ctx_bitlen_0_read(8 - 1 downto 0);
    tmp_79_fu_893_p2 <= std_logic_vector(shift_right(unsigned(reg_572),to_integer(unsigned('0' & tmp_94_cast_fu_839_p1(31-1 downto 0)))));
    tmp_80_fu_689_p1 <= ctx_bitlen_0_read(16 - 1 downto 0);
    tmp_81_fu_903_p2 <= std_logic_vector(shift_right(unsigned(reg_577),to_integer(unsigned('0' & tmp_94_cast_fu_839_p1(31-1 downto 0)))));
    tmp_82_fu_696_p1 <= ctx_bitlen_0_read(24 - 1 downto 0);
    tmp_83_fu_913_p2 <= std_logic_vector(shift_right(unsigned(reg_582),to_integer(unsigned('0' & tmp_94_cast_fu_839_p1(31-1 downto 0)))));
    tmp_84_fu_754_p1 <= tmp_86_read3_fu_664_p3(8 - 1 downto 0);
    tmp_86_fu_821_p1 <= i_3_reg_479(2 - 1 downto 0);
    tmp_86_read3_fu_664_p3 <= 
        tmp_59_fu_659_p2 when (tmp_58_fu_654_p2(0) = '1') else 
        p_read3;
    tmp_88_fu_849_p1 <= tmp_71_fu_843_p2(8 - 1 downto 0);
    tmp_89_fu_859_p1 <= tmp_72_fu_853_p2(8 - 1 downto 0);
    tmp_90_fu_869_p1 <= tmp_73_fu_863_p2(8 - 1 downto 0);
    tmp_91_fu_879_p1 <= tmp_75_fu_873_p2(8 - 1 downto 0);
    tmp_92_fu_889_p1 <= tmp_77_fu_883_p2(8 - 1 downto 0);
    tmp_93_fu_899_p1 <= tmp_79_fu_893_p2(8 - 1 downto 0);
    tmp_94_cast_fu_839_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_70_fu_833_p2),32));
    tmp_94_fu_909_p1 <= tmp_81_fu_903_p2(8 - 1 downto 0);
    tmp_95_fu_919_p1 <= tmp_83_fu_913_p2(8 - 1 downto 0);
    tmp_fu_587_p2 <= "1" when (unsigned(ctx_datalen_read) < unsigned(ap_const_lv32_38)) else "0";
    tmp_s_fu_621_p2 <= "1" when (i_2_reg_379 = ap_const_lv6_38) else "0";
end behav;
