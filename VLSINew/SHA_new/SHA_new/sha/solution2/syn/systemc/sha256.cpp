// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "sha256.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic sha256::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic sha256::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<10> sha256::ap_ST_fsm_state1 = "1";
const sc_lv<10> sha256::ap_ST_fsm_state2 = "10";
const sc_lv<10> sha256::ap_ST_fsm_state3 = "100";
const sc_lv<10> sha256::ap_ST_fsm_state4 = "1000";
const sc_lv<10> sha256::ap_ST_fsm_state5 = "10000";
const sc_lv<10> sha256::ap_ST_fsm_state6 = "100000";
const sc_lv<10> sha256::ap_ST_fsm_state7 = "1000000";
const sc_lv<10> sha256::ap_ST_fsm_state8 = "10000000";
const sc_lv<10> sha256::ap_ST_fsm_state9 = "100000000";
const sc_lv<10> sha256::ap_ST_fsm_state10 = "1000000000";
const sc_lv<32> sha256::ap_const_lv32_0 = "00000000000000000000000000000000";
const int sha256::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> sha256::ap_const_lv32_1 = "1";
const sc_lv<1> sha256::ap_const_lv1_1 = "1";
const sc_lv<32> sha256::ap_const_lv32_2 = "10";
const sc_lv<1> sha256::ap_const_lv1_0 = "0";
const sc_lv<32> sha256::ap_const_lv32_5 = "101";
const sc_lv<32> sha256::ap_const_lv32_8 = "1000";
const sc_lv<32> sha256::ap_const_lv32_3 = "11";
const sc_lv<7> sha256::ap_const_lv7_0 = "0000000";
const sc_lv<32> sha256::ap_const_lv32_6 = "110";
const sc_lv<6> sha256::ap_const_lv6_0 = "000000";
const sc_lv<32> sha256::ap_const_lv32_7 = "111";
const sc_lv<32> sha256::ap_const_lv32_9 = "1001";
const sc_lv<32> sha256::ap_const_lv32_4 = "100";
const sc_lv<32> sha256::ap_const_lv32_40 = "1000000";
const bool sha256::ap_const_boolean_0 = false;
const sc_lv<32> sha256::ap_const_lv32_6A09E667 = "1101010000010011110011001100111";
const sc_lv<32> sha256::ap_const_lv32_BB67AE85 = "10111011011001111010111010000101";
const sc_lv<32> sha256::ap_const_lv32_3C6EF372 = "111100011011101111001101110010";
const sc_lv<32> sha256::ap_const_lv32_A54FF53A = "10100101010011111111010100111010";
const sc_lv<32> sha256::ap_const_lv32_510E527F = "1010001000011100101001001111111";
const sc_lv<32> sha256::ap_const_lv32_9B05688C = "10011011000001010110100010001100";
const sc_lv<32> sha256::ap_const_lv32_1F83D9AB = "11111100000111101100110101011";
const sc_lv<32> sha256::ap_const_lv32_5BE0CD19 = "1011011111000001100110100011001";
const sc_lv<32> sha256::ap_const_lv32_1F = "11111";
const sc_lv<26> sha256::ap_const_lv26_0 = "00000000000000000000000000";
const sc_lv<7> sha256::ap_const_lv7_40 = "1000000";
const sc_lv<7> sha256::ap_const_lv7_1 = "1";
const sc_lv<32> sha256::ap_const_lv32_FFFFFFC0 = "11111111111111111111111111000000";
const sc_lv<6> sha256::ap_const_lv6_1 = "1";
const sc_lv<6> sha256::ap_const_lv6_20 = "100000";
const bool sha256::ap_const_boolean_1 = true;

sha256::sha256(sc_module_name name) : sc_module(name), mVcdFile(0) {
    sha256_AXILiteS_s_axi_U = new sha256_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("sha256_AXILiteS_s_axi_U");
    sha256_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    sha256_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    sha256_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    sha256_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    sha256_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    sha256_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    sha256_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    sha256_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    sha256_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    sha256_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    sha256_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    sha256_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    sha256_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    sha256_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    sha256_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    sha256_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    sha256_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    sha256_AXILiteS_s_axi_U->ACLK(ap_clk);
    sha256_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    sha256_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    sha256_AXILiteS_s_axi_U->ap_start(ap_start);
    sha256_AXILiteS_s_axi_U->interrupt(interrupt);
    sha256_AXILiteS_s_axi_U->ap_ready(ap_ready);
    sha256_AXILiteS_s_axi_U->ap_done(ap_done);
    sha256_AXILiteS_s_axi_U->ap_idle(ap_idle);
    sha256_AXILiteS_s_axi_U->data_address0(data_address0);
    sha256_AXILiteS_s_axi_U->data_ce0(data_ce0);
    sha256_AXILiteS_s_axi_U->data_q0(data_q0);
    sha256_AXILiteS_s_axi_U->base_offset(base_offset);
    sha256_AXILiteS_s_axi_U->bytes(bytes);
    sha256_AXILiteS_s_axi_U->digest_address0(digest_address0);
    sha256_AXILiteS_s_axi_U->digest_ce0(digest_ce0);
    sha256_AXILiteS_s_axi_U->digest_we0(digest_we0);
    sha256_AXILiteS_s_axi_U->digest_d0(seg_buf_q0);
    seg_buf_U = new sha256_seg_buf("seg_buf_U");
    seg_buf_U->clk(ap_clk);
    seg_buf_U->reset(ap_rst_n_inv);
    seg_buf_U->address0(seg_buf_address0);
    seg_buf_U->ce0(seg_buf_ce0);
    seg_buf_U->we0(seg_buf_we0);
    seg_buf_U->d0(seg_buf_d0);
    seg_buf_U->q0(seg_buf_q0);
    seg_buf_U->address1(grp_sha256_final_fu_268_hash_address1);
    seg_buf_U->ce1(seg_buf_ce1);
    seg_buf_U->we1(seg_buf_we1);
    seg_buf_U->d1(grp_sha256_final_fu_268_hash_d1);
    sha256ctx_data_U = new sha256_sha256ctx_bkb("sha256ctx_data_U");
    sha256ctx_data_U->clk(ap_clk);
    sha256ctx_data_U->reset(ap_rst_n_inv);
    sha256ctx_data_U->address0(sha256ctx_data_address0);
    sha256ctx_data_U->ce0(sha256ctx_data_ce0);
    sha256ctx_data_U->we0(sha256ctx_data_we0);
    sha256ctx_data_U->d0(sha256ctx_data_d0);
    sha256ctx_data_U->q0(sha256ctx_data_q0);
    sha256ctx_data_U->address1(sha256ctx_data_address1);
    sha256ctx_data_U->ce1(sha256ctx_data_ce1);
    sha256ctx_data_U->we1(sha256ctx_data_we1);
    sha256ctx_data_U->d1(grp_sha256_final_fu_268_ctx_data_d1);
    sha256ctx_data_U->q1(sha256ctx_data_q1);
    grp_sha256_final_fu_268 = new sha256_final("grp_sha256_final_fu_268");
    grp_sha256_final_fu_268->ap_clk(ap_clk);
    grp_sha256_final_fu_268->ap_rst(ap_rst_n_inv);
    grp_sha256_final_fu_268->ap_start(grp_sha256_final_fu_268_ap_start);
    grp_sha256_final_fu_268->ap_done(grp_sha256_final_fu_268_ap_done);
    grp_sha256_final_fu_268->ap_idle(grp_sha256_final_fu_268_ap_idle);
    grp_sha256_final_fu_268->ap_ready(grp_sha256_final_fu_268_ap_ready);
    grp_sha256_final_fu_268->ctx_data_address0(grp_sha256_final_fu_268_ctx_data_address0);
    grp_sha256_final_fu_268->ctx_data_ce0(grp_sha256_final_fu_268_ctx_data_ce0);
    grp_sha256_final_fu_268->ctx_data_we0(grp_sha256_final_fu_268_ctx_data_we0);
    grp_sha256_final_fu_268->ctx_data_d0(grp_sha256_final_fu_268_ctx_data_d0);
    grp_sha256_final_fu_268->ctx_data_q0(sha256ctx_data_q0);
    grp_sha256_final_fu_268->ctx_data_address1(grp_sha256_final_fu_268_ctx_data_address1);
    grp_sha256_final_fu_268->ctx_data_ce1(grp_sha256_final_fu_268_ctx_data_ce1);
    grp_sha256_final_fu_268->ctx_data_we1(grp_sha256_final_fu_268_ctx_data_we1);
    grp_sha256_final_fu_268->ctx_data_d1(grp_sha256_final_fu_268_ctx_data_d1);
    grp_sha256_final_fu_268->ctx_data_q1(sha256ctx_data_q1);
    grp_sha256_final_fu_268->ctx_datalen_read(reg_465);
    grp_sha256_final_fu_268->ctx_bitlen_0_read(reg_471);
    grp_sha256_final_fu_268->p_read3(reg_477);
    grp_sha256_final_fu_268->p_read1(reg_483);
    grp_sha256_final_fu_268->p_read2(reg_489);
    grp_sha256_final_fu_268->p_read4(reg_495);
    grp_sha256_final_fu_268->p_read5(reg_501);
    grp_sha256_final_fu_268->p_read6(reg_507);
    grp_sha256_final_fu_268->p_read7(reg_513);
    grp_sha256_final_fu_268->p_read8(reg_519);
    grp_sha256_final_fu_268->p_read9(reg_525);
    grp_sha256_final_fu_268->hash_address0(grp_sha256_final_fu_268_hash_address0);
    grp_sha256_final_fu_268->hash_ce0(grp_sha256_final_fu_268_hash_ce0);
    grp_sha256_final_fu_268->hash_we0(grp_sha256_final_fu_268_hash_we0);
    grp_sha256_final_fu_268->hash_d0(grp_sha256_final_fu_268_hash_d0);
    grp_sha256_final_fu_268->hash_address1(grp_sha256_final_fu_268_hash_address1);
    grp_sha256_final_fu_268->hash_ce1(grp_sha256_final_fu_268_hash_ce1);
    grp_sha256_final_fu_268->hash_we1(grp_sha256_final_fu_268_hash_we1);
    grp_sha256_final_fu_268->hash_d1(grp_sha256_final_fu_268_hash_d1);
    grp_sha256_update_fu_287 = new sha256_update("grp_sha256_update_fu_287");
    grp_sha256_update_fu_287->ap_clk(ap_clk);
    grp_sha256_update_fu_287->ap_rst(ap_rst_n_inv);
    grp_sha256_update_fu_287->ap_start(grp_sha256_update_fu_287_ap_start);
    grp_sha256_update_fu_287->ap_done(grp_sha256_update_fu_287_ap_done);
    grp_sha256_update_fu_287->ap_idle(grp_sha256_update_fu_287_ap_idle);
    grp_sha256_update_fu_287->ap_ready(grp_sha256_update_fu_287_ap_ready);
    grp_sha256_update_fu_287->ctx_data_address0(grp_sha256_update_fu_287_ctx_data_address0);
    grp_sha256_update_fu_287->ctx_data_ce0(grp_sha256_update_fu_287_ctx_data_ce0);
    grp_sha256_update_fu_287->ctx_data_we0(grp_sha256_update_fu_287_ctx_data_we0);
    grp_sha256_update_fu_287->ctx_data_d0(grp_sha256_update_fu_287_ctx_data_d0);
    grp_sha256_update_fu_287->ctx_data_q0(sha256ctx_data_q0);
    grp_sha256_update_fu_287->ctx_data_address1(grp_sha256_update_fu_287_ctx_data_address1);
    grp_sha256_update_fu_287->ctx_data_ce1(grp_sha256_update_fu_287_ctx_data_ce1);
    grp_sha256_update_fu_287->ctx_data_q1(sha256ctx_data_q1);
    grp_sha256_update_fu_287->ctx_datalen_read(grp_sha256_update_fu_287_ctx_datalen_read);
    grp_sha256_update_fu_287->p_read1(grp_sha256_update_fu_287_p_read1);
    grp_sha256_update_fu_287->p_read2(grp_sha256_update_fu_287_p_read2);
    grp_sha256_update_fu_287->p_read3(grp_sha256_update_fu_287_p_read3);
    grp_sha256_update_fu_287->p_read4(grp_sha256_update_fu_287_p_read4);
    grp_sha256_update_fu_287->p_read5(grp_sha256_update_fu_287_p_read5);
    grp_sha256_update_fu_287->p_read6(grp_sha256_update_fu_287_p_read6);
    grp_sha256_update_fu_287->p_read7(grp_sha256_update_fu_287_p_read7);
    grp_sha256_update_fu_287->p_read8(grp_sha256_update_fu_287_p_read8);
    grp_sha256_update_fu_287->p_read9(grp_sha256_update_fu_287_p_read9);
    grp_sha256_update_fu_287->p_read10(grp_sha256_update_fu_287_p_read10);
    grp_sha256_update_fu_287->data_address0(grp_sha256_update_fu_287_data_address0);
    grp_sha256_update_fu_287->data_ce0(grp_sha256_update_fu_287_data_ce0);
    grp_sha256_update_fu_287->data_q0(seg_buf_q0);
    grp_sha256_update_fu_287->len(grp_sha256_update_fu_287_len);
    grp_sha256_update_fu_287->ap_return_0(grp_sha256_update_fu_287_ap_return_0);
    grp_sha256_update_fu_287->ap_return_1(grp_sha256_update_fu_287_ap_return_1);
    grp_sha256_update_fu_287->ap_return_2(grp_sha256_update_fu_287_ap_return_2);
    grp_sha256_update_fu_287->ap_return_3(grp_sha256_update_fu_287_ap_return_3);
    grp_sha256_update_fu_287->ap_return_4(grp_sha256_update_fu_287_ap_return_4);
    grp_sha256_update_fu_287->ap_return_5(grp_sha256_update_fu_287_ap_return_5);
    grp_sha256_update_fu_287->ap_return_6(grp_sha256_update_fu_287_ap_return_6);
    grp_sha256_update_fu_287->ap_return_7(grp_sha256_update_fu_287_ap_return_7);
    grp_sha256_update_fu_287->ap_return_8(grp_sha256_update_fu_287_ap_return_8);
    grp_sha256_update_fu_287->ap_return_9(grp_sha256_update_fu_287_ap_return_9);
    grp_sha256_update_fu_287->ap_return_10(grp_sha256_update_fu_287_ap_return_10);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state5_on_subcall_done);
    sensitive << ( icmp_reg_855 );
    sensitive << ( grp_sha256_update_fu_287_ap_done );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( exitcond_fu_735_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( exitcond_fu_735_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_data_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( sum_cast_fu_660_p1 );
    sensitive << ( sum2_cast_fu_720_p1 );

    SC_METHOD(thread_data_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_digest_address0);
    sensitive << ( i_2_cast3_reg_950 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_digest_ce0);
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_digest_we0);
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_exitcond4_fu_694_p2);
    sensitive << ( n_load_reg_845 );
    sensitive << ( i_1_cast_fu_690_p1 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_exitcond5_fu_633_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( i9_reg_235 );

    SC_METHOD(thread_exitcond_fu_735_p2);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( i_2_reg_257 );

    SC_METHOD(thread_grp_sha256_final_fu_268_ap_start);
    sensitive << ( ap_reg_grp_sha256_final_fu_268_ap_start );

    SC_METHOD(thread_grp_sha256_update_fu_287_ap_start);
    sensitive << ( ap_reg_grp_sha256_update_fu_287_ap_start );

    SC_METHOD(thread_grp_sha256_update_fu_287_ctx_datalen_read);
    sensitive << ( reg_465 );
    sensitive << ( icmp_reg_855 );
    sensitive << ( sha256ctx_datalen_lo_1_reg_895 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_grp_sha256_update_fu_287_len);
    sensitive << ( n_load_reg_845 );
    sensitive << ( icmp_reg_855 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_grp_sha256_update_fu_287_p_read1);
    sensitive << ( reg_471 );
    sensitive << ( icmp_reg_855 );
    sensitive << ( sha256ctx_bitlen_0_1_reg_900 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_grp_sha256_update_fu_287_p_read10);
    sensitive << ( reg_525 );
    sensitive << ( icmp_reg_855 );
    sensitive << ( sha256ctx_state_7_2_2_reg_945 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_grp_sha256_update_fu_287_p_read2);
    sensitive << ( reg_477 );
    sensitive << ( icmp_reg_855 );
    sensitive << ( sha256ctx_bitlen_1_1_reg_905 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_grp_sha256_update_fu_287_p_read3);
    sensitive << ( reg_483 );
    sensitive << ( icmp_reg_855 );
    sensitive << ( sha256ctx_state_0_2_2_reg_910 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_grp_sha256_update_fu_287_p_read4);
    sensitive << ( reg_489 );
    sensitive << ( icmp_reg_855 );
    sensitive << ( sha256ctx_state_1_2_2_reg_915 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_grp_sha256_update_fu_287_p_read5);
    sensitive << ( reg_495 );
    sensitive << ( icmp_reg_855 );
    sensitive << ( sha256ctx_state_2_2_2_reg_920 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_grp_sha256_update_fu_287_p_read6);
    sensitive << ( reg_501 );
    sensitive << ( icmp_reg_855 );
    sensitive << ( sha256ctx_state_3_2_2_reg_925 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_grp_sha256_update_fu_287_p_read7);
    sensitive << ( reg_507 );
    sensitive << ( icmp_reg_855 );
    sensitive << ( sha256ctx_state_4_2_2_reg_930 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_grp_sha256_update_fu_287_p_read8);
    sensitive << ( reg_513 );
    sensitive << ( icmp_reg_855 );
    sensitive << ( sha256ctx_state_5_2_2_reg_935 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_grp_sha256_update_fu_287_p_read9);
    sensitive << ( reg_519 );
    sensitive << ( icmp_reg_855 );
    sensitive << ( sha256ctx_state_6_2_2_reg_940 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_i9_cast5_fu_629_p1);
    sensitive << ( i9_reg_235 );

    SC_METHOD(thread_i9_cast6_fu_625_p1);
    sensitive << ( i9_reg_235 );

    SC_METHOD(thread_i_1_cast4_fu_686_p1);
    sensitive << ( i_1_reg_246 );

    SC_METHOD(thread_i_1_cast_fu_690_p1);
    sensitive << ( i_1_reg_246 );

    SC_METHOD(thread_i_2_cast3_fu_730_p1);
    sensitive << ( i_2_reg_257 );

    SC_METHOD(thread_i_7_fu_639_p2);
    sensitive << ( i9_reg_235 );

    SC_METHOD(thread_i_8_fu_699_p2);
    sensitive << ( i_1_reg_246 );

    SC_METHOD(thread_i_fu_741_p2);
    sensitive << ( i_2_reg_257 );

    SC_METHOD(thread_icmp_fu_619_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_603_p2 );
    sensitive << ( tmp_97_fu_609_p4 );

    SC_METHOD(thread_n_1_fu_665_p2);
    sensitive << ( n_load_reg_845 );

    SC_METHOD(thread_seg_buf_address0);
    sensitive << ( icmp_reg_855 );
    sensitive << ( i9_cast5_reg_859 );
    sensitive << ( i_1_cast_reg_877 );
    sensitive << ( i_2_cast3_fu_730_p1 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_sha256_final_fu_268_hash_address0 );
    sensitive << ( grp_sha256_update_fu_287_data_address0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_seg_buf_ce0);
    sensitive << ( icmp_reg_855 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_sha256_final_fu_268_hash_ce0 );
    sensitive << ( grp_sha256_update_fu_287_data_ce0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_seg_buf_ce1);
    sensitive << ( grp_sha256_final_fu_268_hash_ce1 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_seg_buf_d0);
    sensitive << ( data_q0 );
    sensitive << ( grp_sha256_final_fu_268_hash_d0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_seg_buf_we0);
    sensitive << ( grp_sha256_final_fu_268_hash_we0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_seg_buf_we1);
    sensitive << ( grp_sha256_final_fu_268_hash_we1 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_seg_offset_1_fu_675_p2);
    sensitive << ( seg_offset_fu_152 );

    SC_METHOD(thread_sha256ctx_data_address0);
    sensitive << ( icmp_reg_855 );
    sensitive << ( grp_sha256_final_fu_268_ctx_data_address0 );
    sensitive << ( grp_sha256_update_fu_287_ctx_data_address0 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_sha256ctx_data_address1);
    sensitive << ( icmp_reg_855 );
    sensitive << ( grp_sha256_final_fu_268_ctx_data_address1 );
    sensitive << ( grp_sha256_update_fu_287_ctx_data_address1 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_sha256ctx_data_ce0);
    sensitive << ( icmp_reg_855 );
    sensitive << ( grp_sha256_final_fu_268_ctx_data_ce0 );
    sensitive << ( grp_sha256_update_fu_287_ctx_data_ce0 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_sha256ctx_data_ce1);
    sensitive << ( icmp_reg_855 );
    sensitive << ( grp_sha256_final_fu_268_ctx_data_ce1 );
    sensitive << ( grp_sha256_update_fu_287_ctx_data_ce1 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_sha256ctx_data_d0);
    sensitive << ( icmp_reg_855 );
    sensitive << ( grp_sha256_final_fu_268_ctx_data_d0 );
    sensitive << ( grp_sha256_update_fu_287_ctx_data_d0 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_sha256ctx_data_we0);
    sensitive << ( icmp_reg_855 );
    sensitive << ( grp_sha256_final_fu_268_ctx_data_we0 );
    sensitive << ( grp_sha256_update_fu_287_ctx_data_we0 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_sha256ctx_data_we1);
    sensitive << ( grp_sha256_final_fu_268_ctx_data_we1 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_sum2_cast_fu_720_p1);
    sensitive << ( sum2_fu_714_p2 );

    SC_METHOD(thread_sum2_fu_714_p2);
    sensitive << ( tmp_98_fu_710_p1 );
    sensitive << ( tmp2_fu_705_p2 );

    SC_METHOD(thread_sum_cast_fu_660_p1);
    sensitive << ( sum_fu_654_p2 );

    SC_METHOD(thread_sum_fu_654_p2);
    sensitive << ( tmp_99_fu_650_p1 );
    sensitive << ( tmp1_fu_645_p2 );

    SC_METHOD(thread_tmp1_fu_645_p2);
    sensitive << ( tmp_96_reg_839 );
    sensitive << ( i9_cast6_fu_625_p1 );

    SC_METHOD(thread_tmp2_fu_705_p2);
    sensitive << ( tmp_96_reg_839 );
    sensitive << ( i_1_cast4_fu_686_p1 );

    SC_METHOD(thread_tmp_96_fu_531_p1);
    sensitive << ( base_offset );

    SC_METHOD(thread_tmp_97_fu_609_p4);
    sensitive << ( n_fu_104 );

    SC_METHOD(thread_tmp_98_fu_710_p1);
    sensitive << ( seg_offset_fu_152 );

    SC_METHOD(thread_tmp_99_fu_650_p1);
    sensitive << ( seg_offset_fu_152 );

    SC_METHOD(thread_tmp_fu_603_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( n_fu_104 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_603_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond5_fu_633_p2 );
    sensitive << ( icmp_fu_619_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond4_fu_694_p2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( exitcond_fu_735_p2 );
    sensitive << ( grp_sha256_final_fu_268_ap_done );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_state5_on_subcall_done );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0000000001";
    ap_reg_grp_sha256_final_fu_268_ap_start = SC_LOGIC_0;
    ap_reg_grp_sha256_update_fu_287_ap_start = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "sha256_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, data_address0, "data_address0");
    sc_trace(mVcdFile, data_ce0, "data_ce0");
    sc_trace(mVcdFile, data_q0, "data_q0");
    sc_trace(mVcdFile, base_offset, "base_offset");
    sc_trace(mVcdFile, bytes, "bytes");
    sc_trace(mVcdFile, digest_address0, "digest_address0");
    sc_trace(mVcdFile, digest_ce0, "digest_ce0");
    sc_trace(mVcdFile, digest_we0, "digest_we0");
    sc_trace(mVcdFile, reg_465, "reg_465");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_fu_603_p2, "tmp_fu_603_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, exitcond5_fu_633_p2, "exitcond5_fu_633_p2");
    sc_trace(mVcdFile, reg_471, "reg_471");
    sc_trace(mVcdFile, reg_477, "reg_477");
    sc_trace(mVcdFile, reg_483, "reg_483");
    sc_trace(mVcdFile, reg_489, "reg_489");
    sc_trace(mVcdFile, reg_495, "reg_495");
    sc_trace(mVcdFile, reg_501, "reg_501");
    sc_trace(mVcdFile, reg_507, "reg_507");
    sc_trace(mVcdFile, reg_513, "reg_513");
    sc_trace(mVcdFile, reg_519, "reg_519");
    sc_trace(mVcdFile, reg_525, "reg_525");
    sc_trace(mVcdFile, tmp_96_fu_531_p1, "tmp_96_fu_531_p1");
    sc_trace(mVcdFile, tmp_96_reg_839, "tmp_96_reg_839");
    sc_trace(mVcdFile, n_load_reg_845, "n_load_reg_845");
    sc_trace(mVcdFile, icmp_fu_619_p2, "icmp_fu_619_p2");
    sc_trace(mVcdFile, icmp_reg_855, "icmp_reg_855");
    sc_trace(mVcdFile, i9_cast5_fu_629_p1, "i9_cast5_fu_629_p1");
    sc_trace(mVcdFile, i9_cast5_reg_859, "i9_cast5_reg_859");
    sc_trace(mVcdFile, i_7_fu_639_p2, "i_7_fu_639_p2");
    sc_trace(mVcdFile, i_7_reg_867, "i_7_reg_867");
    sc_trace(mVcdFile, i_1_cast_fu_690_p1, "i_1_cast_fu_690_p1");
    sc_trace(mVcdFile, i_1_cast_reg_877, "i_1_cast_reg_877");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, i_8_fu_699_p2, "i_8_fu_699_p2");
    sc_trace(mVcdFile, i_8_reg_885, "i_8_reg_885");
    sc_trace(mVcdFile, exitcond4_fu_694_p2, "exitcond4_fu_694_p2");
    sc_trace(mVcdFile, sha256ctx_datalen_lo_1_reg_895, "sha256ctx_datalen_lo_1_reg_895");
    sc_trace(mVcdFile, sha256ctx_bitlen_0_1_reg_900, "sha256ctx_bitlen_0_1_reg_900");
    sc_trace(mVcdFile, sha256ctx_bitlen_1_1_reg_905, "sha256ctx_bitlen_1_1_reg_905");
    sc_trace(mVcdFile, sha256ctx_state_0_2_2_reg_910, "sha256ctx_state_0_2_2_reg_910");
    sc_trace(mVcdFile, sha256ctx_state_1_2_2_reg_915, "sha256ctx_state_1_2_2_reg_915");
    sc_trace(mVcdFile, sha256ctx_state_2_2_2_reg_920, "sha256ctx_state_2_2_2_reg_920");
    sc_trace(mVcdFile, sha256ctx_state_3_2_2_reg_925, "sha256ctx_state_3_2_2_reg_925");
    sc_trace(mVcdFile, sha256ctx_state_4_2_2_reg_930, "sha256ctx_state_4_2_2_reg_930");
    sc_trace(mVcdFile, sha256ctx_state_5_2_2_reg_935, "sha256ctx_state_5_2_2_reg_935");
    sc_trace(mVcdFile, sha256ctx_state_6_2_2_reg_940, "sha256ctx_state_6_2_2_reg_940");
    sc_trace(mVcdFile, sha256ctx_state_7_2_2_reg_945, "sha256ctx_state_7_2_2_reg_945");
    sc_trace(mVcdFile, i_2_cast3_fu_730_p1, "i_2_cast3_fu_730_p1");
    sc_trace(mVcdFile, i_2_cast3_reg_950, "i_2_cast3_reg_950");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, i_fu_741_p2, "i_fu_741_p2");
    sc_trace(mVcdFile, i_reg_958, "i_reg_958");
    sc_trace(mVcdFile, exitcond_fu_735_p2, "exitcond_fu_735_p2");
    sc_trace(mVcdFile, seg_buf_address0, "seg_buf_address0");
    sc_trace(mVcdFile, seg_buf_ce0, "seg_buf_ce0");
    sc_trace(mVcdFile, seg_buf_we0, "seg_buf_we0");
    sc_trace(mVcdFile, seg_buf_d0, "seg_buf_d0");
    sc_trace(mVcdFile, seg_buf_q0, "seg_buf_q0");
    sc_trace(mVcdFile, seg_buf_ce1, "seg_buf_ce1");
    sc_trace(mVcdFile, seg_buf_we1, "seg_buf_we1");
    sc_trace(mVcdFile, sha256ctx_data_address0, "sha256ctx_data_address0");
    sc_trace(mVcdFile, sha256ctx_data_ce0, "sha256ctx_data_ce0");
    sc_trace(mVcdFile, sha256ctx_data_we0, "sha256ctx_data_we0");
    sc_trace(mVcdFile, sha256ctx_data_d0, "sha256ctx_data_d0");
    sc_trace(mVcdFile, sha256ctx_data_q0, "sha256ctx_data_q0");
    sc_trace(mVcdFile, sha256ctx_data_address1, "sha256ctx_data_address1");
    sc_trace(mVcdFile, sha256ctx_data_ce1, "sha256ctx_data_ce1");
    sc_trace(mVcdFile, sha256ctx_data_we1, "sha256ctx_data_we1");
    sc_trace(mVcdFile, sha256ctx_data_q1, "sha256ctx_data_q1");
    sc_trace(mVcdFile, grp_sha256_final_fu_268_ap_start, "grp_sha256_final_fu_268_ap_start");
    sc_trace(mVcdFile, grp_sha256_final_fu_268_ap_done, "grp_sha256_final_fu_268_ap_done");
    sc_trace(mVcdFile, grp_sha256_final_fu_268_ap_idle, "grp_sha256_final_fu_268_ap_idle");
    sc_trace(mVcdFile, grp_sha256_final_fu_268_ap_ready, "grp_sha256_final_fu_268_ap_ready");
    sc_trace(mVcdFile, grp_sha256_final_fu_268_ctx_data_address0, "grp_sha256_final_fu_268_ctx_data_address0");
    sc_trace(mVcdFile, grp_sha256_final_fu_268_ctx_data_ce0, "grp_sha256_final_fu_268_ctx_data_ce0");
    sc_trace(mVcdFile, grp_sha256_final_fu_268_ctx_data_we0, "grp_sha256_final_fu_268_ctx_data_we0");
    sc_trace(mVcdFile, grp_sha256_final_fu_268_ctx_data_d0, "grp_sha256_final_fu_268_ctx_data_d0");
    sc_trace(mVcdFile, grp_sha256_final_fu_268_ctx_data_address1, "grp_sha256_final_fu_268_ctx_data_address1");
    sc_trace(mVcdFile, grp_sha256_final_fu_268_ctx_data_ce1, "grp_sha256_final_fu_268_ctx_data_ce1");
    sc_trace(mVcdFile, grp_sha256_final_fu_268_ctx_data_we1, "grp_sha256_final_fu_268_ctx_data_we1");
    sc_trace(mVcdFile, grp_sha256_final_fu_268_ctx_data_d1, "grp_sha256_final_fu_268_ctx_data_d1");
    sc_trace(mVcdFile, grp_sha256_final_fu_268_hash_address0, "grp_sha256_final_fu_268_hash_address0");
    sc_trace(mVcdFile, grp_sha256_final_fu_268_hash_ce0, "grp_sha256_final_fu_268_hash_ce0");
    sc_trace(mVcdFile, grp_sha256_final_fu_268_hash_we0, "grp_sha256_final_fu_268_hash_we0");
    sc_trace(mVcdFile, grp_sha256_final_fu_268_hash_d0, "grp_sha256_final_fu_268_hash_d0");
    sc_trace(mVcdFile, grp_sha256_final_fu_268_hash_address1, "grp_sha256_final_fu_268_hash_address1");
    sc_trace(mVcdFile, grp_sha256_final_fu_268_hash_ce1, "grp_sha256_final_fu_268_hash_ce1");
    sc_trace(mVcdFile, grp_sha256_final_fu_268_hash_we1, "grp_sha256_final_fu_268_hash_we1");
    sc_trace(mVcdFile, grp_sha256_final_fu_268_hash_d1, "grp_sha256_final_fu_268_hash_d1");
    sc_trace(mVcdFile, grp_sha256_update_fu_287_ap_start, "grp_sha256_update_fu_287_ap_start");
    sc_trace(mVcdFile, grp_sha256_update_fu_287_ap_done, "grp_sha256_update_fu_287_ap_done");
    sc_trace(mVcdFile, grp_sha256_update_fu_287_ap_idle, "grp_sha256_update_fu_287_ap_idle");
    sc_trace(mVcdFile, grp_sha256_update_fu_287_ap_ready, "grp_sha256_update_fu_287_ap_ready");
    sc_trace(mVcdFile, grp_sha256_update_fu_287_ctx_data_address0, "grp_sha256_update_fu_287_ctx_data_address0");
    sc_trace(mVcdFile, grp_sha256_update_fu_287_ctx_data_ce0, "grp_sha256_update_fu_287_ctx_data_ce0");
    sc_trace(mVcdFile, grp_sha256_update_fu_287_ctx_data_we0, "grp_sha256_update_fu_287_ctx_data_we0");
    sc_trace(mVcdFile, grp_sha256_update_fu_287_ctx_data_d0, "grp_sha256_update_fu_287_ctx_data_d0");
    sc_trace(mVcdFile, grp_sha256_update_fu_287_ctx_data_address1, "grp_sha256_update_fu_287_ctx_data_address1");
    sc_trace(mVcdFile, grp_sha256_update_fu_287_ctx_data_ce1, "grp_sha256_update_fu_287_ctx_data_ce1");
    sc_trace(mVcdFile, grp_sha256_update_fu_287_ctx_datalen_read, "grp_sha256_update_fu_287_ctx_datalen_read");
    sc_trace(mVcdFile, grp_sha256_update_fu_287_p_read1, "grp_sha256_update_fu_287_p_read1");
    sc_trace(mVcdFile, grp_sha256_update_fu_287_p_read2, "grp_sha256_update_fu_287_p_read2");
    sc_trace(mVcdFile, grp_sha256_update_fu_287_p_read3, "grp_sha256_update_fu_287_p_read3");
    sc_trace(mVcdFile, grp_sha256_update_fu_287_p_read4, "grp_sha256_update_fu_287_p_read4");
    sc_trace(mVcdFile, grp_sha256_update_fu_287_p_read5, "grp_sha256_update_fu_287_p_read5");
    sc_trace(mVcdFile, grp_sha256_update_fu_287_p_read6, "grp_sha256_update_fu_287_p_read6");
    sc_trace(mVcdFile, grp_sha256_update_fu_287_p_read7, "grp_sha256_update_fu_287_p_read7");
    sc_trace(mVcdFile, grp_sha256_update_fu_287_p_read8, "grp_sha256_update_fu_287_p_read8");
    sc_trace(mVcdFile, grp_sha256_update_fu_287_p_read9, "grp_sha256_update_fu_287_p_read9");
    sc_trace(mVcdFile, grp_sha256_update_fu_287_p_read10, "grp_sha256_update_fu_287_p_read10");
    sc_trace(mVcdFile, grp_sha256_update_fu_287_data_address0, "grp_sha256_update_fu_287_data_address0");
    sc_trace(mVcdFile, grp_sha256_update_fu_287_data_ce0, "grp_sha256_update_fu_287_data_ce0");
    sc_trace(mVcdFile, grp_sha256_update_fu_287_len, "grp_sha256_update_fu_287_len");
    sc_trace(mVcdFile, grp_sha256_update_fu_287_ap_return_0, "grp_sha256_update_fu_287_ap_return_0");
    sc_trace(mVcdFile, grp_sha256_update_fu_287_ap_return_1, "grp_sha256_update_fu_287_ap_return_1");
    sc_trace(mVcdFile, grp_sha256_update_fu_287_ap_return_2, "grp_sha256_update_fu_287_ap_return_2");
    sc_trace(mVcdFile, grp_sha256_update_fu_287_ap_return_3, "grp_sha256_update_fu_287_ap_return_3");
    sc_trace(mVcdFile, grp_sha256_update_fu_287_ap_return_4, "grp_sha256_update_fu_287_ap_return_4");
    sc_trace(mVcdFile, grp_sha256_update_fu_287_ap_return_5, "grp_sha256_update_fu_287_ap_return_5");
    sc_trace(mVcdFile, grp_sha256_update_fu_287_ap_return_6, "grp_sha256_update_fu_287_ap_return_6");
    sc_trace(mVcdFile, grp_sha256_update_fu_287_ap_return_7, "grp_sha256_update_fu_287_ap_return_7");
    sc_trace(mVcdFile, grp_sha256_update_fu_287_ap_return_8, "grp_sha256_update_fu_287_ap_return_8");
    sc_trace(mVcdFile, grp_sha256_update_fu_287_ap_return_9, "grp_sha256_update_fu_287_ap_return_9");
    sc_trace(mVcdFile, grp_sha256_update_fu_287_ap_return_10, "grp_sha256_update_fu_287_ap_return_10");
    sc_trace(mVcdFile, i9_reg_235, "i9_reg_235");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, i_1_reg_246, "i_1_reg_246");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, i_2_reg_257, "i_2_reg_257");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_reg_grp_sha256_final_fu_268_ap_start, "ap_reg_grp_sha256_final_fu_268_ap_start");
    sc_trace(mVcdFile, ap_reg_grp_sha256_update_fu_287_ap_start, "ap_reg_grp_sha256_update_fu_287_ap_start");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, sum_cast_fu_660_p1, "sum_cast_fu_660_p1");
    sc_trace(mVcdFile, sum2_cast_fu_720_p1, "sum2_cast_fu_720_p1");
    sc_trace(mVcdFile, n_fu_104, "n_fu_104");
    sc_trace(mVcdFile, n_1_fu_665_p2, "n_1_fu_665_p2");
    sc_trace(mVcdFile, sha256ctx_datalen_fu_108, "sha256ctx_datalen_fu_108");
    sc_trace(mVcdFile, ap_block_state5_on_subcall_done, "ap_block_state5_on_subcall_done");
    sc_trace(mVcdFile, sha256ctx_bitlen_0_2_fu_112, "sha256ctx_bitlen_0_2_fu_112");
    sc_trace(mVcdFile, sha256ctx_bitlen_1_2_fu_116, "sha256ctx_bitlen_1_2_fu_116");
    sc_trace(mVcdFile, sha256ctx_state_0_2_fu_120, "sha256ctx_state_0_2_fu_120");
    sc_trace(mVcdFile, sha256ctx_state_1_2_fu_124, "sha256ctx_state_1_2_fu_124");
    sc_trace(mVcdFile, sha256ctx_state_2_2_fu_128, "sha256ctx_state_2_2_fu_128");
    sc_trace(mVcdFile, sha256ctx_state_3_2_fu_132, "sha256ctx_state_3_2_fu_132");
    sc_trace(mVcdFile, sha256ctx_state_4_2_fu_136, "sha256ctx_state_4_2_fu_136");
    sc_trace(mVcdFile, sha256ctx_state_5_2_fu_140, "sha256ctx_state_5_2_fu_140");
    sc_trace(mVcdFile, sha256ctx_state_6_2_fu_144, "sha256ctx_state_6_2_fu_144");
    sc_trace(mVcdFile, sha256ctx_state_7_2_fu_148, "sha256ctx_state_7_2_fu_148");
    sc_trace(mVcdFile, seg_offset_fu_152, "seg_offset_fu_152");
    sc_trace(mVcdFile, seg_offset_1_fu_675_p2, "seg_offset_1_fu_675_p2");
    sc_trace(mVcdFile, tmp_97_fu_609_p4, "tmp_97_fu_609_p4");
    sc_trace(mVcdFile, i9_cast6_fu_625_p1, "i9_cast6_fu_625_p1");
    sc_trace(mVcdFile, tmp_99_fu_650_p1, "tmp_99_fu_650_p1");
    sc_trace(mVcdFile, tmp1_fu_645_p2, "tmp1_fu_645_p2");
    sc_trace(mVcdFile, sum_fu_654_p2, "sum_fu_654_p2");
    sc_trace(mVcdFile, i_1_cast4_fu_686_p1, "i_1_cast4_fu_686_p1");
    sc_trace(mVcdFile, tmp_98_fu_710_p1, "tmp_98_fu_710_p1");
    sc_trace(mVcdFile, tmp2_fu_705_p2, "tmp2_fu_705_p2");
    sc_trace(mVcdFile, sum2_fu_714_p2, "sum2_fu_714_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("sha256.hdltvin.dat");
    mHdltvoutHandle.open("sha256.hdltvout.dat");
}

sha256::~sha256() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete sha256_AXILiteS_s_axi_U;
    delete seg_buf_U;
    delete sha256ctx_data_U;
    delete grp_sha256_final_fu_268;
    delete grp_sha256_update_fu_287;
}

void sha256::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void sha256::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_grp_sha256_final_fu_268_ap_start = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             esl_seteq<1,1,1>(tmp_fu_603_p2.read(), ap_const_lv1_1))) {
            ap_reg_grp_sha256_final_fu_268_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_sha256_final_fu_268_ap_ready.read())) {
            ap_reg_grp_sha256_final_fu_268_ap_start = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_grp_sha256_update_fu_287_ap_start = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
              esl_seteq<1,1,1>(ap_const_lv1_1, exitcond5_fu_633_p2.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
              esl_seteq<1,1,1>(ap_const_lv1_1, exitcond4_fu_694_p2.read())))) {
            ap_reg_grp_sha256_update_fu_287_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_sha256_update_fu_287_ap_ready.read())) {
            ap_reg_grp_sha256_update_fu_287_ap_start = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_fu_603_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(icmp_fu_619_p2.read(), ap_const_lv1_0))) {
        i9_reg_235 = ap_const_lv7_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        i9_reg_235 = i_7_reg_867.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_fu_603_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_fu_619_p2.read()))) {
        i_1_reg_246 = ap_const_lv6_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        i_1_reg_246 = i_8_reg_885.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        i_2_reg_257 = i_reg_958.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
                esl_seteq<1,1,1>(grp_sha256_final_fu_268_ap_done.read(), ap_const_logic_1))) {
        i_2_reg_257 = ap_const_lv6_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond4_fu_694_p2.read()))) {
        n_fu_104 = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, exitcond5_fu_633_p2.read()))) {
        n_fu_104 = n_1_fu_665_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        n_fu_104 = bytes.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(icmp_reg_855.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0))) {
        seg_offset_fu_152 = seg_offset_1_fu_675_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        seg_offset_fu_152 = ap_const_lv32_0;
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(icmp_reg_855.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_855.read()) && 
          esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0)))) {
        sha256ctx_bitlen_0_2_fu_112 = grp_sha256_update_fu_287_ap_return_1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        sha256ctx_bitlen_0_2_fu_112 = ap_const_lv32_0;
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(icmp_reg_855.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_855.read()) && 
          esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0)))) {
        sha256ctx_bitlen_1_2_fu_116 = grp_sha256_update_fu_287_ap_return_2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        sha256ctx_bitlen_1_2_fu_116 = ap_const_lv32_0;
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(icmp_reg_855.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_855.read()) && 
          esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0)))) {
        sha256ctx_datalen_fu_108 = grp_sha256_update_fu_287_ap_return_0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        sha256ctx_datalen_fu_108 = ap_const_lv32_0;
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(icmp_reg_855.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_855.read()) && 
          esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0)))) {
        sha256ctx_state_0_2_fu_120 = grp_sha256_update_fu_287_ap_return_3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        sha256ctx_state_0_2_fu_120 = ap_const_lv32_6A09E667;
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(icmp_reg_855.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_855.read()) && 
          esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0)))) {
        sha256ctx_state_1_2_fu_124 = grp_sha256_update_fu_287_ap_return_4.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        sha256ctx_state_1_2_fu_124 = ap_const_lv32_BB67AE85;
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(icmp_reg_855.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_855.read()) && 
          esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0)))) {
        sha256ctx_state_2_2_fu_128 = grp_sha256_update_fu_287_ap_return_5.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        sha256ctx_state_2_2_fu_128 = ap_const_lv32_3C6EF372;
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(icmp_reg_855.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_855.read()) && 
          esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0)))) {
        sha256ctx_state_3_2_fu_132 = grp_sha256_update_fu_287_ap_return_6.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        sha256ctx_state_3_2_fu_132 = ap_const_lv32_A54FF53A;
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(icmp_reg_855.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_855.read()) && 
          esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0)))) {
        sha256ctx_state_4_2_fu_136 = grp_sha256_update_fu_287_ap_return_7.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        sha256ctx_state_4_2_fu_136 = ap_const_lv32_510E527F;
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(icmp_reg_855.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_855.read()) && 
          esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0)))) {
        sha256ctx_state_5_2_fu_140 = grp_sha256_update_fu_287_ap_return_8.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        sha256ctx_state_5_2_fu_140 = ap_const_lv32_9B05688C;
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(icmp_reg_855.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_855.read()) && 
          esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0)))) {
        sha256ctx_state_6_2_fu_144 = grp_sha256_update_fu_287_ap_return_9.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        sha256ctx_state_6_2_fu_144 = ap_const_lv32_1F83D9AB;
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(icmp_reg_855.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_855.read()) && 
          esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0)))) {
        sha256ctx_state_7_2_fu_148 = grp_sha256_update_fu_287_ap_return_10.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        sha256ctx_state_7_2_fu_148 = ap_const_lv32_5BE0CD19;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i9_cast5_reg_859 = i9_cast5_fu_629_p1.read();
        i_7_reg_867 = i_7_fu_639_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        i_1_cast_reg_877 = i_1_cast_fu_690_p1.read();
        i_8_reg_885 = i_8_fu_699_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        i_2_cast3_reg_950 = i_2_cast3_fu_730_p1.read();
        i_reg_958 = i_fu_741_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_fu_603_p2.read(), ap_const_lv1_0))) {
        icmp_reg_855 = icmp_fu_619_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        n_load_reg_845 = n_fu_104.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
  esl_seteq<1,1,1>(tmp_fu_603_p2.read(), ap_const_lv1_1)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, exitcond5_fu_633_p2.read())))) {
        reg_465 = sha256ctx_datalen_fu_108.read();
        reg_471 = sha256ctx_bitlen_0_2_fu_112.read();
        reg_477 = sha256ctx_bitlen_1_2_fu_116.read();
        reg_483 = sha256ctx_state_0_2_fu_120.read();
        reg_489 = sha256ctx_state_1_2_fu_124.read();
        reg_495 = sha256ctx_state_2_2_fu_128.read();
        reg_501 = sha256ctx_state_3_2_fu_132.read();
        reg_507 = sha256ctx_state_4_2_fu_136.read();
        reg_513 = sha256ctx_state_5_2_fu_140.read();
        reg_519 = sha256ctx_state_6_2_fu_144.read();
        reg_525 = sha256ctx_state_7_2_fu_148.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond4_fu_694_p2.read()))) {
        sha256ctx_bitlen_0_1_reg_900 = sha256ctx_bitlen_0_2_fu_112.read();
        sha256ctx_bitlen_1_1_reg_905 = sha256ctx_bitlen_1_2_fu_116.read();
        sha256ctx_datalen_lo_1_reg_895 = sha256ctx_datalen_fu_108.read();
        sha256ctx_state_0_2_2_reg_910 = sha256ctx_state_0_2_fu_120.read();
        sha256ctx_state_1_2_2_reg_915 = sha256ctx_state_1_2_fu_124.read();
        sha256ctx_state_2_2_2_reg_920 = sha256ctx_state_2_2_fu_128.read();
        sha256ctx_state_3_2_2_reg_925 = sha256ctx_state_3_2_fu_132.read();
        sha256ctx_state_4_2_2_reg_930 = sha256ctx_state_4_2_fu_136.read();
        sha256ctx_state_5_2_2_reg_935 = sha256ctx_state_5_2_fu_140.read();
        sha256ctx_state_6_2_2_reg_940 = sha256ctx_state_6_2_fu_144.read();
        sha256ctx_state_7_2_2_reg_945 = sha256ctx_state_7_2_fu_148.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        tmp_96_reg_839 = tmp_96_fu_531_p1.read();
    }
}

void sha256::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void sha256::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void sha256::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void sha256::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void sha256::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void sha256::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void sha256::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void sha256::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void sha256::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void sha256::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void sha256::thread_ap_block_state5_on_subcall_done() {
    ap_block_state5_on_subcall_done = ((esl_seteq<1,1,1>(icmp_reg_855.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, grp_sha256_update_fu_287_ap_done.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_855.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, grp_sha256_update_fu_287_ap_done.read())));
}

void sha256::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_735_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void sha256::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void sha256::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_735_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void sha256::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void sha256::thread_data_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        data_address0 =  (sc_lv<8>) (sum2_cast_fu_720_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        data_address0 =  (sc_lv<8>) (sum_cast_fu_660_p1.read());
    } else {
        data_address0 = "XXXXXXXX";
    }
}

void sha256::thread_data_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        data_ce0 = ap_const_logic_1;
    } else {
        data_ce0 = ap_const_logic_0;
    }
}

void sha256::thread_digest_address0() {
    digest_address0 =  (sc_lv<5>) (i_2_cast3_reg_950.read());
}

void sha256::thread_digest_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        digest_ce0 = ap_const_logic_1;
    } else {
        digest_ce0 = ap_const_logic_0;
    }
}

void sha256::thread_digest_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        digest_we0 = ap_const_logic_1;
    } else {
        digest_we0 = ap_const_logic_0;
    }
}

void sha256::thread_exitcond4_fu_694_p2() {
    exitcond4_fu_694_p2 = (!i_1_cast_fu_690_p1.read().is_01() || !n_load_reg_845.read().is_01())? sc_lv<1>(): sc_lv<1>(i_1_cast_fu_690_p1.read() == n_load_reg_845.read());
}

void sha256::thread_exitcond5_fu_633_p2() {
    exitcond5_fu_633_p2 = (!i9_reg_235.read().is_01() || !ap_const_lv7_40.is_01())? sc_lv<1>(): sc_lv<1>(i9_reg_235.read() == ap_const_lv7_40);
}

void sha256::thread_exitcond_fu_735_p2() {
    exitcond_fu_735_p2 = (!i_2_reg_257.read().is_01() || !ap_const_lv6_20.is_01())? sc_lv<1>(): sc_lv<1>(i_2_reg_257.read() == ap_const_lv6_20);
}

void sha256::thread_grp_sha256_final_fu_268_ap_start() {
    grp_sha256_final_fu_268_ap_start = ap_reg_grp_sha256_final_fu_268_ap_start.read();
}

void sha256::thread_grp_sha256_update_fu_287_ap_start() {
    grp_sha256_update_fu_287_ap_start = ap_reg_grp_sha256_update_fu_287_ap_start.read();
}

void sha256::thread_grp_sha256_update_fu_287_ctx_datalen_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_855.read())) {
            grp_sha256_update_fu_287_ctx_datalen_read = sha256ctx_datalen_lo_1_reg_895.read();
        } else if (esl_seteq<1,1,1>(icmp_reg_855.read(), ap_const_lv1_0)) {
            grp_sha256_update_fu_287_ctx_datalen_read = reg_465.read();
        } else {
            grp_sha256_update_fu_287_ctx_datalen_read =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        grp_sha256_update_fu_287_ctx_datalen_read =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void sha256::thread_grp_sha256_update_fu_287_len() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_855.read())) {
            grp_sha256_update_fu_287_len = n_load_reg_845.read();
        } else if (esl_seteq<1,1,1>(icmp_reg_855.read(), ap_const_lv1_0)) {
            grp_sha256_update_fu_287_len = ap_const_lv32_40;
        } else {
            grp_sha256_update_fu_287_len =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        grp_sha256_update_fu_287_len =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void sha256::thread_grp_sha256_update_fu_287_p_read1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_855.read())) {
            grp_sha256_update_fu_287_p_read1 = sha256ctx_bitlen_0_1_reg_900.read();
        } else if (esl_seteq<1,1,1>(icmp_reg_855.read(), ap_const_lv1_0)) {
            grp_sha256_update_fu_287_p_read1 = reg_471.read();
        } else {
            grp_sha256_update_fu_287_p_read1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        grp_sha256_update_fu_287_p_read1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void sha256::thread_grp_sha256_update_fu_287_p_read10() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_855.read())) {
            grp_sha256_update_fu_287_p_read10 = sha256ctx_state_7_2_2_reg_945.read();
        } else if (esl_seteq<1,1,1>(icmp_reg_855.read(), ap_const_lv1_0)) {
            grp_sha256_update_fu_287_p_read10 = reg_525.read();
        } else {
            grp_sha256_update_fu_287_p_read10 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        grp_sha256_update_fu_287_p_read10 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void sha256::thread_grp_sha256_update_fu_287_p_read2() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_855.read())) {
            grp_sha256_update_fu_287_p_read2 = sha256ctx_bitlen_1_1_reg_905.read();
        } else if (esl_seteq<1,1,1>(icmp_reg_855.read(), ap_const_lv1_0)) {
            grp_sha256_update_fu_287_p_read2 = reg_477.read();
        } else {
            grp_sha256_update_fu_287_p_read2 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        grp_sha256_update_fu_287_p_read2 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void sha256::thread_grp_sha256_update_fu_287_p_read3() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_855.read())) {
            grp_sha256_update_fu_287_p_read3 = sha256ctx_state_0_2_2_reg_910.read();
        } else if (esl_seteq<1,1,1>(icmp_reg_855.read(), ap_const_lv1_0)) {
            grp_sha256_update_fu_287_p_read3 = reg_483.read();
        } else {
            grp_sha256_update_fu_287_p_read3 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        grp_sha256_update_fu_287_p_read3 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void sha256::thread_grp_sha256_update_fu_287_p_read4() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_855.read())) {
            grp_sha256_update_fu_287_p_read4 = sha256ctx_state_1_2_2_reg_915.read();
        } else if (esl_seteq<1,1,1>(icmp_reg_855.read(), ap_const_lv1_0)) {
            grp_sha256_update_fu_287_p_read4 = reg_489.read();
        } else {
            grp_sha256_update_fu_287_p_read4 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        grp_sha256_update_fu_287_p_read4 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void sha256::thread_grp_sha256_update_fu_287_p_read5() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_855.read())) {
            grp_sha256_update_fu_287_p_read5 = sha256ctx_state_2_2_2_reg_920.read();
        } else if (esl_seteq<1,1,1>(icmp_reg_855.read(), ap_const_lv1_0)) {
            grp_sha256_update_fu_287_p_read5 = reg_495.read();
        } else {
            grp_sha256_update_fu_287_p_read5 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        grp_sha256_update_fu_287_p_read5 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void sha256::thread_grp_sha256_update_fu_287_p_read6() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_855.read())) {
            grp_sha256_update_fu_287_p_read6 = sha256ctx_state_3_2_2_reg_925.read();
        } else if (esl_seteq<1,1,1>(icmp_reg_855.read(), ap_const_lv1_0)) {
            grp_sha256_update_fu_287_p_read6 = reg_501.read();
        } else {
            grp_sha256_update_fu_287_p_read6 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        grp_sha256_update_fu_287_p_read6 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void sha256::thread_grp_sha256_update_fu_287_p_read7() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_855.read())) {
            grp_sha256_update_fu_287_p_read7 = sha256ctx_state_4_2_2_reg_930.read();
        } else if (esl_seteq<1,1,1>(icmp_reg_855.read(), ap_const_lv1_0)) {
            grp_sha256_update_fu_287_p_read7 = reg_507.read();
        } else {
            grp_sha256_update_fu_287_p_read7 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        grp_sha256_update_fu_287_p_read7 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void sha256::thread_grp_sha256_update_fu_287_p_read8() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_855.read())) {
            grp_sha256_update_fu_287_p_read8 = sha256ctx_state_5_2_2_reg_935.read();
        } else if (esl_seteq<1,1,1>(icmp_reg_855.read(), ap_const_lv1_0)) {
            grp_sha256_update_fu_287_p_read8 = reg_513.read();
        } else {
            grp_sha256_update_fu_287_p_read8 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        grp_sha256_update_fu_287_p_read8 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void sha256::thread_grp_sha256_update_fu_287_p_read9() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_855.read())) {
            grp_sha256_update_fu_287_p_read9 = sha256ctx_state_6_2_2_reg_940.read();
        } else if (esl_seteq<1,1,1>(icmp_reg_855.read(), ap_const_lv1_0)) {
            grp_sha256_update_fu_287_p_read9 = reg_519.read();
        } else {
            grp_sha256_update_fu_287_p_read9 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        grp_sha256_update_fu_287_p_read9 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void sha256::thread_i9_cast5_fu_629_p1() {
    i9_cast5_fu_629_p1 = esl_zext<32,7>(i9_reg_235.read());
}

void sha256::thread_i9_cast6_fu_625_p1() {
    i9_cast6_fu_625_p1 = esl_zext<10,7>(i9_reg_235.read());
}

void sha256::thread_i_1_cast4_fu_686_p1() {
    i_1_cast4_fu_686_p1 = esl_zext<10,6>(i_1_reg_246.read());
}

void sha256::thread_i_1_cast_fu_690_p1() {
    i_1_cast_fu_690_p1 = esl_zext<32,6>(i_1_reg_246.read());
}

void sha256::thread_i_2_cast3_fu_730_p1() {
    i_2_cast3_fu_730_p1 = esl_zext<32,6>(i_2_reg_257.read());
}

void sha256::thread_i_7_fu_639_p2() {
    i_7_fu_639_p2 = (!i9_reg_235.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(i9_reg_235.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void sha256::thread_i_8_fu_699_p2() {
    i_8_fu_699_p2 = (!i_1_reg_246.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(i_1_reg_246.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void sha256::thread_i_fu_741_p2() {
    i_fu_741_p2 = (!i_2_reg_257.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(i_2_reg_257.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void sha256::thread_icmp_fu_619_p2() {
    icmp_fu_619_p2 = (!tmp_97_fu_609_p4.read().is_01() || !ap_const_lv26_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_97_fu_609_p4.read() == ap_const_lv26_0);
}

void sha256::thread_n_1_fu_665_p2() {
    n_1_fu_665_p2 = (!n_load_reg_845.read().is_01() || !ap_const_lv32_FFFFFFC0.is_01())? sc_lv<32>(): (sc_biguint<32>(n_load_reg_845.read()) + sc_bigint<32>(ap_const_lv32_FFFFFFC0));
}

void sha256::thread_seg_buf_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        seg_buf_address0 =  (sc_lv<6>) (i_2_cast3_fu_730_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        seg_buf_address0 =  (sc_lv<6>) (i_1_cast_reg_877.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        seg_buf_address0 =  (sc_lv<6>) (i9_cast5_reg_859.read());
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                 esl_seteq<1,1,1>(icmp_reg_855.read(), ap_const_lv1_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_855.read())))) {
        seg_buf_address0 = grp_sha256_update_fu_287_data_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        seg_buf_address0 = grp_sha256_final_fu_268_hash_address0.read();
    } else {
        seg_buf_address0 =  (sc_lv<6>) ("XXXXXX");
    }
}

void sha256::thread_seg_buf_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        seg_buf_ce0 = ap_const_logic_1;
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                 esl_seteq<1,1,1>(icmp_reg_855.read(), ap_const_lv1_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_855.read())))) {
        seg_buf_ce0 = grp_sha256_update_fu_287_data_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        seg_buf_ce0 = grp_sha256_final_fu_268_hash_ce0.read();
    } else {
        seg_buf_ce0 = ap_const_logic_0;
    }
}

void sha256::thread_seg_buf_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        seg_buf_ce1 = grp_sha256_final_fu_268_hash_ce1.read();
    } else {
        seg_buf_ce1 = ap_const_logic_0;
    }
}

void sha256::thread_seg_buf_d0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        seg_buf_d0 = data_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        seg_buf_d0 = grp_sha256_final_fu_268_hash_d0.read();
    } else {
        seg_buf_d0 = "XXXXXXXX";
    }
}

void sha256::thread_seg_buf_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        seg_buf_we0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        seg_buf_we0 = grp_sha256_final_fu_268_hash_we0.read();
    } else {
        seg_buf_we0 = ap_const_logic_0;
    }
}

void sha256::thread_seg_buf_we1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        seg_buf_we1 = grp_sha256_final_fu_268_hash_we1.read();
    } else {
        seg_buf_we1 = ap_const_logic_0;
    }
}

void sha256::thread_seg_offset_1_fu_675_p2() {
    seg_offset_1_fu_675_p2 = (!seg_offset_fu_152.read().is_01() || !ap_const_lv32_40.is_01())? sc_lv<32>(): (sc_biguint<32>(seg_offset_fu_152.read()) + sc_biguint<32>(ap_const_lv32_40));
}

void sha256::thread_sha256ctx_data_address0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(icmp_reg_855.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_855.read())))) {
        sha256ctx_data_address0 = grp_sha256_update_fu_287_ctx_data_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        sha256ctx_data_address0 = grp_sha256_final_fu_268_ctx_data_address0.read();
    } else {
        sha256ctx_data_address0 =  (sc_lv<6>) ("XXXXXX");
    }
}

void sha256::thread_sha256ctx_data_address1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(icmp_reg_855.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_855.read())))) {
        sha256ctx_data_address1 = grp_sha256_update_fu_287_ctx_data_address1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        sha256ctx_data_address1 = grp_sha256_final_fu_268_ctx_data_address1.read();
    } else {
        sha256ctx_data_address1 =  (sc_lv<6>) ("XXXXXX");
    }
}

void sha256::thread_sha256ctx_data_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(icmp_reg_855.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_855.read())))) {
        sha256ctx_data_ce0 = grp_sha256_update_fu_287_ctx_data_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        sha256ctx_data_ce0 = grp_sha256_final_fu_268_ctx_data_ce0.read();
    } else {
        sha256ctx_data_ce0 = ap_const_logic_0;
    }
}

void sha256::thread_sha256ctx_data_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(icmp_reg_855.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_855.read())))) {
        sha256ctx_data_ce1 = grp_sha256_update_fu_287_ctx_data_ce1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        sha256ctx_data_ce1 = grp_sha256_final_fu_268_ctx_data_ce1.read();
    } else {
        sha256ctx_data_ce1 = ap_const_logic_0;
    }
}

void sha256::thread_sha256ctx_data_d0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(icmp_reg_855.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_855.read())))) {
        sha256ctx_data_d0 = grp_sha256_update_fu_287_ctx_data_d0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        sha256ctx_data_d0 = grp_sha256_final_fu_268_ctx_data_d0.read();
    } else {
        sha256ctx_data_d0 = "XXXXXXXX";
    }
}

void sha256::thread_sha256ctx_data_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(icmp_reg_855.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_855.read())))) {
        sha256ctx_data_we0 = grp_sha256_update_fu_287_ctx_data_we0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        sha256ctx_data_we0 = grp_sha256_final_fu_268_ctx_data_we0.read();
    } else {
        sha256ctx_data_we0 = ap_const_logic_0;
    }
}

void sha256::thread_sha256ctx_data_we1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        sha256ctx_data_we1 = grp_sha256_final_fu_268_ctx_data_we1.read();
    } else {
        sha256ctx_data_we1 = ap_const_logic_0;
    }
}

void sha256::thread_sum2_cast_fu_720_p1() {
    sum2_cast_fu_720_p1 = esl_zext<32,10>(sum2_fu_714_p2.read());
}

void sha256::thread_sum2_fu_714_p2() {
    sum2_fu_714_p2 = (!tmp_98_fu_710_p1.read().is_01() || !tmp2_fu_705_p2.read().is_01())? sc_lv<10>(): (sc_biguint<10>(tmp_98_fu_710_p1.read()) + sc_biguint<10>(tmp2_fu_705_p2.read()));
}

void sha256::thread_sum_cast_fu_660_p1() {
    sum_cast_fu_660_p1 = esl_zext<32,10>(sum_fu_654_p2.read());
}

void sha256::thread_sum_fu_654_p2() {
    sum_fu_654_p2 = (!tmp_99_fu_650_p1.read().is_01() || !tmp1_fu_645_p2.read().is_01())? sc_lv<10>(): (sc_biguint<10>(tmp_99_fu_650_p1.read()) + sc_biguint<10>(tmp1_fu_645_p2.read()));
}

void sha256::thread_tmp1_fu_645_p2() {
    tmp1_fu_645_p2 = (!tmp_96_reg_839.read().is_01() || !i9_cast6_fu_625_p1.read().is_01())? sc_lv<10>(): (sc_biguint<10>(tmp_96_reg_839.read()) + sc_biguint<10>(i9_cast6_fu_625_p1.read()));
}

void sha256::thread_tmp2_fu_705_p2() {
    tmp2_fu_705_p2 = (!tmp_96_reg_839.read().is_01() || !i_1_cast4_fu_686_p1.read().is_01())? sc_lv<10>(): (sc_biguint<10>(tmp_96_reg_839.read()) + sc_biguint<10>(i_1_cast4_fu_686_p1.read()));
}

void sha256::thread_tmp_96_fu_531_p1() {
    tmp_96_fu_531_p1 = base_offset.read().range(10-1, 0);
}

void sha256::thread_tmp_97_fu_609_p4() {
    tmp_97_fu_609_p4 = n_fu_104.read().range(31, 6);
}

void sha256::thread_tmp_98_fu_710_p1() {
    tmp_98_fu_710_p1 = seg_offset_fu_152.read().range(10-1, 0);
}

void sha256::thread_tmp_99_fu_650_p1() {
    tmp_99_fu_650_p1 = seg_offset_fu_152.read().range(10-1, 0);
}

void sha256::thread_tmp_fu_603_p2() {
    tmp_fu_603_p2 = (!n_fu_104.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(n_fu_104.read() == ap_const_lv32_0);
}

void sha256::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_fu_603_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_fu_619_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_fu_603_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(icmp_fu_619_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond5_fu_633_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_fu_694_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(grp_sha256_final_fu_268_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_735_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<10>) ("XXXXXXXXXX");
            break;
    }
}

void sha256::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

