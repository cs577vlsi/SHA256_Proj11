// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "sha256_update.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic sha256_update::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic sha256_update::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> sha256_update::ap_ST_fsm_state1 = "1";
const sc_lv<5> sha256_update::ap_ST_fsm_state2 = "10";
const sc_lv<5> sha256_update::ap_ST_fsm_state3 = "100";
const sc_lv<5> sha256_update::ap_ST_fsm_state4 = "1000";
const sc_lv<5> sha256_update::ap_ST_fsm_state5 = "10000";
const sc_lv<32> sha256_update::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> sha256_update::ap_const_lv32_1 = "1";
const sc_lv<1> sha256_update::ap_const_lv1_0 = "0";
const sc_lv<32> sha256_update::ap_const_lv32_2 = "10";
const sc_lv<32> sha256_update::ap_const_lv32_3 = "11";
const sc_lv<32> sha256_update::ap_const_lv32_4 = "100";
const sc_lv<1> sha256_update::ap_const_lv1_1 = "1";
const bool sha256_update::ap_const_boolean_0 = false;
const sc_lv<7> sha256_update::ap_const_lv7_0 = "0000000";
const sc_lv<7> sha256_update::ap_const_lv7_1 = "1";
const sc_lv<8> sha256_update::ap_const_lv8_3F = "111111";
const sc_lv<32> sha256_update::ap_const_lv32_FFFFFDFF = "11111111111111111111110111111111";
const sc_lv<32> sha256_update::ap_const_lv32_200 = "1000000000";
const bool sha256_update::ap_const_boolean_1 = true;

sha256_update::sha256_update(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_sha256_transform_fu_227 = new sha256_transform("grp_sha256_transform_fu_227");
    grp_sha256_transform_fu_227->ap_clk(ap_clk);
    grp_sha256_transform_fu_227->ap_rst(ap_rst);
    grp_sha256_transform_fu_227->ap_start(grp_sha256_transform_fu_227_ap_start);
    grp_sha256_transform_fu_227->ap_done(grp_sha256_transform_fu_227_ap_done);
    grp_sha256_transform_fu_227->ap_idle(grp_sha256_transform_fu_227_ap_idle);
    grp_sha256_transform_fu_227->ap_ready(grp_sha256_transform_fu_227_ap_ready);
    grp_sha256_transform_fu_227->ctx_state_0_read(ctx_state_load_1_reg_690);
    grp_sha256_transform_fu_227->ctx_state_1_read(ctx_state_1_load_1_reg_685);
    grp_sha256_transform_fu_227->ctx_state_2_read(ctx_state_2_load_1_reg_680);
    grp_sha256_transform_fu_227->ctx_state_3_read(ctx_state_3_load_1_reg_675);
    grp_sha256_transform_fu_227->ctx_state_4_read(ctx_state_4_load_1_reg_670);
    grp_sha256_transform_fu_227->ctx_state_5_read(ctx_state_5_load_1_reg_665);
    grp_sha256_transform_fu_227->ctx_state_6_read(ctx_state_6_load_1_reg_660);
    grp_sha256_transform_fu_227->ctx_state_7_read(ctx_state_7_load_1_reg_655);
    grp_sha256_transform_fu_227->data_address0(grp_sha256_transform_fu_227_data_address0);
    grp_sha256_transform_fu_227->data_ce0(grp_sha256_transform_fu_227_data_ce0);
    grp_sha256_transform_fu_227->data_q0(ctx_data_q0);
    grp_sha256_transform_fu_227->data_address1(grp_sha256_transform_fu_227_data_address1);
    grp_sha256_transform_fu_227->data_ce1(grp_sha256_transform_fu_227_data_ce1);
    grp_sha256_transform_fu_227->data_q1(ctx_data_q1);
    grp_sha256_transform_fu_227->ap_return_0(grp_sha256_transform_fu_227_ap_return_0);
    grp_sha256_transform_fu_227->ap_return_1(grp_sha256_transform_fu_227_ap_return_1);
    grp_sha256_transform_fu_227->ap_return_2(grp_sha256_transform_fu_227_ap_return_2);
    grp_sha256_transform_fu_227->ap_return_3(grp_sha256_transform_fu_227_ap_return_3);
    grp_sha256_transform_fu_227->ap_return_4(grp_sha256_transform_fu_227_ap_return_4);
    grp_sha256_transform_fu_227->ap_return_5(grp_sha256_transform_fu_227_ap_return_5);
    grp_sha256_transform_fu_227->ap_return_6(grp_sha256_transform_fu_227_ap_return_6);
    grp_sha256_transform_fu_227->ap_return_7(grp_sha256_transform_fu_227_ap_return_7);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state5_on_subcall_done);
    sensitive << ( tmp_1_reg_651 );
    sensitive << ( grp_sha256_transform_fu_227_ap_done );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_344_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_344_p2 );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_344_p2 );
    sensitive << ( ctx_datalen_reg_195 );
    sensitive << ( ap_return_0_preg );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_344_p2 );
    sensitive << ( ctx_bitlen_fu_94 );
    sensitive << ( ap_return_1_preg );

    SC_METHOD(thread_ap_return_10);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_344_p2 );
    sensitive << ( ctx_state_7_fu_58 );
    sensitive << ( ap_return_10_preg );

    SC_METHOD(thread_ap_return_2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_344_p2 );
    sensitive << ( ctx_bitlen_1_fu_90 );
    sensitive << ( ap_return_2_preg );

    SC_METHOD(thread_ap_return_3);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_344_p2 );
    sensitive << ( ctx_state_fu_86 );
    sensitive << ( ap_return_3_preg );

    SC_METHOD(thread_ap_return_4);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_344_p2 );
    sensitive << ( ctx_state_1_fu_82 );
    sensitive << ( ap_return_4_preg );

    SC_METHOD(thread_ap_return_5);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_344_p2 );
    sensitive << ( ctx_state_2_fu_78 );
    sensitive << ( ap_return_5_preg );

    SC_METHOD(thread_ap_return_6);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_344_p2 );
    sensitive << ( ctx_state_3_fu_74 );
    sensitive << ( ap_return_6_preg );

    SC_METHOD(thread_ap_return_7);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_344_p2 );
    sensitive << ( ctx_state_4_fu_70 );
    sensitive << ( ap_return_7_preg );

    SC_METHOD(thread_ap_return_8);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_344_p2 );
    sensitive << ( ctx_state_5_fu_66 );
    sensitive << ( ap_return_8_preg );

    SC_METHOD(thread_ap_return_9);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_344_p2 );
    sensitive << ( ctx_state_6_fu_62 );
    sensitive << ( ap_return_9_preg );

    SC_METHOD(thread_ctx_data_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_1_reg_651 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_sha256_transform_fu_227_data_address0 );
    sensitive << ( ctx_datalen_reg_195 );

    SC_METHOD(thread_ctx_data_address1);
    sensitive << ( tmp_1_reg_651 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_sha256_transform_fu_227_data_address1 );

    SC_METHOD(thread_ctx_data_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_1_reg_651 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_sha256_transform_fu_227_data_ce0 );

    SC_METHOD(thread_ctx_data_ce1);
    sensitive << ( tmp_1_reg_651 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_sha256_transform_fu_227_data_ce1 );

    SC_METHOD(thread_ctx_data_d0);
    sensitive << ( data_q0 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ctx_data_we0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ctx_datalen_1_cast_fu_549_p1);
    sensitive << ( ctx_datalen_1_phi_fu_220_p4 );

    SC_METHOD(thread_ctx_datalen_1_phi_fu_220_p4);
    sensitive << ( tmp_1_reg_651 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ctx_datalen_1_reg_217 );

    SC_METHOD(thread_ctx_datalen_assign_c_fu_429_p2);
    sensitive << ( tmp_6_fu_425_p1 );

    SC_METHOD(thread_data_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_cast2_fu_335_p1 );

    SC_METHOD(thread_data_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_exitcond_fu_344_p2);
    sensitive << ( tmp_reg_628 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_cast_fu_340_p1 );

    SC_METHOD(thread_grp_sha256_transform_fu_227_ap_start);
    sensitive << ( ap_reg_grp_sha256_transform_fu_227_ap_start );

    SC_METHOD(thread_i_1_fu_349_p2);
    sensitive << ( i_reg_206 );

    SC_METHOD(thread_i_cast2_fu_335_p1);
    sensitive << ( i_reg_206 );

    SC_METHOD(thread_i_cast_fu_340_p1);
    sensitive << ( i_reg_206 );

    SC_METHOD(thread_tmp_1_fu_435_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_5_fu_421_p1 );

    SC_METHOD(thread_tmp_2_fu_473_p2);
    sensitive << ( tmp_1_reg_651 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_state5_on_subcall_done );
    sensitive << ( ctx_bitlen_fu_94 );

    SC_METHOD(thread_tmp_3_ctx_bitlen_1_fu_485_p3);
    sensitive << ( ctx_bitlen_1_fu_90 );
    sensitive << ( tmp_2_fu_473_p2 );
    sensitive << ( tmp_3_fu_479_p2 );

    SC_METHOD(thread_tmp_3_fu_479_p2);
    sensitive << ( ctx_bitlen_1_fu_90 );

    SC_METHOD(thread_tmp_4_fu_493_p2);
    sensitive << ( ctx_bitlen_fu_94 );

    SC_METHOD(thread_tmp_5_fu_421_p1);
    sensitive << ( ctx_datalen_reg_195 );

    SC_METHOD(thread_tmp_6_fu_425_p1);
    sensitive << ( ctx_datalen_reg_195 );

    SC_METHOD(thread_tmp_fu_281_p1);
    sensitive << ( len );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_344_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_1_fu_435_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_state5_on_subcall_done );

    ap_CS_fsm = "00001";
    ap_reg_grp_sha256_transform_fu_227_ap_start = SC_LOGIC_0;
    ap_return_0_preg = "00000000000000000000000000000000";
    ap_return_1_preg = "00000000000000000000000000000000";
    ap_return_2_preg = "00000000000000000000000000000000";
    ap_return_3_preg = "00000000000000000000000000000000";
    ap_return_4_preg = "00000000000000000000000000000000";
    ap_return_5_preg = "00000000000000000000000000000000";
    ap_return_6_preg = "00000000000000000000000000000000";
    ap_return_7_preg = "00000000000000000000000000000000";
    ap_return_8_preg = "00000000000000000000000000000000";
    ap_return_9_preg = "00000000000000000000000000000000";
    ap_return_10_preg = "00000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "sha256_update_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ctx_data_address0, "(port)ctx_data_address0");
    sc_trace(mVcdFile, ctx_data_ce0, "(port)ctx_data_ce0");
    sc_trace(mVcdFile, ctx_data_we0, "(port)ctx_data_we0");
    sc_trace(mVcdFile, ctx_data_d0, "(port)ctx_data_d0");
    sc_trace(mVcdFile, ctx_data_q0, "(port)ctx_data_q0");
    sc_trace(mVcdFile, ctx_data_address1, "(port)ctx_data_address1");
    sc_trace(mVcdFile, ctx_data_ce1, "(port)ctx_data_ce1");
    sc_trace(mVcdFile, ctx_data_q1, "(port)ctx_data_q1");
    sc_trace(mVcdFile, ctx_datalen_read, "(port)ctx_datalen_read");
    sc_trace(mVcdFile, p_read1, "(port)p_read1");
    sc_trace(mVcdFile, p_read2, "(port)p_read2");
    sc_trace(mVcdFile, p_read3, "(port)p_read3");
    sc_trace(mVcdFile, p_read4, "(port)p_read4");
    sc_trace(mVcdFile, p_read5, "(port)p_read5");
    sc_trace(mVcdFile, p_read6, "(port)p_read6");
    sc_trace(mVcdFile, p_read7, "(port)p_read7");
    sc_trace(mVcdFile, p_read8, "(port)p_read8");
    sc_trace(mVcdFile, p_read9, "(port)p_read9");
    sc_trace(mVcdFile, p_read10, "(port)p_read10");
    sc_trace(mVcdFile, data_address0, "(port)data_address0");
    sc_trace(mVcdFile, data_ce0, "(port)data_ce0");
    sc_trace(mVcdFile, data_q0, "(port)data_q0");
    sc_trace(mVcdFile, len, "(port)len");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
    sc_trace(mVcdFile, ap_return_2, "(port)ap_return_2");
    sc_trace(mVcdFile, ap_return_3, "(port)ap_return_3");
    sc_trace(mVcdFile, ap_return_4, "(port)ap_return_4");
    sc_trace(mVcdFile, ap_return_5, "(port)ap_return_5");
    sc_trace(mVcdFile, ap_return_6, "(port)ap_return_6");
    sc_trace(mVcdFile, ap_return_7, "(port)ap_return_7");
    sc_trace(mVcdFile, ap_return_8, "(port)ap_return_8");
    sc_trace(mVcdFile, ap_return_9, "(port)ap_return_9");
    sc_trace(mVcdFile, ap_return_10, "(port)ap_return_10");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, tmp_fu_281_p1, "tmp_fu_281_p1");
    sc_trace(mVcdFile, tmp_reg_628, "tmp_reg_628");
    sc_trace(mVcdFile, i_1_fu_349_p2, "i_1_fu_349_p2");
    sc_trace(mVcdFile, i_1_reg_636, "i_1_reg_636");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, exitcond_fu_344_p2, "exitcond_fu_344_p2");
    sc_trace(mVcdFile, ctx_datalen_assign_c_fu_429_p2, "ctx_datalen_assign_c_fu_429_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_1_fu_435_p2, "tmp_1_fu_435_p2");
    sc_trace(mVcdFile, tmp_1_reg_651, "tmp_1_reg_651");
    sc_trace(mVcdFile, ctx_state_7_load_1_reg_655, "ctx_state_7_load_1_reg_655");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ctx_state_6_load_1_reg_660, "ctx_state_6_load_1_reg_660");
    sc_trace(mVcdFile, ctx_state_5_load_1_reg_665, "ctx_state_5_load_1_reg_665");
    sc_trace(mVcdFile, ctx_state_4_load_1_reg_670, "ctx_state_4_load_1_reg_670");
    sc_trace(mVcdFile, ctx_state_3_load_1_reg_675, "ctx_state_3_load_1_reg_675");
    sc_trace(mVcdFile, ctx_state_2_load_1_reg_680, "ctx_state_2_load_1_reg_680");
    sc_trace(mVcdFile, ctx_state_1_load_1_reg_685, "ctx_state_1_load_1_reg_685");
    sc_trace(mVcdFile, ctx_state_load_1_reg_690, "ctx_state_load_1_reg_690");
    sc_trace(mVcdFile, ctx_datalen_1_cast_fu_549_p1, "ctx_datalen_1_cast_fu_549_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, grp_sha256_transform_fu_227_ap_done, "grp_sha256_transform_fu_227_ap_done");
    sc_trace(mVcdFile, ap_block_state5_on_subcall_done, "ap_block_state5_on_subcall_done");
    sc_trace(mVcdFile, grp_sha256_transform_fu_227_ap_start, "grp_sha256_transform_fu_227_ap_start");
    sc_trace(mVcdFile, grp_sha256_transform_fu_227_ap_idle, "grp_sha256_transform_fu_227_ap_idle");
    sc_trace(mVcdFile, grp_sha256_transform_fu_227_ap_ready, "grp_sha256_transform_fu_227_ap_ready");
    sc_trace(mVcdFile, grp_sha256_transform_fu_227_data_address0, "grp_sha256_transform_fu_227_data_address0");
    sc_trace(mVcdFile, grp_sha256_transform_fu_227_data_ce0, "grp_sha256_transform_fu_227_data_ce0");
    sc_trace(mVcdFile, grp_sha256_transform_fu_227_data_address1, "grp_sha256_transform_fu_227_data_address1");
    sc_trace(mVcdFile, grp_sha256_transform_fu_227_data_ce1, "grp_sha256_transform_fu_227_data_ce1");
    sc_trace(mVcdFile, grp_sha256_transform_fu_227_ap_return_0, "grp_sha256_transform_fu_227_ap_return_0");
    sc_trace(mVcdFile, grp_sha256_transform_fu_227_ap_return_1, "grp_sha256_transform_fu_227_ap_return_1");
    sc_trace(mVcdFile, grp_sha256_transform_fu_227_ap_return_2, "grp_sha256_transform_fu_227_ap_return_2");
    sc_trace(mVcdFile, grp_sha256_transform_fu_227_ap_return_3, "grp_sha256_transform_fu_227_ap_return_3");
    sc_trace(mVcdFile, grp_sha256_transform_fu_227_ap_return_4, "grp_sha256_transform_fu_227_ap_return_4");
    sc_trace(mVcdFile, grp_sha256_transform_fu_227_ap_return_5, "grp_sha256_transform_fu_227_ap_return_5");
    sc_trace(mVcdFile, grp_sha256_transform_fu_227_ap_return_6, "grp_sha256_transform_fu_227_ap_return_6");
    sc_trace(mVcdFile, grp_sha256_transform_fu_227_ap_return_7, "grp_sha256_transform_fu_227_ap_return_7");
    sc_trace(mVcdFile, ctx_datalen_reg_195, "ctx_datalen_reg_195");
    sc_trace(mVcdFile, i_reg_206, "i_reg_206");
    sc_trace(mVcdFile, ctx_datalen_1_phi_fu_220_p4, "ctx_datalen_1_phi_fu_220_p4");
    sc_trace(mVcdFile, ctx_datalen_1_reg_217, "ctx_datalen_1_reg_217");
    sc_trace(mVcdFile, ap_reg_grp_sha256_transform_fu_227_ap_start, "ap_reg_grp_sha256_transform_fu_227_ap_start");
    sc_trace(mVcdFile, i_cast2_fu_335_p1, "i_cast2_fu_335_p1");
    sc_trace(mVcdFile, ctx_state_7_fu_58, "ctx_state_7_fu_58");
    sc_trace(mVcdFile, ctx_state_6_fu_62, "ctx_state_6_fu_62");
    sc_trace(mVcdFile, ctx_state_5_fu_66, "ctx_state_5_fu_66");
    sc_trace(mVcdFile, ctx_state_4_fu_70, "ctx_state_4_fu_70");
    sc_trace(mVcdFile, ctx_state_3_fu_74, "ctx_state_3_fu_74");
    sc_trace(mVcdFile, ctx_state_2_fu_78, "ctx_state_2_fu_78");
    sc_trace(mVcdFile, ctx_state_1_fu_82, "ctx_state_1_fu_82");
    sc_trace(mVcdFile, ctx_state_fu_86, "ctx_state_fu_86");
    sc_trace(mVcdFile, ctx_bitlen_1_fu_90, "ctx_bitlen_1_fu_90");
    sc_trace(mVcdFile, tmp_3_ctx_bitlen_1_fu_485_p3, "tmp_3_ctx_bitlen_1_fu_485_p3");
    sc_trace(mVcdFile, ctx_bitlen_fu_94, "ctx_bitlen_fu_94");
    sc_trace(mVcdFile, tmp_4_fu_493_p2, "tmp_4_fu_493_p2");
    sc_trace(mVcdFile, i_cast_fu_340_p1, "i_cast_fu_340_p1");
    sc_trace(mVcdFile, tmp_6_fu_425_p1, "tmp_6_fu_425_p1");
    sc_trace(mVcdFile, tmp_5_fu_421_p1, "tmp_5_fu_421_p1");
    sc_trace(mVcdFile, tmp_2_fu_473_p2, "tmp_2_fu_473_p2");
    sc_trace(mVcdFile, tmp_3_fu_479_p2, "tmp_3_fu_479_p2");
    sc_trace(mVcdFile, ap_return_0_preg, "ap_return_0_preg");
    sc_trace(mVcdFile, ap_return_1_preg, "ap_return_1_preg");
    sc_trace(mVcdFile, ap_return_2_preg, "ap_return_2_preg");
    sc_trace(mVcdFile, ap_return_3_preg, "ap_return_3_preg");
    sc_trace(mVcdFile, ap_return_4_preg, "ap_return_4_preg");
    sc_trace(mVcdFile, ap_return_5_preg, "ap_return_5_preg");
    sc_trace(mVcdFile, ap_return_6_preg, "ap_return_6_preg");
    sc_trace(mVcdFile, ap_return_7_preg, "ap_return_7_preg");
    sc_trace(mVcdFile, ap_return_8_preg, "ap_return_8_preg");
    sc_trace(mVcdFile, ap_return_9_preg, "ap_return_9_preg");
    sc_trace(mVcdFile, ap_return_10_preg, "ap_return_10_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

sha256_update::~sha256_update() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete grp_sha256_transform_fu_227;
}

void sha256_update::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_grp_sha256_transform_fu_227_ap_start = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
            ap_reg_grp_sha256_transform_fu_227_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_sha256_transform_fu_227_ap_ready.read())) {
            ap_reg_grp_sha256_transform_fu_227_ap_start = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_0_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             esl_seteq<1,1,1>(exitcond_fu_344_p2.read(), ap_const_lv1_1))) {
            ap_return_0_preg = ctx_datalen_reg_195.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_10_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             esl_seteq<1,1,1>(exitcond_fu_344_p2.read(), ap_const_lv1_1))) {
            ap_return_10_preg = ctx_state_7_fu_58.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_1_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             esl_seteq<1,1,1>(exitcond_fu_344_p2.read(), ap_const_lv1_1))) {
            ap_return_1_preg = ctx_bitlen_fu_94.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_2_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             esl_seteq<1,1,1>(exitcond_fu_344_p2.read(), ap_const_lv1_1))) {
            ap_return_2_preg = ctx_bitlen_1_fu_90.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_3_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             esl_seteq<1,1,1>(exitcond_fu_344_p2.read(), ap_const_lv1_1))) {
            ap_return_3_preg = ctx_state_fu_86.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_4_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             esl_seteq<1,1,1>(exitcond_fu_344_p2.read(), ap_const_lv1_1))) {
            ap_return_4_preg = ctx_state_1_fu_82.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_5_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             esl_seteq<1,1,1>(exitcond_fu_344_p2.read(), ap_const_lv1_1))) {
            ap_return_5_preg = ctx_state_2_fu_78.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_6_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             esl_seteq<1,1,1>(exitcond_fu_344_p2.read(), ap_const_lv1_1))) {
            ap_return_6_preg = ctx_state_3_fu_74.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_7_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             esl_seteq<1,1,1>(exitcond_fu_344_p2.read(), ap_const_lv1_1))) {
            ap_return_7_preg = ctx_state_4_fu_70.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_8_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             esl_seteq<1,1,1>(exitcond_fu_344_p2.read(), ap_const_lv1_1))) {
            ap_return_8_preg = ctx_state_5_fu_66.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_9_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             esl_seteq<1,1,1>(exitcond_fu_344_p2.read(), ap_const_lv1_1))) {
            ap_return_9_preg = ctx_state_6_fu_62.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(tmp_1_reg_651.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0))) {
        ctx_bitlen_1_fu_90 = tmp_3_ctx_bitlen_1_fu_485_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ctx_bitlen_1_fu_90 = p_read2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(tmp_1_reg_651.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0))) {
        ctx_bitlen_fu_94 = tmp_4_fu_493_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ctx_bitlen_fu_94 = p_read1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_fu_435_p2.read()))) {
        ctx_datalen_1_reg_217 = ctx_datalen_assign_c_fu_429_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(tmp_1_reg_651.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0))) {
        ctx_datalen_1_reg_217 = ap_const_lv7_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0))) {
        ctx_datalen_reg_195 = ctx_datalen_1_cast_fu_549_p1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ctx_datalen_reg_195 = ctx_datalen_read.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(tmp_1_reg_651.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0))) {
        ctx_state_1_fu_82 = grp_sha256_transform_fu_227_ap_return_1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ctx_state_1_fu_82 = p_read4.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(tmp_1_reg_651.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0))) {
        ctx_state_2_fu_78 = grp_sha256_transform_fu_227_ap_return_2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ctx_state_2_fu_78 = p_read5.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(tmp_1_reg_651.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0))) {
        ctx_state_3_fu_74 = grp_sha256_transform_fu_227_ap_return_3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ctx_state_3_fu_74 = p_read6.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(tmp_1_reg_651.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0))) {
        ctx_state_4_fu_70 = grp_sha256_transform_fu_227_ap_return_4.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ctx_state_4_fu_70 = p_read7.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(tmp_1_reg_651.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0))) {
        ctx_state_5_fu_66 = grp_sha256_transform_fu_227_ap_return_5.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ctx_state_5_fu_66 = p_read8.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(tmp_1_reg_651.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0))) {
        ctx_state_6_fu_62 = grp_sha256_transform_fu_227_ap_return_6.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ctx_state_6_fu_62 = p_read9.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(tmp_1_reg_651.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0))) {
        ctx_state_7_fu_58 = grp_sha256_transform_fu_227_ap_return_7.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ctx_state_7_fu_58 = p_read10.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(tmp_1_reg_651.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0))) {
        ctx_state_fu_86 = grp_sha256_transform_fu_227_ap_return_0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ctx_state_fu_86 = p_read3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0))) {
        i_reg_206 = i_1_reg_636.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_206 = ap_const_lv7_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ctx_state_1_load_1_reg_685 = ctx_state_1_fu_82.read();
        ctx_state_2_load_1_reg_680 = ctx_state_2_fu_78.read();
        ctx_state_3_load_1_reg_675 = ctx_state_3_fu_74.read();
        ctx_state_4_load_1_reg_670 = ctx_state_4_fu_70.read();
        ctx_state_5_load_1_reg_665 = ctx_state_5_fu_66.read();
        ctx_state_6_load_1_reg_660 = ctx_state_6_fu_62.read();
        ctx_state_7_load_1_reg_655 = ctx_state_7_fu_58.read();
        ctx_state_load_1_reg_690 = ctx_state_fu_86.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_1_reg_636 = i_1_fu_349_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        tmp_1_reg_651 = tmp_1_fu_435_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        tmp_reg_628 = tmp_fu_281_p1.read();
    }
}

void sha256_update::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void sha256_update::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void sha256_update::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void sha256_update::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void sha256_update::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void sha256_update::thread_ap_block_state5_on_subcall_done() {
    ap_block_state5_on_subcall_done = (esl_seteq<1,1,1>(ap_const_logic_0, grp_sha256_transform_fu_227_ap_done.read()) && esl_seteq<1,1,1>(tmp_1_reg_651.read(), ap_const_lv1_1));
}

void sha256_update::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(exitcond_fu_344_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void sha256_update::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void sha256_update::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_344_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void sha256_update::thread_ap_return_0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_344_p2.read(), ap_const_lv1_1))) {
        ap_return_0 = ctx_datalen_reg_195.read();
    } else {
        ap_return_0 = ap_return_0_preg.read();
    }
}

void sha256_update::thread_ap_return_1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_344_p2.read(), ap_const_lv1_1))) {
        ap_return_1 = ctx_bitlen_fu_94.read();
    } else {
        ap_return_1 = ap_return_1_preg.read();
    }
}

void sha256_update::thread_ap_return_10() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_344_p2.read(), ap_const_lv1_1))) {
        ap_return_10 = ctx_state_7_fu_58.read();
    } else {
        ap_return_10 = ap_return_10_preg.read();
    }
}

void sha256_update::thread_ap_return_2() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_344_p2.read(), ap_const_lv1_1))) {
        ap_return_2 = ctx_bitlen_1_fu_90.read();
    } else {
        ap_return_2 = ap_return_2_preg.read();
    }
}

void sha256_update::thread_ap_return_3() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_344_p2.read(), ap_const_lv1_1))) {
        ap_return_3 = ctx_state_fu_86.read();
    } else {
        ap_return_3 = ap_return_3_preg.read();
    }
}

void sha256_update::thread_ap_return_4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_344_p2.read(), ap_const_lv1_1))) {
        ap_return_4 = ctx_state_1_fu_82.read();
    } else {
        ap_return_4 = ap_return_4_preg.read();
    }
}

void sha256_update::thread_ap_return_5() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_344_p2.read(), ap_const_lv1_1))) {
        ap_return_5 = ctx_state_2_fu_78.read();
    } else {
        ap_return_5 = ap_return_5_preg.read();
    }
}

void sha256_update::thread_ap_return_6() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_344_p2.read(), ap_const_lv1_1))) {
        ap_return_6 = ctx_state_3_fu_74.read();
    } else {
        ap_return_6 = ap_return_6_preg.read();
    }
}

void sha256_update::thread_ap_return_7() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_344_p2.read(), ap_const_lv1_1))) {
        ap_return_7 = ctx_state_4_fu_70.read();
    } else {
        ap_return_7 = ap_return_7_preg.read();
    }
}

void sha256_update::thread_ap_return_8() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_344_p2.read(), ap_const_lv1_1))) {
        ap_return_8 = ctx_state_5_fu_66.read();
    } else {
        ap_return_8 = ap_return_8_preg.read();
    }
}

void sha256_update::thread_ap_return_9() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_344_p2.read(), ap_const_lv1_1))) {
        ap_return_9 = ctx_state_6_fu_62.read();
    } else {
        ap_return_9 = ap_return_9_preg.read();
    }
}

void sha256_update::thread_ctx_data_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ctx_data_address0 =  (sc_lv<6>) (ctx_datalen_reg_195.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(tmp_1_reg_651.read(), ap_const_lv1_1))) {
        ctx_data_address0 = grp_sha256_transform_fu_227_data_address0.read();
    } else {
        ctx_data_address0 = "XXXXXX";
    }
}

void sha256_update::thread_ctx_data_address1() {
    ctx_data_address1 = grp_sha256_transform_fu_227_data_address1.read();
}

void sha256_update::thread_ctx_data_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ctx_data_ce0 = ap_const_logic_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(tmp_1_reg_651.read(), ap_const_lv1_1))) {
        ctx_data_ce0 = grp_sha256_transform_fu_227_data_ce0.read();
    } else {
        ctx_data_ce0 = ap_const_logic_0;
    }
}

void sha256_update::thread_ctx_data_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(tmp_1_reg_651.read(), ap_const_lv1_1))) {
        ctx_data_ce1 = grp_sha256_transform_fu_227_data_ce1.read();
    } else {
        ctx_data_ce1 = ap_const_logic_0;
    }
}

void sha256_update::thread_ctx_data_d0() {
    ctx_data_d0 = data_q0.read();
}

void sha256_update::thread_ctx_data_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ctx_data_we0 = ap_const_logic_1;
    } else {
        ctx_data_we0 = ap_const_logic_0;
    }
}

void sha256_update::thread_ctx_datalen_1_cast_fu_549_p1() {
    ctx_datalen_1_cast_fu_549_p1 = esl_zext<32,7>(ctx_datalen_1_phi_fu_220_p4.read());
}

void sha256_update::thread_ctx_datalen_1_phi_fu_220_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(tmp_1_reg_651.read(), ap_const_lv1_1))) {
        ctx_datalen_1_phi_fu_220_p4 = ap_const_lv7_0;
    } else {
        ctx_datalen_1_phi_fu_220_p4 = ctx_datalen_1_reg_217.read();
    }
}

void sha256_update::thread_ctx_datalen_assign_c_fu_429_p2() {
    ctx_datalen_assign_c_fu_429_p2 = (!ap_const_lv7_1.is_01() || !tmp_6_fu_425_p1.read().is_01())? sc_lv<7>(): (sc_biguint<7>(ap_const_lv7_1) + sc_biguint<7>(tmp_6_fu_425_p1.read()));
}

void sha256_update::thread_data_address0() {
    data_address0 =  (sc_lv<6>) (i_cast2_fu_335_p1.read());
}

void sha256_update::thread_data_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        data_ce0 = ap_const_logic_1;
    } else {
        data_ce0 = ap_const_logic_0;
    }
}

void sha256_update::thread_exitcond_fu_344_p2() {
    exitcond_fu_344_p2 = (!i_cast_fu_340_p1.read().is_01() || !tmp_reg_628.read().is_01())? sc_lv<1>(): sc_lv<1>(i_cast_fu_340_p1.read() == tmp_reg_628.read());
}

void sha256_update::thread_grp_sha256_transform_fu_227_ap_start() {
    grp_sha256_transform_fu_227_ap_start = ap_reg_grp_sha256_transform_fu_227_ap_start.read();
}

void sha256_update::thread_i_1_fu_349_p2() {
    i_1_fu_349_p2 = (!i_reg_206.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(i_reg_206.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void sha256_update::thread_i_cast2_fu_335_p1() {
    i_cast2_fu_335_p1 = esl_zext<32,7>(i_reg_206.read());
}

void sha256_update::thread_i_cast_fu_340_p1() {
    i_cast_fu_340_p1 = esl_zext<8,7>(i_reg_206.read());
}

void sha256_update::thread_tmp_1_fu_435_p2() {
    tmp_1_fu_435_p2 = (!tmp_5_fu_421_p1.read().is_01() || !ap_const_lv8_3F.is_01())? sc_lv<1>(): sc_lv<1>(tmp_5_fu_421_p1.read() == ap_const_lv8_3F);
}

void sha256_update::thread_tmp_2_fu_473_p2() {
    tmp_2_fu_473_p2 = (!ctx_bitlen_fu_94.read().is_01() || !ap_const_lv32_FFFFFDFF.is_01())? sc_lv<1>(): (sc_biguint<32>(ctx_bitlen_fu_94.read()) > sc_biguint<32>(ap_const_lv32_FFFFFDFF));
}

void sha256_update::thread_tmp_3_ctx_bitlen_1_fu_485_p3() {
    tmp_3_ctx_bitlen_1_fu_485_p3 = (!tmp_2_fu_473_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_2_fu_473_p2.read()[0].to_bool())? tmp_3_fu_479_p2.read(): ctx_bitlen_1_fu_90.read());
}

void sha256_update::thread_tmp_3_fu_479_p2() {
    tmp_3_fu_479_p2 = (!ctx_bitlen_1_fu_90.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(ctx_bitlen_1_fu_90.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void sha256_update::thread_tmp_4_fu_493_p2() {
    tmp_4_fu_493_p2 = (!ctx_bitlen_fu_94.read().is_01() || !ap_const_lv32_200.is_01())? sc_lv<32>(): (sc_biguint<32>(ctx_bitlen_fu_94.read()) + sc_biguint<32>(ap_const_lv32_200));
}

void sha256_update::thread_tmp_5_fu_421_p1() {
    tmp_5_fu_421_p1 = ctx_datalen_reg_195.read().range(8-1, 0);
}

void sha256_update::thread_tmp_6_fu_425_p1() {
    tmp_6_fu_425_p1 = ctx_datalen_reg_195.read().range(7-1, 0);
}

void sha256_update::thread_tmp_fu_281_p1() {
    tmp_fu_281_p1 = len.read().range(8-1, 0);
}

void sha256_update::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond_fu_344_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_fu_435_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<5>) ("XXXXX");
            break;
    }
}

}

