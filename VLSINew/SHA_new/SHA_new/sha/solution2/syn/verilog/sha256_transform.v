// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sha256_transform (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ctx_state_0_read,
        ctx_state_1_read,
        ctx_state_2_read,
        ctx_state_3_read,
        ctx_state_4_read,
        ctx_state_5_read,
        ctx_state_6_read,
        ctx_state_7_read,
        data_address0,
        data_ce0,
        data_q0,
        data_address1,
        data_ce1,
        data_q1,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] ctx_state_0_read;
input  [31:0] ctx_state_1_read;
input  [31:0] ctx_state_2_read;
input  [31:0] ctx_state_3_read;
input  [31:0] ctx_state_4_read;
input  [31:0] ctx_state_5_read;
input  [31:0] ctx_state_6_read;
input  [31:0] ctx_state_7_read;
output  [5:0] data_address0;
output   data_ce0;
input  [7:0] data_q0;
output  [5:0] data_address1;
output   data_ce1;
input  [7:0] data_q1;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;
output  [31:0] ap_return_3;
output  [31:0] ap_return_4;
output  [31:0] ap_return_5;
output  [31:0] ap_return_6;
output  [31:0] ap_return_7;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] data_address0;
reg data_ce0;
reg[5:0] data_address1;
reg data_ce1;
reg[31:0] ap_return_0;
reg[31:0] ap_return_1;
reg[31:0] ap_return_2;
reg[31:0] ap_return_3;
reg[31:0] ap_return_4;
reg[31:0] ap_return_5;
reg[31:0] ap_return_6;
reg[31:0] ap_return_7;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] k_address0;
reg    k_ce0;
wire   [31:0] k_q0;
wire   [31:0] i_cast_fu_429_p1;
reg   [31:0] i_cast_reg_1110;
wire    ap_CS_fsm_state2;
wire   [4:0] tmp_5_fu_439_p2;
reg   [4:0] tmp_5_reg_1118;
wire   [0:0] tmp_fu_433_p2;
wire   [5:0] tmp_10_fu_450_p1;
reg   [5:0] tmp_10_reg_1128;
wire   [6:0] j_1_fu_465_p2;
reg   [6:0] j_1_reg_1139;
reg   [7:0] data_load_reg_1144;
wire    ap_CS_fsm_state3;
reg   [7:0] data_load_1_reg_1149;
wire   [31:0] i_1_cast_fu_502_p1;
reg   [31:0] i_1_cast_reg_1164;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond_fu_506_p2;
wire   [31:0] m_q0;
reg   [31:0] m_load_reg_1182;
wire    ap_CS_fsm_state6;
wire   [31:0] m_q1;
reg   [31:0] m_load_1_reg_1191;
wire   [6:0] i_3_fu_556_p2;
reg   [6:0] i_3_reg_1206;
wire   [31:0] tmp_26_fu_708_p2;
reg   [31:0] tmp_26_reg_1211;
wire    ap_CS_fsm_state7;
wire   [6:0] i_4_fu_726_p2;
reg   [6:0] i_4_reg_1219;
wire    ap_CS_fsm_state9;
wire   [0:0] tmp_27_fu_720_p2;
wire   [31:0] tmp10_fu_840_p2;
reg   [31:0] tmp10_reg_1234;
wire   [31:0] tmp_55_fu_864_p2;
reg   [31:0] tmp_55_reg_1239;
wire   [31:0] t1_fu_964_p2;
reg   [31:0] t1_reg_1244;
wire    ap_CS_fsm_state10;
wire   [31:0] e_fu_1047_p2;
wire    ap_CS_fsm_state11;
wire   [31:0] a_fu_1056_p2;
reg   [5:0] m_address0;
reg    m_ce0;
reg    m_we0;
wire   [31:0] m_d0;
reg   [5:0] m_address1;
reg    m_ce1;
reg    m_we1;
reg   [4:0] i_reg_299;
wire    ap_CS_fsm_state4;
reg   [6:0] j_reg_310;
reg   [6:0] i_1_reg_321;
wire    ap_CS_fsm_state8;
reg   [31:0] h_reg_342;
reg   [31:0] h1_reg_333;
reg   [31:0] g_reg_353;
reg   [31:0] f_reg_364;
reg   [31:0] d_reg_385;
reg   [31:0] d1_reg_375;
reg   [31:0] c_reg_396;
reg   [31:0] b_reg_407;
reg   [6:0] i_2_reg_418;
wire   [31:0] j_cast4_fu_445_p1;
wire   [31:0] tmp_8_cast_fu_460_p1;
wire   [31:0] tmp_1_cast_fu_476_p1;
wire   [31:0] tmp_4_cast_fu_486_p1;
wire   [31:0] tmp_14_cast_fu_518_p1;
wire   [31:0] tmp_24_cast_fu_529_p1;
wire   [31:0] tmp_25_cast_fu_540_p1;
wire   [31:0] tmp_35_cast_fu_551_p1;
wire   [31:0] i_2_cast_fu_714_p1;
wire   [5:0] tmp_8_fu_454_p2;
wire   [5:0] tmp_1_fu_471_p2;
wire   [5:0] tmp_4_fu_481_p2;
wire   [6:0] tmp_s_fu_512_p2;
wire   [6:0] tmp_14_fu_523_p2;
wire   [6:0] tmp_15_fu_534_p2;
wire   [6:0] tmp_25_fu_545_p2;
wire   [16:0] tmp_18_fu_571_p1;
wire   [14:0] tmp_3_fu_562_p4;
wire   [18:0] tmp_21_fu_591_p1;
wire   [12:0] tmp_9_fu_582_p4;
wire   [21:0] tmp_11_fu_602_p4;
wire   [31:0] tmp_12_fu_611_p1;
wire   [31:0] tmp_6_fu_594_p3;
wire   [31:0] tmp2_fu_615_p2;
wire   [31:0] tmp_7_fu_574_p3;
wire   [6:0] tmp_30_fu_637_p1;
wire   [24:0] tmp_16_fu_627_p4;
wire   [17:0] tmp_33_fu_659_p1;
wire   [13:0] tmp_19_fu_649_p4;
wire   [28:0] tmp_22_fu_671_p4;
wire   [31:0] tmp_23_fu_681_p1;
wire   [31:0] tmp_20_fu_663_p3;
wire   [31:0] tmp3_fu_685_p2;
wire   [31:0] tmp_17_fu_641_p3;
wire   [31:0] tmp_13_fu_621_p2;
wire   [31:0] tmp_24_fu_691_p2;
wire   [31:0] tmp5_fu_702_p2;
wire   [31:0] tmp4_fu_697_p2;
wire   [5:0] tmp_36_fu_742_p1;
wire   [25:0] tmp_28_fu_732_p4;
wire   [10:0] tmp_44_fu_764_p1;
wire   [20:0] tmp_31_fu_754_p4;
wire   [24:0] tmp_47_fu_786_p1;
wire   [6:0] tmp_34_fu_776_p4;
wire   [31:0] tmp_29_fu_746_p3;
wire   [31:0] tmp_32_fu_768_p3;
wire   [31:0] tmp6_fu_798_p2;
wire   [31:0] tmp_35_fu_790_p3;
wire   [31:0] tmp_39_fu_816_p2;
wire   [31:0] tmp_38_fu_810_p2;
wire   [31:0] tmp_40_fu_822_p2;
wire   [31:0] tmp_37_fu_804_p2;
wire   [31:0] tmp_41_fu_828_p2;
wire   [31:0] tmp11_fu_834_p2;
wire   [31:0] tmp_52_fu_846_p2;
wire   [31:0] tmp_53_fu_852_p2;
wire   [31:0] tmp_54_fu_858_p2;
wire   [31:0] ctx_state_fu_870_p2;
wire   [31:0] ctx_state_1_fu_875_p2;
wire   [31:0] ctx_state_2_fu_880_p2;
wire   [31:0] ctx_state_3_fu_885_p2;
wire   [31:0] ctx_state_4_fu_890_p2;
wire   [31:0] ctx_state_5_fu_895_p2;
wire   [31:0] ctx_state_6_fu_900_p2;
wire   [31:0] ctx_state_7_fu_905_p2;
wire   [31:0] tmp9_fu_958_p2;
wire   [1:0] tmp_50_fu_979_p1;
wire   [29:0] tmp_42_fu_969_p4;
wire   [12:0] tmp_57_fu_1001_p1;
wire   [18:0] tmp_45_fu_991_p4;
wire   [21:0] tmp_58_fu_1023_p1;
wire   [9:0] tmp_48_fu_1013_p4;
wire   [31:0] tmp_43_fu_983_p3;
wire   [31:0] tmp_46_fu_1005_p3;
wire   [31:0] tmp12_fu_1035_p2;
wire   [31:0] tmp_49_fu_1027_p3;
wire   [31:0] tmp13_fu_1052_p2;
wire   [31:0] tmp_51_fu_1041_p2;
reg   [31:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [31:0] ap_return_2_preg;
reg   [31:0] ap_return_3_preg;
reg   [31:0] ap_return_4_preg;
reg   [31:0] ap_return_5_preg;
reg   [31:0] ap_return_6_preg;
reg   [31:0] ap_return_7_preg;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 32'd0;
#0 ap_return_2_preg = 32'd0;
#0 ap_return_3_preg = 32'd0;
#0 ap_return_4_preg = 32'd0;
#0 ap_return_5_preg = 32'd0;
#0 ap_return_6_preg = 32'd0;
#0 ap_return_7_preg = 32'd0;
end

sha256_transform_k #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
k_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(k_address0),
    .ce0(k_ce0),
    .q0(k_q0)
);

sha256_transform_m #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
m_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(m_address0),
    .ce0(m_ce0),
    .we0(m_we0),
    .d0(m_d0),
    .q0(m_q0),
    .address1(m_address1),
    .ce1(m_ce1),
    .we1(m_we1),
    .d1(tmp_26_reg_1211),
    .q1(m_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state9) & (tmp_27_fu_720_p2 == 1'd1))) begin
            ap_return_0_preg <= ctx_state_fu_870_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state9) & (tmp_27_fu_720_p2 == 1'd1))) begin
            ap_return_1_preg <= ctx_state_1_fu_875_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state9) & (tmp_27_fu_720_p2 == 1'd1))) begin
            ap_return_2_preg <= ctx_state_2_fu_880_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state9) & (tmp_27_fu_720_p2 == 1'd1))) begin
            ap_return_3_preg <= ctx_state_3_fu_885_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_4_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state9) & (tmp_27_fu_720_p2 == 1'd1))) begin
            ap_return_4_preg <= ctx_state_4_fu_890_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_5_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state9) & (tmp_27_fu_720_p2 == 1'd1))) begin
            ap_return_5_preg <= ctx_state_5_fu_895_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_6_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state9) & (tmp_27_fu_720_p2 == 1'd1))) begin
            ap_return_6_preg <= ctx_state_6_fu_900_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_7_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state9) & (tmp_27_fu_720_p2 == 1'd1))) begin
            ap_return_7_preg <= ctx_state_7_fu_905_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond_fu_506_p2 == 1'd1))) begin
        b_reg_407 <= ctx_state_0_read;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        b_reg_407 <= a_fu_1056_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond_fu_506_p2 == 1'd1))) begin
        c_reg_396 <= ctx_state_1_read;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        c_reg_396 <= b_reg_407;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond_fu_506_p2 == 1'd1))) begin
        d1_reg_375 <= ctx_state_3_read;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        d1_reg_375 <= d_reg_385;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond_fu_506_p2 == 1'd1))) begin
        d_reg_385 <= ctx_state_2_read;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        d_reg_385 <= c_reg_396;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond_fu_506_p2 == 1'd1))) begin
        f_reg_364 <= ctx_state_4_read;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        f_reg_364 <= e_fu_1047_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond_fu_506_p2 == 1'd1))) begin
        g_reg_353 <= ctx_state_5_read;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        g_reg_353 <= f_reg_364;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond_fu_506_p2 == 1'd1))) begin
        h1_reg_333 <= ctx_state_7_read;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        h1_reg_333 <= h_reg_342;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond_fu_506_p2 == 1'd1))) begin
        h_reg_342 <= ctx_state_6_read;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        h_reg_342 <= g_reg_353;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_433_p2 == 1'd1))) begin
        i_1_reg_321 <= 7'd16;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        i_1_reg_321 <= i_3_reg_1206;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond_fu_506_p2 == 1'd1))) begin
        i_2_reg_418 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        i_2_reg_418 <= i_4_reg_1219;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_299 <= tmp_5_reg_1118;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_299 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_310 <= j_1_reg_1139;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_reg_310 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_load_1_reg_1149 <= data_q1;
        data_load_reg_1144 <= data_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_1_cast_reg_1164[6 : 0] <= i_1_cast_fu_502_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_3_reg_1206 <= i_3_fu_556_p2;
        m_load_1_reg_1191 <= m_q1;
        m_load_reg_1182 <= m_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_4_reg_1219 <= i_4_fu_726_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_cast_reg_1110[4 : 0] <= i_cast_fu_429_p1[4 : 0];
        tmp_5_reg_1118 <= tmp_5_fu_439_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_433_p2 == 1'd0))) begin
        j_1_reg_1139 <= j_1_fu_465_p2;
        tmp_10_reg_1128 <= tmp_10_fu_450_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        t1_reg_1244 <= t1_fu_964_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_27_fu_720_p2))) begin
        tmp10_reg_1234 <= tmp10_fu_840_p2;
        tmp_55_reg_1239 <= tmp_55_fu_864_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_26_reg_1211 <= tmp_26_fu_708_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state9) & (tmp_27_fu_720_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (tmp_27_fu_720_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (tmp_27_fu_720_p2 == 1'd1))) begin
        ap_return_0 = ctx_state_fu_870_p2;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (tmp_27_fu_720_p2 == 1'd1))) begin
        ap_return_1 = ctx_state_1_fu_875_p2;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (tmp_27_fu_720_p2 == 1'd1))) begin
        ap_return_2 = ctx_state_2_fu_880_p2;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (tmp_27_fu_720_p2 == 1'd1))) begin
        ap_return_3 = ctx_state_3_fu_885_p2;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (tmp_27_fu_720_p2 == 1'd1))) begin
        ap_return_4 = ctx_state_4_fu_890_p2;
    end else begin
        ap_return_4 = ap_return_4_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (tmp_27_fu_720_p2 == 1'd1))) begin
        ap_return_5 = ctx_state_5_fu_895_p2;
    end else begin
        ap_return_5 = ap_return_5_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (tmp_27_fu_720_p2 == 1'd1))) begin
        ap_return_6 = ctx_state_6_fu_900_p2;
    end else begin
        ap_return_6 = ap_return_6_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (tmp_27_fu_720_p2 == 1'd1))) begin
        ap_return_7 = ctx_state_7_fu_905_p2;
    end else begin
        ap_return_7 = ap_return_7_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_address0 = tmp_1_cast_fu_476_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        data_address0 = j_cast4_fu_445_p1;
    end else begin
        data_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_address1 = tmp_4_cast_fu_486_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        data_address1 = tmp_8_cast_fu_460_p1;
    end else begin
        data_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        data_ce0 = 1'b1;
    end else begin
        data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        data_ce1 = 1'b1;
    end else begin
        data_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        k_ce0 = 1'b1;
    end else begin
        k_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        m_address0 = i_2_cast_fu_714_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        m_address0 = tmp_35_cast_fu_551_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        m_address0 = tmp_14_cast_fu_518_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        m_address0 = i_cast_reg_1110;
    end else begin
        m_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        m_address1 = i_1_cast_reg_1164;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        m_address1 = tmp_25_cast_fu_540_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        m_address1 = tmp_24_cast_fu_529_p1;
    end else begin
        m_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4))) begin
        m_ce0 = 1'b1;
    end else begin
        m_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8))) begin
        m_ce1 = 1'b1;
    end else begin
        m_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        m_we0 = 1'b1;
    end else begin
        m_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        m_we1 = 1'b1;
    end else begin
        m_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_433_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond_fu_506_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (tmp_27_fu_720_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_fu_1056_p2 = (tmp13_fu_1052_p2 + tmp_51_fu_1041_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ctx_state_1_fu_875_p2 = (c_reg_396 + ctx_state_1_read);

assign ctx_state_2_fu_880_p2 = (d_reg_385 + ctx_state_2_read);

assign ctx_state_3_fu_885_p2 = (d1_reg_375 + ctx_state_3_read);

assign ctx_state_4_fu_890_p2 = (f_reg_364 + ctx_state_4_read);

assign ctx_state_5_fu_895_p2 = (g_reg_353 + ctx_state_5_read);

assign ctx_state_6_fu_900_p2 = (h_reg_342 + ctx_state_6_read);

assign ctx_state_7_fu_905_p2 = (h1_reg_333 + ctx_state_7_read);

assign ctx_state_fu_870_p2 = (b_reg_407 + ctx_state_0_read);

assign e_fu_1047_p2 = (t1_reg_1244 + d1_reg_375);

assign exitcond_fu_506_p2 = ((i_1_reg_321 == 7'd64) ? 1'b1 : 1'b0);

assign i_1_cast_fu_502_p1 = i_1_reg_321;

assign i_2_cast_fu_714_p1 = i_2_reg_418;

assign i_3_fu_556_p2 = (7'd1 + i_1_reg_321);

assign i_4_fu_726_p2 = (i_2_reg_418 + 7'd1);

assign i_cast_fu_429_p1 = i_reg_299;

assign j_1_fu_465_p2 = (7'd4 + j_reg_310);

assign j_cast4_fu_445_p1 = j_reg_310;

assign k_address0 = i_2_cast_fu_714_p1;

assign m_d0 = {{{{data_load_reg_1144}, {data_load_1_reg_1149}}, {data_q0}}, {data_q1}};

assign t1_fu_964_p2 = (tmp10_reg_1234 + tmp9_fu_958_p2);

assign tmp10_fu_840_p2 = (tmp11_fu_834_p2 + h1_reg_333);

assign tmp11_fu_834_p2 = (tmp_37_fu_804_p2 + tmp_41_fu_828_p2);

assign tmp12_fu_1035_p2 = (tmp_43_fu_983_p3 ^ tmp_46_fu_1005_p3);

assign tmp13_fu_1052_p2 = (tmp_55_reg_1239 + t1_reg_1244);

assign tmp2_fu_615_p2 = (tmp_12_fu_611_p1 ^ tmp_6_fu_594_p3);

assign tmp3_fu_685_p2 = (tmp_23_fu_681_p1 ^ tmp_20_fu_663_p3);

assign tmp4_fu_697_p2 = (m_load_1_reg_1191 + m_q0);

assign tmp5_fu_702_p2 = (tmp_13_fu_621_p2 + tmp_24_fu_691_p2);

assign tmp6_fu_798_p2 = (tmp_29_fu_746_p3 ^ tmp_32_fu_768_p3);

assign tmp9_fu_958_p2 = (k_q0 + m_q0);

assign tmp_10_fu_450_p1 = j_reg_310[5:0];

assign tmp_11_fu_602_p4 = {{m_load_reg_1182[31:10]}};

assign tmp_12_fu_611_p1 = tmp_11_fu_602_p4;

assign tmp_13_fu_621_p2 = (tmp2_fu_615_p2 ^ tmp_7_fu_574_p3);

assign tmp_14_cast_fu_518_p1 = tmp_s_fu_512_p2;

assign tmp_14_fu_523_p2 = ($signed(7'd121) + $signed(i_1_reg_321));

assign tmp_15_fu_534_p2 = ($signed(7'd113) + $signed(i_1_reg_321));

assign tmp_16_fu_627_p4 = {{m_q1[31:7]}};

assign tmp_17_fu_641_p3 = {{tmp_30_fu_637_p1}, {tmp_16_fu_627_p4}};

assign tmp_18_fu_571_p1 = m_load_reg_1182[16:0];

assign tmp_19_fu_649_p4 = {{m_q1[31:18]}};

assign tmp_1_cast_fu_476_p1 = tmp_1_fu_471_p2;

assign tmp_1_fu_471_p2 = (tmp_10_reg_1128 | 6'd2);

assign tmp_20_fu_663_p3 = {{tmp_33_fu_659_p1}, {tmp_19_fu_649_p4}};

assign tmp_21_fu_591_p1 = m_load_reg_1182[18:0];

assign tmp_22_fu_671_p4 = {{m_q1[31:3]}};

assign tmp_23_fu_681_p1 = tmp_22_fu_671_p4;

assign tmp_24_cast_fu_529_p1 = tmp_14_fu_523_p2;

assign tmp_24_fu_691_p2 = (tmp3_fu_685_p2 ^ tmp_17_fu_641_p3);

assign tmp_25_cast_fu_540_p1 = tmp_15_fu_534_p2;

assign tmp_25_fu_545_p2 = ($signed(7'd112) + $signed(i_1_reg_321));

assign tmp_26_fu_708_p2 = (tmp5_fu_702_p2 + tmp4_fu_697_p2);

assign tmp_27_fu_720_p2 = ((i_2_reg_418 == 7'd64) ? 1'b1 : 1'b0);

assign tmp_28_fu_732_p4 = {{f_reg_364[31:6]}};

assign tmp_29_fu_746_p3 = {{tmp_36_fu_742_p1}, {tmp_28_fu_732_p4}};

assign tmp_30_fu_637_p1 = m_q1[6:0];

assign tmp_31_fu_754_p4 = {{f_reg_364[31:11]}};

assign tmp_32_fu_768_p3 = {{tmp_44_fu_764_p1}, {tmp_31_fu_754_p4}};

assign tmp_33_fu_659_p1 = m_q1[17:0];

assign tmp_34_fu_776_p4 = {{f_reg_364[31:25]}};

assign tmp_35_cast_fu_551_p1 = tmp_25_fu_545_p2;

assign tmp_35_fu_790_p3 = {{tmp_47_fu_786_p1}, {tmp_34_fu_776_p4}};

assign tmp_36_fu_742_p1 = f_reg_364[5:0];

assign tmp_37_fu_804_p2 = (tmp6_fu_798_p2 ^ tmp_35_fu_790_p3);

assign tmp_38_fu_810_p2 = (f_reg_364 & g_reg_353);

assign tmp_39_fu_816_p2 = (f_reg_364 ^ 32'd4294967295);

assign tmp_3_fu_562_p4 = {{m_load_reg_1182[31:17]}};

assign tmp_40_fu_822_p2 = (h_reg_342 & tmp_39_fu_816_p2);

assign tmp_41_fu_828_p2 = (tmp_38_fu_810_p2 ^ tmp_40_fu_822_p2);

assign tmp_42_fu_969_p4 = {{b_reg_407[31:2]}};

assign tmp_43_fu_983_p3 = {{tmp_50_fu_979_p1}, {tmp_42_fu_969_p4}};

assign tmp_44_fu_764_p1 = f_reg_364[10:0];

assign tmp_45_fu_991_p4 = {{b_reg_407[31:13]}};

assign tmp_46_fu_1005_p3 = {{tmp_57_fu_1001_p1}, {tmp_45_fu_991_p4}};

assign tmp_47_fu_786_p1 = f_reg_364[24:0];

assign tmp_48_fu_1013_p4 = {{b_reg_407[31:22]}};

assign tmp_49_fu_1027_p3 = {{tmp_58_fu_1023_p1}, {tmp_48_fu_1013_p4}};

assign tmp_4_cast_fu_486_p1 = tmp_4_fu_481_p2;

assign tmp_4_fu_481_p2 = (tmp_10_reg_1128 | 6'd3);

assign tmp_50_fu_979_p1 = b_reg_407[1:0];

assign tmp_51_fu_1041_p2 = (tmp12_fu_1035_p2 ^ tmp_49_fu_1027_p3);

assign tmp_52_fu_846_p2 = (c_reg_396 ^ d_reg_385);

assign tmp_53_fu_852_p2 = (b_reg_407 & tmp_52_fu_846_p2);

assign tmp_54_fu_858_p2 = (c_reg_396 & d_reg_385);

assign tmp_55_fu_864_p2 = (tmp_53_fu_852_p2 ^ tmp_54_fu_858_p2);

assign tmp_57_fu_1001_p1 = b_reg_407[12:0];

assign tmp_58_fu_1023_p1 = b_reg_407[21:0];

assign tmp_5_fu_439_p2 = (i_reg_299 + 5'd1);

assign tmp_6_fu_594_p3 = {{tmp_21_fu_591_p1}, {tmp_9_fu_582_p4}};

assign tmp_7_fu_574_p3 = {{tmp_18_fu_571_p1}, {tmp_3_fu_562_p4}};

assign tmp_8_cast_fu_460_p1 = tmp_8_fu_454_p2;

assign tmp_8_fu_454_p2 = (tmp_10_fu_450_p1 | 6'd1);

assign tmp_9_fu_582_p4 = {{m_load_reg_1182[31:19]}};

assign tmp_fu_433_p2 = ((i_reg_299 == 5'd16) ? 1'b1 : 1'b0);

assign tmp_s_fu_512_p2 = ($signed(7'd126) + $signed(i_1_reg_321));

always @ (posedge ap_clk) begin
    i_cast_reg_1110[31:5] <= 27'b000000000000000000000000000;
    i_1_cast_reg_1164[31:7] <= 25'b0000000000000000000000000;
end

endmodule //sha256_transform
