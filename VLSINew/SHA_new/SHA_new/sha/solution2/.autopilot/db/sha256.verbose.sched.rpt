

================================================================
== Vivado HLS Report for 'sha256'
================================================================
* Date:           Wed Mar 31 11:05:45 2021

* Version:        2017.2 (Build 1909853 on Thu Jun 15 18:55:24 MDT 2017)
* Project:        sha
* Solution:       solution2
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      8.34|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |    ?|    ?|    ?|    ?|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-------------+-----+---------+------------+-----------+-----------+----------+----------+
        |             |    Latency    |  Iteration |  Initiation Interval  |   Trip   |          |
        |  Loop Name  | min |   max   |   Latency  |  achieved |   target  |   Count  | Pipelined|
        +-------------+-----+---------+------------+-----------+-----------+----------+----------+
        |- Loop 1     |  768|  2822800| 64 ~ 28228 |          -|          -| 12 ~ 100 |    no    |
        | + Loop 1.1  |  128|      128|           2|          -|          -|        64|    no    |
        | + Loop 1.2  |   24|      126|           2|          -|          -|  12 ~ 63 |    no    |
        |- Loop 2     |   64|       64|           2|          -|          -|        32|    no    |
        +-------------+-----+---------+------------+-----------+-----------+----------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 10
* Pipeline: 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	8  / (tmp)
	3  / (!tmp & !icmp)
	6  / (!tmp & icmp)
3 --> 
	4  / (!exitcond5)
	5  / (exitcond5)
4 --> 
	3  / true
5 --> 
	2  / true
6 --> 
	5  / (exitcond4)
	7  / (!exitcond4)
7 --> 
	6  / true
8 --> 
	9  / true
9 --> 
	10  / (!exitcond)
10 --> 
	9  / true
* FSM state operations: 

 <State 1>: 2.77ns
ST_1: n (6)  [1/1] 0.00ns
:0  %n = alloca i32

ST_1: sha256ctx_datalen (7)  [1/1] 0.00ns
:1  %sha256ctx_datalen = alloca i32

ST_1: sha256ctx_bitlen_0_2 (8)  [1/1] 0.00ns
:2  %sha256ctx_bitlen_0_2 = alloca i32

ST_1: sha256ctx_bitlen_1_2 (9)  [1/1] 0.00ns
:3  %sha256ctx_bitlen_1_2 = alloca i32

ST_1: sha256ctx_state_0_2 (10)  [1/1] 0.00ns
:4  %sha256ctx_state_0_2 = alloca i32

ST_1: sha256ctx_state_1_2 (11)  [1/1] 0.00ns
:5  %sha256ctx_state_1_2 = alloca i32

ST_1: sha256ctx_state_2_2 (12)  [1/1] 0.00ns
:6  %sha256ctx_state_2_2 = alloca i32

ST_1: sha256ctx_state_3_2 (13)  [1/1] 0.00ns
:7  %sha256ctx_state_3_2 = alloca i32

ST_1: sha256ctx_state_4_2 (14)  [1/1] 0.00ns
:8  %sha256ctx_state_4_2 = alloca i32

ST_1: sha256ctx_state_5_2 (15)  [1/1] 0.00ns
:9  %sha256ctx_state_5_2 = alloca i32

ST_1: sha256ctx_state_6_2 (16)  [1/1] 0.00ns
:10  %sha256ctx_state_6_2 = alloca i32

ST_1: sha256ctx_state_7_2 (17)  [1/1] 0.00ns
:11  %sha256ctx_state_7_2 = alloca i32

ST_1: seg_offset (18)  [1/1] 0.00ns
:12  %seg_offset = alloca i32

ST_1: StgValue_24 (19)  [1/1] 0.00ns
:13  call void (...)* @_ssdm_op_SpecBitsMap([256 x i8]* %data) nounwind, !map !27

ST_1: StgValue_25 (20)  [1/1] 0.00ns
:14  call void (...)* @_ssdm_op_SpecBitsMap(i32 %base_offset) nounwind, !map !33

ST_1: StgValue_26 (21)  [1/1] 0.00ns
:15  call void (...)* @_ssdm_op_SpecBitsMap(i32 %bytes) nounwind, !map !39

ST_1: StgValue_27 (22)  [1/1] 0.00ns
:16  call void (...)* @_ssdm_op_SpecBitsMap([32 x i8]* %digest) nounwind, !map !43

ST_1: StgValue_28 (23)  [1/1] 0.00ns
:17  call void (...)* @_ssdm_op_SpecTopModule([7 x i8]* @sha256_str) nounwind

ST_1: bytes_read (24)  [1/1] 1.00ns
:18  %bytes_read = call i32 @_ssdm_op_Read.s_axilite.i32(i32 %bytes) nounwind

ST_1: base_offset_read (25)  [1/1] 1.00ns
:19  %base_offset_read = call i32 @_ssdm_op_Read.s_axilite.i32(i32 %base_offset) nounwind

ST_1: seg_buf (26)  [1/1] 0.00ns  loc: sha256.c:23
:20  %seg_buf = alloca [64 x i8], align 1

ST_1: sha256ctx_data (27)  [1/1] 0.00ns  loc: sha256.c:29
:21  %sha256ctx_data = alloca [64 x i8], align 1

ST_1: empty (28)  [1/1] 0.00ns
:22  %empty = call i32 (...)* @_ssdm_op_SpecMemCore([256 x i8]* %data, [1 x i8]* @p_str, [7 x i8]* @RAM_1P_str, [1 x i8]* @p_str, i32 -1, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str) nounwind

ST_1: StgValue_34 (29)  [1/1] 0.00ns
:23  call void (...)* @_ssdm_op_SpecInterface([256 x i8]* %data, [10 x i8]* @p_str7, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_1: empty_9 (30)  [1/1] 0.00ns
:24  %empty_9 = call i32 (...)* @_ssdm_op_SpecMemCore([32 x i8]* %digest, [1 x i8]* @p_str, [7 x i8]* @RAM_1P_str, [1 x i8]* @p_str, i32 -1, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str) nounwind

ST_1: StgValue_36 (31)  [1/1] 0.00ns
:25  call void (...)* @_ssdm_op_SpecInterface([32 x i8]* %digest, [10 x i8]* @p_str7, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_1: StgValue_37 (32)  [1/1] 0.00ns  loc: sha256.c:18
:26  call void (...)* @_ssdm_op_SpecInterface(i32 %base_offset, [10 x i8]* @p_str7, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_1: StgValue_38 (33)  [1/1] 0.00ns  loc: sha256.c:19
:27  call void (...)* @_ssdm_op_SpecInterface(i32 %bytes, [10 x i8]* @p_str7, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_1: StgValue_39 (34)  [1/1] 0.00ns  loc: sha256.c:20
:28  call void (...)* @_ssdm_op_SpecInterface(i32 0, [10 x i8]* @p_str7, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_1: tmp_96 (35)  [1/1] 0.00ns
:29  %tmp_96 = trunc i32 %base_offset_read to i10

ST_1: StgValue_41 (36)  [1/1] 1.59ns
:30  store i32 0, i32* %seg_offset

ST_1: StgValue_42 (37)  [1/1] 1.77ns
:31  store i32 1541459225, i32* %sha256ctx_state_7_2

ST_1: StgValue_43 (38)  [1/1] 1.77ns
:32  store i32 528734635, i32* %sha256ctx_state_6_2

ST_1: StgValue_44 (39)  [1/1] 1.77ns
:33  store i32 -1694144372, i32* %sha256ctx_state_5_2

ST_1: StgValue_45 (40)  [1/1] 1.77ns
:34  store i32 1359893119, i32* %sha256ctx_state_4_2

ST_1: StgValue_46 (41)  [1/1] 1.77ns
:35  store i32 -1521486534, i32* %sha256ctx_state_3_2

ST_1: StgValue_47 (42)  [1/1] 1.77ns
:36  store i32 1013904242, i32* %sha256ctx_state_2_2

ST_1: StgValue_48 (43)  [1/1] 1.77ns
:37  store i32 -1150833019, i32* %sha256ctx_state_1_2

ST_1: StgValue_49 (44)  [1/1] 1.77ns
:38  store i32 1779033703, i32* %sha256ctx_state_0_2

ST_1: StgValue_50 (45)  [1/1] 1.77ns
:39  store i32 0, i32* %sha256ctx_bitlen_1_2

ST_1: StgValue_51 (46)  [1/1] 1.77ns
:40  store i32 0, i32* %sha256ctx_bitlen_0_2

ST_1: StgValue_52 (47)  [1/1] 1.77ns
:41  store i32 0, i32* %sha256ctx_datalen

ST_1: StgValue_53 (48)  [1/1] 1.77ns  loc: sha256.c:11
:42  store i32 %bytes_read, i32* %n

ST_1: StgValue_54 (49)  [1/1] 0.00ns  loc: sha256.c:33
:43  br label %1


 <State 2>: 3.26ns
ST_2: n_load (51)  [1/1] 0.00ns  loc: sha256.c:40
:0  %n_load = load i32* %n

ST_2: tmp (52)  [1/1] 3.26ns  loc: sha256.c:33
:1  %tmp = icmp eq i32 %n_load, 0

ST_2: StgValue_57 (53)  [1/1] 0.00ns  loc: sha256.c:33
:2  br i1 %tmp, label %8, label %2

ST_2: tmp_14 (55)  [1/1] 0.00ns  loc: sha256.c:34
:0  %tmp_14 = call i32 (...)* @_ssdm_op_SpecRegionBegin([12 x i8]* @p_str8) nounwind

ST_2: StgValue_59 (56)  [1/1] 0.00ns  loc: sha256.c:35
:1  call void (...)* @_ssdm_op_SpecLoopTripCount(i32 12, i32 100, i32 56, [1 x i8]* @p_str1) nounwind

ST_2: tmp_97 (57)  [1/1] 0.00ns  loc: sha256.c:36
:2  %tmp_97 = call i26 @_ssdm_op_PartSelect.i26.i32.i32.i32(i32 %n_load, i32 6, i32 31)

ST_2: icmp (58)  [1/1] 3.25ns  loc: sha256.c:36
:3  %icmp = icmp eq i26 %tmp_97, 0

ST_2: StgValue_62 (59)  [1/1] 0.00ns  loc: sha256.c:36
:4  br i1 %icmp, label %.preheader.preheader, label %.preheader6.preheader

ST_2: StgValue_63 (61)  [1/1] 1.59ns  loc: sha256.c:38
.preheader6.preheader:0  br label %.preheader6

ST_2: StgValue_64 (123)  [1/1] 1.59ns  loc: sha256.c:46
.preheader.preheader:0  br label %.preheader

ST_2: sha256ctx_datalen_lo_2 (184)  [1/1] 0.00ns  loc: sha256.c:55
:0  %sha256ctx_datalen_lo_2 = load i32* %sha256ctx_datalen

ST_2: sha256ctx_bitlen_0_2_13 (185)  [1/1] 0.00ns  loc: sha256.c:55
:1  %sha256ctx_bitlen_0_2_13 = load i32* %sha256ctx_bitlen_0_2

ST_2: sha256ctx_bitlen_1_2_14 (186)  [1/1] 0.00ns  loc: sha256.c:55
:2  %sha256ctx_bitlen_1_2_14 = load i32* %sha256ctx_bitlen_1_2

ST_2: sha256ctx_state_0_2_3 (187)  [1/1] 0.00ns  loc: sha256.c:55
:3  %sha256ctx_state_0_2_3 = load i32* %sha256ctx_state_0_2

ST_2: sha256ctx_state_1_2_3 (188)  [1/1] 0.00ns  loc: sha256.c:55
:4  %sha256ctx_state_1_2_3 = load i32* %sha256ctx_state_1_2

ST_2: sha256ctx_state_2_2_3 (189)  [1/1] 0.00ns  loc: sha256.c:55
:5  %sha256ctx_state_2_2_3 = load i32* %sha256ctx_state_2_2

ST_2: sha256ctx_state_3_2_3 (190)  [1/1] 0.00ns  loc: sha256.c:55
:6  %sha256ctx_state_3_2_3 = load i32* %sha256ctx_state_3_2

ST_2: sha256ctx_state_4_2_3 (191)  [1/1] 0.00ns  loc: sha256.c:55
:7  %sha256ctx_state_4_2_3 = load i32* %sha256ctx_state_4_2

ST_2: sha256ctx_state_5_2_3 (192)  [1/1] 0.00ns  loc: sha256.c:55
:8  %sha256ctx_state_5_2_3 = load i32* %sha256ctx_state_5_2

ST_2: sha256ctx_state_6_2_3 (193)  [1/1] 0.00ns  loc: sha256.c:55
:9  %sha256ctx_state_6_2_3 = load i32* %sha256ctx_state_6_2

ST_2: sha256ctx_state_7_2_3 (194)  [1/1] 0.00ns  loc: sha256.c:55
:10  %sha256ctx_state_7_2_3 = load i32* %sha256ctx_state_7_2

ST_2: StgValue_76 (195)  [2/2] 3.26ns  loc: sha256.c:55
:11  call fastcc void @sha256_final([64 x i8]* %sha256ctx_data, i32 %sha256ctx_datalen_lo_2, i32 %sha256ctx_bitlen_0_2_13, i32 %sha256ctx_bitlen_1_2_14, i32 %sha256ctx_state_0_2_3, i32 %sha256ctx_state_1_2_3, i32 %sha256ctx_state_2_2_3, i32 %sha256ctx_state_3_2_3, i32 %sha256ctx_state_4_2_3, i32 %sha256ctx_state_5_2_3, i32 %sha256ctx_state_6_2_3, i32 %sha256ctx_state_7_2_3, [64 x i8]* %seg_buf) nounwind


 <State 3>: 5.99ns
ST_3: i9 (63)  [1/1] 0.00ns
.preheader6:0  %i9 = phi i7 [ %i_7, %3 ], [ 0, %.preheader6.preheader ]

ST_3: i9_cast6 (64)  [1/1] 0.00ns  loc: sha256.c:38
.preheader6:1  %i9_cast6 = zext i7 %i9 to i10

ST_3: i9_cast5 (65)  [1/1] 0.00ns  loc: sha256.c:38
.preheader6:2  %i9_cast5 = zext i7 %i9 to i32

ST_3: exitcond5 (66)  [1/1] 2.91ns  loc: sha256.c:38
.preheader6:3  %exitcond5 = icmp eq i7 %i9, -64

ST_3: StgValue_81 (67)  [1/1] 0.00ns
.preheader6:4  call void (...)* @_ssdm_op_SpecLoopTripCount(i64 64, i64 64, i64 64)

ST_3: i_7 (68)  [1/1] 2.32ns  loc: sha256.c:38
.preheader6:5  %i_7 = add i7 %i9, 1

ST_3: StgValue_83 (69)  [1/1] 0.00ns  loc: sha256.c:38
.preheader6:6  br i1 %exitcond5, label %4, label %3

ST_3: seg_offset_load_2 (71)  [1/1] 0.00ns  loc: sha256.c:33
:0  %seg_offset_load_2 = load i32* %seg_offset

ST_3: tmp1 (72)  [1/1] 1.86ns  loc: sha256.c:38
:1  %tmp1 = add i10 %tmp_96, %i9_cast6

ST_3: tmp_99 (73)  [1/1] 0.00ns  loc: sha256.c:33
:2  %tmp_99 = trunc i32 %seg_offset_load_2 to i10

ST_3: sum (74)  [1/1] 1.86ns  loc: sha256.c:33
:3  %sum = add i10 %tmp_99, %tmp1

ST_3: sum_cast (75)  [1/1] 0.00ns  loc: sha256.c:33
:4  %sum_cast = zext i10 %sum to i32

ST_3: data_addr (76)  [1/1] 0.00ns  loc: sha256.c:39
:5  %data_addr = getelementptr [256 x i8]* %data, i32 0, i32 %sum_cast

ST_3: data_load (77)  [2/2] 2.27ns  loc: sha256.c:39
:6  %data_load = load i8* %data_addr, align 1

ST_3: sha256ctx_datalen_lo (82)  [1/1] 0.00ns  loc: sha256.c:42
:0  %sha256ctx_datalen_lo = load i32* %sha256ctx_datalen

ST_3: sha256ctx_bitlen_0_s (83)  [1/1] 0.00ns  loc: sha256.c:42
:1  %sha256ctx_bitlen_0_s = load i32* %sha256ctx_bitlen_0_2

ST_3: sha256ctx_bitlen_1_s (84)  [1/1] 0.00ns  loc: sha256.c:42
:2  %sha256ctx_bitlen_1_s = load i32* %sha256ctx_bitlen_1_2

ST_3: sha256ctx_state_0_2_1 (85)  [1/1] 0.00ns  loc: sha256.c:42
:3  %sha256ctx_state_0_2_1 = load i32* %sha256ctx_state_0_2

ST_3: sha256ctx_state_1_2_1 (86)  [1/1] 0.00ns  loc: sha256.c:42
:4  %sha256ctx_state_1_2_1 = load i32* %sha256ctx_state_1_2

ST_3: sha256ctx_state_2_2_1 (87)  [1/1] 0.00ns  loc: sha256.c:42
:5  %sha256ctx_state_2_2_1 = load i32* %sha256ctx_state_2_2

ST_3: sha256ctx_state_3_2_1 (88)  [1/1] 0.00ns  loc: sha256.c:42
:6  %sha256ctx_state_3_2_1 = load i32* %sha256ctx_state_3_2

ST_3: sha256ctx_state_4_2_1 (89)  [1/1] 0.00ns  loc: sha256.c:42
:7  %sha256ctx_state_4_2_1 = load i32* %sha256ctx_state_4_2

ST_3: sha256ctx_state_5_2_1 (90)  [1/1] 0.00ns  loc: sha256.c:42
:8  %sha256ctx_state_5_2_1 = load i32* %sha256ctx_state_5_2

ST_3: sha256ctx_state_6_2_1 (91)  [1/1] 0.00ns  loc: sha256.c:42
:9  %sha256ctx_state_6_2_1 = load i32* %sha256ctx_state_6_2

ST_3: sha256ctx_state_7_2_1 (92)  [1/1] 0.00ns  loc: sha256.c:42
:10  %sha256ctx_state_7_2_1 = load i32* %sha256ctx_state_7_2

ST_3: n_1 (94)  [1/1] 2.90ns  loc: sha256.c:40
:12  %n_1 = add i32 %n_load, -64

ST_3: call_ret (96)  [2/2] 3.18ns  loc: sha256.c:42
:14  %call_ret = call fastcc { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } @sha256_update([64 x i8]* %sha256ctx_data, i32 %sha256ctx_datalen_lo, i32 %sha256ctx_bitlen_0_s, i32 %sha256ctx_bitlen_1_s, i32 %sha256ctx_state_0_2_1, i32 %sha256ctx_state_1_2_1, i32 %sha256ctx_state_2_2_1, i32 %sha256ctx_state_3_2_1, i32 %sha256ctx_state_4_2_1, i32 %sha256ctx_state_5_2_1, i32 %sha256ctx_state_6_2_1, i32 %sha256ctx_state_7_2_1, [64 x i8]* %seg_buf, i32 64) nounwind

ST_3: StgValue_104 (120)  [1/1] 1.77ns  loc: sha256.c:40
:38  store i32 %n_1, i32* %n


 <State 4>: 4.59ns
ST_4: data_load (77)  [1/2] 2.27ns  loc: sha256.c:39
:6  %data_load = load i8* %data_addr, align 1

ST_4: seg_buf_addr_1 (78)  [1/1] 0.00ns  loc: sha256.c:39
:7  %seg_buf_addr_1 = getelementptr inbounds [64 x i8]* %seg_buf, i32 0, i32 %i9_cast5

ST_4: StgValue_107 (79)  [1/1] 2.32ns  loc: sha256.c:39
:8  store i8 %data_load, i8* %seg_buf_addr_1, align 1

ST_4: StgValue_108 (80)  [1/1] 0.00ns  loc: sha256.c:38
:9  br label %.preheader6


 <State 5>: 4.49ns
ST_5: seg_offset_load (93)  [1/1] 0.00ns  loc: sha256.c:41
:11  %seg_offset_load = load i32* %seg_offset

ST_5: seg_offset_1 (95)  [1/1] 2.90ns  loc: sha256.c:41
:13  %seg_offset_1 = add i32 %seg_offset_load, 64

ST_5: call_ret (96)  [1/2] 0.00ns  loc: sha256.c:42
:14  %call_ret = call fastcc { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } @sha256_update([64 x i8]* %sha256ctx_data, i32 %sha256ctx_datalen_lo, i32 %sha256ctx_bitlen_0_s, i32 %sha256ctx_bitlen_1_s, i32 %sha256ctx_state_0_2_1, i32 %sha256ctx_state_1_2_1, i32 %sha256ctx_state_2_2_1, i32 %sha256ctx_state_3_2_1, i32 %sha256ctx_state_4_2_1, i32 %sha256ctx_state_5_2_1, i32 %sha256ctx_state_6_2_1, i32 %sha256ctx_state_7_2_1, [64 x i8]* %seg_buf, i32 64) nounwind

ST_5: sha256ctx_datalen_2 (97)  [1/1] 0.00ns  loc: sha256.c:42
:15  %sha256ctx_datalen_2 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 0

ST_5: sha256ctx_bitlen_0 (98)  [1/1] 0.00ns  loc: sha256.c:42
:16  %sha256ctx_bitlen_0 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 1

ST_5: sha256ctx_bitlen_1 (99)  [1/1] 0.00ns  loc: sha256.c:42
:17  %sha256ctx_bitlen_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 2

ST_5: sha256ctx_state_0 (100)  [1/1] 0.00ns  loc: sha256.c:42
:18  %sha256ctx_state_0 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 3

ST_5: sha256ctx_state_1 (101)  [1/1] 0.00ns  loc: sha256.c:42
:19  %sha256ctx_state_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 4

ST_5: sha256ctx_state_2 (102)  [1/1] 0.00ns  loc: sha256.c:42
:20  %sha256ctx_state_2 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 5

ST_5: sha256ctx_state_3 (103)  [1/1] 0.00ns  loc: sha256.c:42
:21  %sha256ctx_state_3 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 6

ST_5: sha256ctx_state_4 (104)  [1/1] 0.00ns  loc: sha256.c:42
:22  %sha256ctx_state_4 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 7

ST_5: sha256ctx_state_5 (105)  [1/1] 0.00ns  loc: sha256.c:42
:23  %sha256ctx_state_5 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 8

ST_5: sha256ctx_state_6 (106)  [1/1] 0.00ns  loc: sha256.c:42
:24  %sha256ctx_state_6 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 9

ST_5: sha256ctx_state_7 (107)  [1/1] 0.00ns  loc: sha256.c:42
:25  %sha256ctx_state_7 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 10

ST_5: StgValue_123 (108)  [1/1] 1.59ns  loc: sha256.c:41
:26  store i32 %seg_offset_1, i32* %seg_offset

ST_5: StgValue_124 (109)  [1/1] 1.77ns  loc: sha256.c:42
:27  store i32 %sha256ctx_state_7, i32* %sha256ctx_state_7_2

ST_5: StgValue_125 (110)  [1/1] 1.77ns  loc: sha256.c:42
:28  store i32 %sha256ctx_state_6, i32* %sha256ctx_state_6_2

ST_5: StgValue_126 (111)  [1/1] 1.77ns  loc: sha256.c:42
:29  store i32 %sha256ctx_state_5, i32* %sha256ctx_state_5_2

ST_5: StgValue_127 (112)  [1/1] 1.77ns  loc: sha256.c:42
:30  store i32 %sha256ctx_state_4, i32* %sha256ctx_state_4_2

ST_5: StgValue_128 (113)  [1/1] 1.77ns  loc: sha256.c:42
:31  store i32 %sha256ctx_state_3, i32* %sha256ctx_state_3_2

ST_5: StgValue_129 (114)  [1/1] 1.77ns  loc: sha256.c:42
:32  store i32 %sha256ctx_state_2, i32* %sha256ctx_state_2_2

ST_5: StgValue_130 (115)  [1/1] 1.77ns  loc: sha256.c:42
:33  store i32 %sha256ctx_state_1, i32* %sha256ctx_state_1_2

ST_5: StgValue_131 (116)  [1/1] 1.77ns  loc: sha256.c:42
:34  store i32 %sha256ctx_state_0, i32* %sha256ctx_state_0_2

ST_5: StgValue_132 (117)  [1/1] 1.77ns  loc: sha256.c:42
:35  store i32 %sha256ctx_bitlen_1, i32* %sha256ctx_bitlen_1_2

ST_5: StgValue_133 (118)  [1/1] 1.77ns  loc: sha256.c:42
:36  store i32 %sha256ctx_bitlen_0, i32* %sha256ctx_bitlen_0_2

ST_5: StgValue_134 (119)  [1/1] 1.77ns  loc: sha256.c:42
:37  store i32 %sha256ctx_datalen_2, i32* %sha256ctx_datalen

ST_5: StgValue_135 (121)  [1/1] 0.00ns  loc: sha256.c:43
:39  br label %7

ST_5: call_ret1 (155)  [1/2] 0.00ns  loc: sha256.c:49
:11  %call_ret1 = call fastcc { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } @sha256_update([64 x i8]* %sha256ctx_data, i32 %sha256ctx_datalen_lo_1, i32 %sha256ctx_bitlen_0_1, i32 %sha256ctx_bitlen_1_1, i32 %sha256ctx_state_0_2_2, i32 %sha256ctx_state_1_2_2, i32 %sha256ctx_state_2_2_2, i32 %sha256ctx_state_3_2_2, i32 %sha256ctx_state_4_2_2, i32 %sha256ctx_state_5_2_2, i32 %sha256ctx_state_6_2_2, i32 %sha256ctx_state_7_2_2, [64 x i8]* %seg_buf, i32 %n_load) nounwind

ST_5: sha256ctx_datalen_1 (156)  [1/1] 0.00ns  loc: sha256.c:49
:12  %sha256ctx_datalen_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret1, 0

ST_5: sha256ctx_bitlen_0_1_10 (157)  [1/1] 0.00ns  loc: sha256.c:49
:13  %sha256ctx_bitlen_0_1_10 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret1, 1

ST_5: sha256ctx_bitlen_1_1_11 (158)  [1/1] 0.00ns  loc: sha256.c:49
:14  %sha256ctx_bitlen_1_1_11 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret1, 2

ST_5: sha256ctx_state_0_1 (159)  [1/1] 0.00ns  loc: sha256.c:49
:15  %sha256ctx_state_0_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret1, 3

ST_5: sha256ctx_state_1_1 (160)  [1/1] 0.00ns  loc: sha256.c:49
:16  %sha256ctx_state_1_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret1, 4

ST_5: sha256ctx_state_2_1 (161)  [1/1] 0.00ns  loc: sha256.c:49
:17  %sha256ctx_state_2_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret1, 5

ST_5: sha256ctx_state_3_1 (162)  [1/1] 0.00ns  loc: sha256.c:49
:18  %sha256ctx_state_3_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret1, 6

ST_5: sha256ctx_state_4_1 (163)  [1/1] 0.00ns  loc: sha256.c:49
:19  %sha256ctx_state_4_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret1, 7

ST_5: sha256ctx_state_5_1 (164)  [1/1] 0.00ns  loc: sha256.c:49
:20  %sha256ctx_state_5_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret1, 8

ST_5: sha256ctx_state_6_1 (165)  [1/1] 0.00ns  loc: sha256.c:49
:21  %sha256ctx_state_6_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret1, 9

ST_5: sha256ctx_state_7_1 (166)  [1/1] 0.00ns  loc: sha256.c:49
:22  %sha256ctx_state_7_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret1, 10

ST_5: StgValue_148 (167)  [1/1] 1.77ns  loc: sha256.c:49
:23  store i32 %sha256ctx_state_7_1, i32* %sha256ctx_state_7_2

ST_5: StgValue_149 (168)  [1/1] 1.77ns  loc: sha256.c:49
:24  store i32 %sha256ctx_state_6_1, i32* %sha256ctx_state_6_2

ST_5: StgValue_150 (169)  [1/1] 1.77ns  loc: sha256.c:49
:25  store i32 %sha256ctx_state_5_1, i32* %sha256ctx_state_5_2

ST_5: StgValue_151 (170)  [1/1] 1.77ns  loc: sha256.c:49
:26  store i32 %sha256ctx_state_4_1, i32* %sha256ctx_state_4_2

ST_5: StgValue_152 (171)  [1/1] 1.77ns  loc: sha256.c:49
:27  store i32 %sha256ctx_state_3_1, i32* %sha256ctx_state_3_2

ST_5: StgValue_153 (172)  [1/1] 1.77ns  loc: sha256.c:49
:28  store i32 %sha256ctx_state_2_1, i32* %sha256ctx_state_2_2

ST_5: StgValue_154 (173)  [1/1] 1.77ns  loc: sha256.c:49
:29  store i32 %sha256ctx_state_1_1, i32* %sha256ctx_state_1_2

ST_5: StgValue_155 (174)  [1/1] 1.77ns  loc: sha256.c:49
:30  store i32 %sha256ctx_state_0_1, i32* %sha256ctx_state_0_2

ST_5: StgValue_156 (175)  [1/1] 1.77ns  loc: sha256.c:49
:31  store i32 %sha256ctx_bitlen_1_1_11, i32* %sha256ctx_bitlen_1_2

ST_5: StgValue_157 (176)  [1/1] 1.77ns  loc: sha256.c:49
:32  store i32 %sha256ctx_bitlen_0_1_10, i32* %sha256ctx_bitlen_0_2

ST_5: StgValue_158 (177)  [1/1] 1.77ns  loc: sha256.c:49
:33  store i32 %sha256ctx_datalen_1, i32* %sha256ctx_datalen

ST_5: StgValue_159 (179)  [1/1] 0.00ns
:35  br label %7

ST_5: empty_12 (181)  [1/1] 0.00ns  loc: sha256.c:52
:0  %empty_12 = call i32 (...)* @_ssdm_op_SpecRegionEnd([12 x i8]* @p_str8, i32 %tmp_14) nounwind

ST_5: StgValue_161 (182)  [1/1] 0.00ns  loc: sha256.c:52
:1  br label %1


 <State 6>: 5.99ns
ST_6: i_1 (125)  [1/1] 0.00ns
.preheader:0  %i_1 = phi i6 [ %i_8, %5 ], [ 0, %.preheader.preheader ]

ST_6: i_1_cast4 (126)  [1/1] 0.00ns  loc: sha256.c:46
.preheader:1  %i_1_cast4 = zext i6 %i_1 to i10

ST_6: i_1_cast (127)  [1/1] 0.00ns  loc: sha256.c:46
.preheader:2  %i_1_cast = zext i6 %i_1 to i32

ST_6: exitcond4 (128)  [1/1] 3.26ns  loc: sha256.c:46
.preheader:3  %exitcond4 = icmp eq i32 %i_1_cast, %n_load

ST_6: StgValue_166 (129)  [1/1] 0.00ns
.preheader:4  call void (...)* @_ssdm_op_SpecLoopTripCount(i64 12, i64 63, i64 56)

ST_6: i_8 (130)  [1/1] 2.31ns  loc: sha256.c:46
.preheader:5  %i_8 = add i6 %i_1, 1

ST_6: StgValue_168 (131)  [1/1] 0.00ns  loc: sha256.c:46
.preheader:6  br i1 %exitcond4, label %6, label %5

ST_6: seg_offset_load_1 (133)  [1/1] 0.00ns  loc: sha256.c:33
:0  %seg_offset_load_1 = load i32* %seg_offset

ST_6: tmp2 (134)  [1/1] 1.86ns  loc: sha256.c:46
:1  %tmp2 = add i10 %tmp_96, %i_1_cast4

ST_6: tmp_98 (135)  [1/1] 0.00ns  loc: sha256.c:33
:2  %tmp_98 = trunc i32 %seg_offset_load_1 to i10

ST_6: sum2 (136)  [1/1] 1.86ns  loc: sha256.c:33
:3  %sum2 = add i10 %tmp_98, %tmp2

ST_6: sum2_cast (137)  [1/1] 0.00ns  loc: sha256.c:33
:4  %sum2_cast = zext i10 %sum2 to i32

ST_6: data_addr_4 (138)  [1/1] 0.00ns  loc: sha256.c:48
:5  %data_addr_4 = getelementptr [256 x i8]* %data, i32 0, i32 %sum2_cast

ST_6: data_load_4 (139)  [2/2] 2.27ns  loc: sha256.c:48
:6  %data_load_4 = load i8* %data_addr_4, align 1

ST_6: sha256ctx_datalen_lo_1 (144)  [1/1] 0.00ns  loc: sha256.c:49
:0  %sha256ctx_datalen_lo_1 = load i32* %sha256ctx_datalen

ST_6: sha256ctx_bitlen_0_1 (145)  [1/1] 0.00ns  loc: sha256.c:49
:1  %sha256ctx_bitlen_0_1 = load i32* %sha256ctx_bitlen_0_2

ST_6: sha256ctx_bitlen_1_1 (146)  [1/1] 0.00ns  loc: sha256.c:49
:2  %sha256ctx_bitlen_1_1 = load i32* %sha256ctx_bitlen_1_2

ST_6: sha256ctx_state_0_2_2 (147)  [1/1] 0.00ns  loc: sha256.c:49
:3  %sha256ctx_state_0_2_2 = load i32* %sha256ctx_state_0_2

ST_6: sha256ctx_state_1_2_2 (148)  [1/1] 0.00ns  loc: sha256.c:49
:4  %sha256ctx_state_1_2_2 = load i32* %sha256ctx_state_1_2

ST_6: sha256ctx_state_2_2_2 (149)  [1/1] 0.00ns  loc: sha256.c:49
:5  %sha256ctx_state_2_2_2 = load i32* %sha256ctx_state_2_2

ST_6: sha256ctx_state_3_2_2 (150)  [1/1] 0.00ns  loc: sha256.c:49
:6  %sha256ctx_state_3_2_2 = load i32* %sha256ctx_state_3_2

ST_6: sha256ctx_state_4_2_2 (151)  [1/1] 0.00ns  loc: sha256.c:49
:7  %sha256ctx_state_4_2_2 = load i32* %sha256ctx_state_4_2

ST_6: sha256ctx_state_5_2_2 (152)  [1/1] 0.00ns  loc: sha256.c:49
:8  %sha256ctx_state_5_2_2 = load i32* %sha256ctx_state_5_2

ST_6: sha256ctx_state_6_2_2 (153)  [1/1] 0.00ns  loc: sha256.c:49
:9  %sha256ctx_state_6_2_2 = load i32* %sha256ctx_state_6_2

ST_6: sha256ctx_state_7_2_2 (154)  [1/1] 0.00ns  loc: sha256.c:49
:10  %sha256ctx_state_7_2_2 = load i32* %sha256ctx_state_7_2

ST_6: call_ret1 (155)  [2/2] 3.18ns  loc: sha256.c:49
:11  %call_ret1 = call fastcc { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } @sha256_update([64 x i8]* %sha256ctx_data, i32 %sha256ctx_datalen_lo_1, i32 %sha256ctx_bitlen_0_1, i32 %sha256ctx_bitlen_1_1, i32 %sha256ctx_state_0_2_2, i32 %sha256ctx_state_1_2_2, i32 %sha256ctx_state_2_2_2, i32 %sha256ctx_state_3_2_2, i32 %sha256ctx_state_4_2_2, i32 %sha256ctx_state_5_2_2, i32 %sha256ctx_state_6_2_2, i32 %sha256ctx_state_7_2_2, [64 x i8]* %seg_buf, i32 %n_load) nounwind

ST_6: StgValue_188 (178)  [1/1] 1.77ns
:34  store i32 0, i32* %n


 <State 7>: 4.59ns
ST_7: data_load_4 (139)  [1/2] 2.27ns  loc: sha256.c:48
:6  %data_load_4 = load i8* %data_addr_4, align 1

ST_7: seg_buf_addr_2 (140)  [1/1] 0.00ns  loc: sha256.c:48
:7  %seg_buf_addr_2 = getelementptr inbounds [64 x i8]* %seg_buf, i32 0, i32 %i_1_cast

ST_7: StgValue_191 (141)  [1/1] 2.32ns  loc: sha256.c:48
:8  store i8 %data_load_4, i8* %seg_buf_addr_2, align 1

ST_7: StgValue_192 (142)  [1/1] 0.00ns  loc: sha256.c:46
:9  br label %.preheader


 <State 8>: 1.59ns
ST_8: StgValue_193 (195)  [1/2] 0.00ns  loc: sha256.c:55
:11  call fastcc void @sha256_final([64 x i8]* %sha256ctx_data, i32 %sha256ctx_datalen_lo_2, i32 %sha256ctx_bitlen_0_2_13, i32 %sha256ctx_bitlen_1_2_14, i32 %sha256ctx_state_0_2_3, i32 %sha256ctx_state_1_2_3, i32 %sha256ctx_state_2_2_3, i32 %sha256ctx_state_3_2_3, i32 %sha256ctx_state_4_2_3, i32 %sha256ctx_state_5_2_3, i32 %sha256ctx_state_6_2_3, i32 %sha256ctx_state_7_2_3, [64 x i8]* %seg_buf) nounwind

ST_8: StgValue_194 (196)  [1/1] 1.59ns  loc: sha256.c:57
:12  br label %9


 <State 9>: 3.88ns
ST_9: i_2 (198)  [1/1] 0.00ns
:0  %i_2 = phi i6 [ 0, %8 ], [ %i, %10 ]

ST_9: i_2_cast3 (199)  [1/1] 0.00ns  loc: sha256.c:57
:1  %i_2_cast3 = zext i6 %i_2 to i32

ST_9: exitcond (200)  [1/1] 3.88ns  loc: sha256.c:57
:2  %exitcond = icmp eq i6 %i_2, -32

ST_9: StgValue_198 (201)  [1/1] 0.00ns
:3  call void (...)* @_ssdm_op_SpecLoopTripCount(i64 32, i64 32, i64 32)

ST_9: i (202)  [1/1] 2.31ns  loc: sha256.c:57
:4  %i = add i6 %i_2, 1

ST_9: StgValue_200 (203)  [1/1] 0.00ns  loc: sha256.c:57
:5  br i1 %exitcond, label %11, label %10

ST_9: seg_buf_addr (205)  [1/1] 0.00ns  loc: sha256.c:60
:0  %seg_buf_addr = getelementptr inbounds [64 x i8]* %seg_buf, i32 0, i32 %i_2_cast3

ST_9: seg_buf_load (206)  [2/2] 2.32ns  loc: sha256.c:60
:1  %seg_buf_load = load i8* %seg_buf_addr, align 1

ST_9: StgValue_203 (211)  [1/1] 0.00ns  loc: sha256.c:62
:0  ret void


 <State 10>: 4.64ns
ST_10: seg_buf_load (206)  [1/2] 2.32ns  loc: sha256.c:60
:1  %seg_buf_load = load i8* %seg_buf_addr, align 1

ST_10: digest_addr (207)  [1/1] 0.00ns  loc: sha256.c:60
:2  %digest_addr = getelementptr [32 x i8]* %digest, i32 0, i32 %i_2_cast3

ST_10: StgValue_206 (208)  [1/1] 2.32ns  loc: sha256.c:60
:3  store i8 %seg_buf_load, i8* %digest_addr, align 1

ST_10: StgValue_207 (209)  [1/1] 0.00ns  loc: sha256.c:57
:4  br label %9



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 2.77ns
The critical path consists of the following:
	s_axi read on port 'bytes' [24]  (1 ns)
	'store' operation (sha256.c:11) of variable 'bytes' on local variable 'bytes' [48]  (1.77 ns)

 <State 2>: 3.26ns
The critical path consists of the following:
	'load' operation ('n_load', sha256.c:40) on local variable 'bytes' [51]  (0 ns)
	'icmp' operation ('tmp', sha256.c:33) [52]  (3.26 ns)

 <State 3>: 5.99ns
The critical path consists of the following:
	'phi' operation ('i') with incoming values : ('i', sha256.c:38) [63]  (0 ns)
	'add' operation ('tmp1', sha256.c:38) [72]  (1.86 ns)
	'add' operation ('sum', sha256.c:33) [74]  (1.86 ns)
	'getelementptr' operation ('data_addr', sha256.c:39) [76]  (0 ns)
	'load' operation ('data_load', sha256.c:39) on array 'data' [77]  (2.27 ns)

 <State 4>: 4.59ns
The critical path consists of the following:
	'load' operation ('data_load', sha256.c:39) on array 'data' [77]  (2.27 ns)
	'store' operation (sha256.c:39) of variable 'data_load', sha256.c:39 on array 'seg_buf', sha256.c:23 [79]  (2.32 ns)

 <State 5>: 4.49ns
The critical path consists of the following:
	'load' operation ('seg_offset_load', sha256.c:41) on local variable 'seg_offset' [93]  (0 ns)
	'add' operation ('seg_offset', sha256.c:41) [95]  (2.9 ns)
	'store' operation (sha256.c:41) of variable 'seg_offset', sha256.c:41 on local variable 'seg_offset' [108]  (1.59 ns)

 <State 6>: 5.99ns
The critical path consists of the following:
	'phi' operation ('i') with incoming values : ('i', sha256.c:46) [125]  (0 ns)
	'add' operation ('tmp2', sha256.c:46) [134]  (1.86 ns)
	'add' operation ('sum2', sha256.c:33) [136]  (1.86 ns)
	'getelementptr' operation ('data_addr_4', sha256.c:48) [138]  (0 ns)
	'load' operation ('data_load_4', sha256.c:48) on array 'data' [139]  (2.27 ns)

 <State 7>: 4.59ns
The critical path consists of the following:
	'load' operation ('data_load_4', sha256.c:48) on array 'data' [139]  (2.27 ns)
	'store' operation (sha256.c:48) of variable 'data_load_4', sha256.c:48 on array 'seg_buf', sha256.c:23 [141]  (2.32 ns)

 <State 8>: 1.59ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('i') with incoming values : ('i', sha256.c:57) [198]  (1.59 ns)

 <State 9>: 3.88ns
The critical path consists of the following:
	'phi' operation ('i') with incoming values : ('i', sha256.c:57) [198]  (0 ns)
	'icmp' operation ('exitcond', sha256.c:57) [200]  (3.88 ns)

 <State 10>: 4.64ns
The critical path consists of the following:
	'load' operation ('seg_buf_load', sha256.c:60) on array 'seg_buf', sha256.c:23 [206]  (2.32 ns)
	'store' operation (sha256.c:60) of variable 'seg_buf_load', sha256.c:60 on array 'digest' [208]  (2.32 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
