// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sha256,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.337500,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=12,HLS_SYN_DSP=0,HLS_SYN_FF=9205,HLS_SYN_LUT=6555}" *)

module sha256 (
        ap_clk,
        ap_rst_n,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 41'd1;
parameter    ap_ST_fsm_state2 = 41'd2;
parameter    ap_ST_fsm_state3 = 41'd4;
parameter    ap_ST_fsm_state4 = 41'd8;
parameter    ap_ST_fsm_state5 = 41'd16;
parameter    ap_ST_fsm_state6 = 41'd32;
parameter    ap_ST_fsm_state7 = 41'd64;
parameter    ap_ST_fsm_state8 = 41'd128;
parameter    ap_ST_fsm_state9 = 41'd256;
parameter    ap_ST_fsm_state10 = 41'd512;
parameter    ap_ST_fsm_state11 = 41'd1024;
parameter    ap_ST_fsm_state12 = 41'd2048;
parameter    ap_ST_fsm_state13 = 41'd4096;
parameter    ap_ST_fsm_state14 = 41'd8192;
parameter    ap_ST_fsm_state15 = 41'd16384;
parameter    ap_ST_fsm_state16 = 41'd32768;
parameter    ap_ST_fsm_state17 = 41'd65536;
parameter    ap_ST_fsm_state18 = 41'd131072;
parameter    ap_ST_fsm_state19 = 41'd262144;
parameter    ap_ST_fsm_state20 = 41'd524288;
parameter    ap_ST_fsm_state21 = 41'd1048576;
parameter    ap_ST_fsm_state22 = 41'd2097152;
parameter    ap_ST_fsm_state23 = 41'd4194304;
parameter    ap_ST_fsm_state24 = 41'd8388608;
parameter    ap_ST_fsm_state25 = 41'd16777216;
parameter    ap_ST_fsm_state26 = 41'd33554432;
parameter    ap_ST_fsm_state27 = 41'd67108864;
parameter    ap_ST_fsm_state28 = 41'd134217728;
parameter    ap_ST_fsm_state29 = 41'd268435456;
parameter    ap_ST_fsm_state30 = 41'd536870912;
parameter    ap_ST_fsm_state31 = 41'd1073741824;
parameter    ap_ST_fsm_state32 = 41'd2147483648;
parameter    ap_ST_fsm_state33 = 41'd4294967296;
parameter    ap_ST_fsm_state34 = 41'd8589934592;
parameter    ap_ST_fsm_state35 = 41'd17179869184;
parameter    ap_ST_fsm_state36 = 41'd34359738368;
parameter    ap_ST_fsm_state37 = 41'd68719476736;
parameter    ap_ST_fsm_state38 = 41'd137438953472;
parameter    ap_ST_fsm_state39 = 41'd274877906944;
parameter    ap_ST_fsm_state40 = 41'd549755813888;
parameter    ap_ST_fsm_state41 = 41'd1099511627776;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 10;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [40:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [7:0] data_address0;
reg    data_ce0;
wire   [7:0] data_q0;
wire   [31:0] base_offset;
wire   [31:0] bytes;
reg   [4:0] digest_address0;
reg    digest_ce0;
reg    digest_we0;
reg   [31:0] reg_1033;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_1171_p2;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond5_fu_1201_p2;
reg   [31:0] reg_1039;
reg   [31:0] reg_1045;
reg   [31:0] reg_1051;
reg   [31:0] reg_1057;
reg   [31:0] reg_1063;
reg   [31:0] reg_1069;
reg   [31:0] reg_1075;
reg   [31:0] reg_1081;
reg   [31:0] reg_1087;
reg   [31:0] reg_1093;
wire   [9:0] tmp_96_fu_1099_p1;
reg   [9:0] tmp_96_reg_1390;
reg   [31:0] n_load_reg_1396;
wire   [0:0] icmp_fu_1187_p2;
reg   [0:0] icmp_reg_1406;
wire   [31:0] i9_cast4_fu_1197_p1;
reg   [31:0] i9_cast4_reg_1410;
wire   [6:0] i_fu_1207_p2;
reg   [6:0] i_reg_1418;
wire   [31:0] i_1_cast_fu_1258_p1;
reg   [31:0] i_1_cast_reg_1428;
wire    ap_CS_fsm_state6;
wire   [5:0] i_7_fu_1267_p2;
reg   [5:0] i_7_reg_1436;
wire   [0:0] exitcond4_fu_1262_p2;
reg   [31:0] sha256ctx_datalen_lo_1_reg_1446;
reg   [31:0] sha256ctx_bitlen_0_1_reg_1451;
reg   [31:0] sha256ctx_bitlen_1_1_reg_1456;
reg   [31:0] sha256ctx_state_0_2_2_reg_1461;
reg   [31:0] sha256ctx_state_1_2_2_reg_1466;
reg   [31:0] sha256ctx_state_2_2_2_reg_1471;
reg   [31:0] sha256ctx_state_3_2_2_reg_1476;
reg   [31:0] sha256ctx_state_4_2_2_reg_1481;
reg   [31:0] sha256ctx_state_5_2_2_reg_1486;
reg   [31:0] sha256ctx_state_6_2_2_reg_1491;
reg   [31:0] sha256ctx_state_7_2_2_reg_1496;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state40;
reg   [5:0] seg_buf_address0;
reg    seg_buf_ce0;
reg    seg_buf_we0;
reg   [7:0] seg_buf_d0;
wire   [7:0] seg_buf_q0;
reg    seg_buf_ce1;
reg    seg_buf_we1;
reg   [5:0] sha256ctx_data_address0;
reg    sha256ctx_data_ce0;
reg    sha256ctx_data_we0;
reg   [7:0] sha256ctx_data_d0;
wire   [7:0] sha256ctx_data_q0;
reg   [5:0] sha256ctx_data_address1;
reg    sha256ctx_data_ce1;
reg    sha256ctx_data_we1;
wire   [7:0] sha256ctx_data_q1;
wire    grp_sha256_final_fu_836_ap_start;
wire    grp_sha256_final_fu_836_ap_done;
wire    grp_sha256_final_fu_836_ap_idle;
wire    grp_sha256_final_fu_836_ap_ready;
wire   [5:0] grp_sha256_final_fu_836_ctx_data_address0;
wire    grp_sha256_final_fu_836_ctx_data_ce0;
wire    grp_sha256_final_fu_836_ctx_data_we0;
wire   [7:0] grp_sha256_final_fu_836_ctx_data_d0;
wire   [5:0] grp_sha256_final_fu_836_ctx_data_address1;
wire    grp_sha256_final_fu_836_ctx_data_ce1;
wire    grp_sha256_final_fu_836_ctx_data_we1;
wire   [7:0] grp_sha256_final_fu_836_ctx_data_d1;
wire   [5:0] grp_sha256_final_fu_836_hash_address0;
wire    grp_sha256_final_fu_836_hash_ce0;
wire    grp_sha256_final_fu_836_hash_we0;
wire   [7:0] grp_sha256_final_fu_836_hash_d0;
wire   [5:0] grp_sha256_final_fu_836_hash_address1;
wire    grp_sha256_final_fu_836_hash_ce1;
wire    grp_sha256_final_fu_836_hash_we1;
wire   [7:0] grp_sha256_final_fu_836_hash_d1;
wire    grp_sha256_update_fu_855_ap_start;
wire    grp_sha256_update_fu_855_ap_done;
wire    grp_sha256_update_fu_855_ap_idle;
wire    grp_sha256_update_fu_855_ap_ready;
wire   [5:0] grp_sha256_update_fu_855_ctx_data_address0;
wire    grp_sha256_update_fu_855_ctx_data_ce0;
wire    grp_sha256_update_fu_855_ctx_data_we0;
wire   [7:0] grp_sha256_update_fu_855_ctx_data_d0;
wire   [5:0] grp_sha256_update_fu_855_ctx_data_address1;
wire    grp_sha256_update_fu_855_ctx_data_ce1;
reg   [31:0] grp_sha256_update_fu_855_ctx_datalen_read;
reg   [31:0] grp_sha256_update_fu_855_p_read1;
reg   [31:0] grp_sha256_update_fu_855_p_read2;
reg   [31:0] grp_sha256_update_fu_855_p_read3;
reg   [31:0] grp_sha256_update_fu_855_p_read4;
reg   [31:0] grp_sha256_update_fu_855_p_read5;
reg   [31:0] grp_sha256_update_fu_855_p_read6;
reg   [31:0] grp_sha256_update_fu_855_p_read7;
reg   [31:0] grp_sha256_update_fu_855_p_read8;
reg   [31:0] grp_sha256_update_fu_855_p_read9;
reg   [31:0] grp_sha256_update_fu_855_p_read10;
wire   [5:0] grp_sha256_update_fu_855_data_address0;
wire    grp_sha256_update_fu_855_data_ce0;
reg   [31:0] grp_sha256_update_fu_855_len;
wire   [31:0] grp_sha256_update_fu_855_ap_return_0;
wire   [31:0] grp_sha256_update_fu_855_ap_return_1;
wire   [31:0] grp_sha256_update_fu_855_ap_return_2;
wire   [31:0] grp_sha256_update_fu_855_ap_return_3;
wire   [31:0] grp_sha256_update_fu_855_ap_return_4;
wire   [31:0] grp_sha256_update_fu_855_ap_return_5;
wire   [31:0] grp_sha256_update_fu_855_ap_return_6;
wire   [31:0] grp_sha256_update_fu_855_ap_return_7;
wire   [31:0] grp_sha256_update_fu_855_ap_return_8;
wire   [31:0] grp_sha256_update_fu_855_ap_return_9;
wire   [31:0] grp_sha256_update_fu_855_ap_return_10;
reg   [6:0] i9_reg_814;
wire    ap_CS_fsm_state4;
reg   [5:0] i_1_reg_825;
wire    ap_CS_fsm_state7;
reg    ap_reg_grp_sha256_final_fu_836_ap_start;
wire    ap_CS_fsm_state8;
reg    ap_reg_grp_sha256_update_fu_855_ap_start;
wire    ap_CS_fsm_state5;
wire   [31:0] sum_cast_fu_1228_p1;
wire   [31:0] sum2_cast_fu_1288_p1;
wire    ap_CS_fsm_state41;
reg   [31:0] n_fu_154;
wire   [31:0] n_1_fu_1233_p2;
reg   [31:0] sha256ctx_datalen_fu_158;
reg    ap_block_state5_on_subcall_done;
reg   [31:0] sha256ctx_bitlen_0_2_fu_162;
reg   [31:0] sha256ctx_bitlen_1_2_fu_166;
reg   [31:0] sha256ctx_state_0_2_fu_170;
reg   [31:0] sha256ctx_state_1_2_fu_174;
reg   [31:0] sha256ctx_state_2_2_fu_178;
reg   [31:0] sha256ctx_state_3_2_fu_182;
reg   [31:0] sha256ctx_state_4_2_fu_186;
reg   [31:0] sha256ctx_state_5_2_fu_190;
reg   [31:0] sha256ctx_state_6_2_fu_194;
reg   [31:0] sha256ctx_state_7_2_fu_198;
reg   [31:0] seg_offset_fu_202;
wire   [31:0] seg_offset_1_fu_1243_p2;
wire   [25:0] tmp_97_fu_1177_p4;
wire   [9:0] i9_cast5_fu_1193_p1;
wire   [9:0] tmp_99_fu_1218_p1;
wire   [9:0] tmp1_fu_1213_p2;
wire   [9:0] sum_fu_1222_p2;
wire   [9:0] i_1_cast3_fu_1254_p1;
wire   [9:0] tmp_98_fu_1278_p1;
wire   [9:0] tmp2_fu_1273_p2;
wire   [9:0] sum2_fu_1282_p2;
reg   [40:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 41'd1;
#0 ap_reg_grp_sha256_final_fu_836_ap_start = 1'b0;
#0 ap_reg_grp_sha256_update_fu_855_ap_start = 1'b0;
end

sha256_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
sha256_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .data_address0(data_address0),
    .data_ce0(data_ce0),
    .data_q0(data_q0),
    .base_offset(base_offset),
    .bytes(bytes),
    .digest_address0(digest_address0),
    .digest_ce0(digest_ce0),
    .digest_we0(digest_we0),
    .digest_d0(seg_buf_q0)
);

sha256_seg_buf #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
seg_buf_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(seg_buf_address0),
    .ce0(seg_buf_ce0),
    .we0(seg_buf_we0),
    .d0(seg_buf_d0),
    .q0(seg_buf_q0),
    .address1(grp_sha256_final_fu_836_hash_address1),
    .ce1(seg_buf_ce1),
    .we1(seg_buf_we1),
    .d1(grp_sha256_final_fu_836_hash_d1)
);

sha256_sha256ctx_bkb #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
sha256ctx_data_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sha256ctx_data_address0),
    .ce0(sha256ctx_data_ce0),
    .we0(sha256ctx_data_we0),
    .d0(sha256ctx_data_d0),
    .q0(sha256ctx_data_q0),
    .address1(sha256ctx_data_address1),
    .ce1(sha256ctx_data_ce1),
    .we1(sha256ctx_data_we1),
    .d1(grp_sha256_final_fu_836_ctx_data_d1),
    .q1(sha256ctx_data_q1)
);

sha256_final grp_sha256_final_fu_836(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_sha256_final_fu_836_ap_start),
    .ap_done(grp_sha256_final_fu_836_ap_done),
    .ap_idle(grp_sha256_final_fu_836_ap_idle),
    .ap_ready(grp_sha256_final_fu_836_ap_ready),
    .ctx_data_address0(grp_sha256_final_fu_836_ctx_data_address0),
    .ctx_data_ce0(grp_sha256_final_fu_836_ctx_data_ce0),
    .ctx_data_we0(grp_sha256_final_fu_836_ctx_data_we0),
    .ctx_data_d0(grp_sha256_final_fu_836_ctx_data_d0),
    .ctx_data_q0(sha256ctx_data_q0),
    .ctx_data_address1(grp_sha256_final_fu_836_ctx_data_address1),
    .ctx_data_ce1(grp_sha256_final_fu_836_ctx_data_ce1),
    .ctx_data_we1(grp_sha256_final_fu_836_ctx_data_we1),
    .ctx_data_d1(grp_sha256_final_fu_836_ctx_data_d1),
    .ctx_data_q1(sha256ctx_data_q1),
    .ctx_datalen_read(reg_1033),
    .ctx_bitlen_0_read(reg_1039),
    .p_read3(reg_1045),
    .p_read1(reg_1051),
    .p_read2(reg_1057),
    .p_read4(reg_1063),
    .p_read5(reg_1069),
    .p_read6(reg_1075),
    .p_read7(reg_1081),
    .p_read8(reg_1087),
    .p_read9(reg_1093),
    .hash_address0(grp_sha256_final_fu_836_hash_address0),
    .hash_ce0(grp_sha256_final_fu_836_hash_ce0),
    .hash_we0(grp_sha256_final_fu_836_hash_we0),
    .hash_d0(grp_sha256_final_fu_836_hash_d0),
    .hash_address1(grp_sha256_final_fu_836_hash_address1),
    .hash_ce1(grp_sha256_final_fu_836_hash_ce1),
    .hash_we1(grp_sha256_final_fu_836_hash_we1),
    .hash_d1(grp_sha256_final_fu_836_hash_d1)
);

sha256_update grp_sha256_update_fu_855(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_sha256_update_fu_855_ap_start),
    .ap_done(grp_sha256_update_fu_855_ap_done),
    .ap_idle(grp_sha256_update_fu_855_ap_idle),
    .ap_ready(grp_sha256_update_fu_855_ap_ready),
    .ctx_data_address0(grp_sha256_update_fu_855_ctx_data_address0),
    .ctx_data_ce0(grp_sha256_update_fu_855_ctx_data_ce0),
    .ctx_data_we0(grp_sha256_update_fu_855_ctx_data_we0),
    .ctx_data_d0(grp_sha256_update_fu_855_ctx_data_d0),
    .ctx_data_q0(sha256ctx_data_q0),
    .ctx_data_address1(grp_sha256_update_fu_855_ctx_data_address1),
    .ctx_data_ce1(grp_sha256_update_fu_855_ctx_data_ce1),
    .ctx_data_q1(sha256ctx_data_q1),
    .ctx_datalen_read(grp_sha256_update_fu_855_ctx_datalen_read),
    .p_read1(grp_sha256_update_fu_855_p_read1),
    .p_read2(grp_sha256_update_fu_855_p_read2),
    .p_read3(grp_sha256_update_fu_855_p_read3),
    .p_read4(grp_sha256_update_fu_855_p_read4),
    .p_read5(grp_sha256_update_fu_855_p_read5),
    .p_read6(grp_sha256_update_fu_855_p_read6),
    .p_read7(grp_sha256_update_fu_855_p_read7),
    .p_read8(grp_sha256_update_fu_855_p_read8),
    .p_read9(grp_sha256_update_fu_855_p_read9),
    .p_read10(grp_sha256_update_fu_855_p_read10),
    .data_address0(grp_sha256_update_fu_855_data_address0),
    .data_ce0(grp_sha256_update_fu_855_data_ce0),
    .data_q0(seg_buf_q0),
    .len(grp_sha256_update_fu_855_len),
    .ap_return_0(grp_sha256_update_fu_855_ap_return_0),
    .ap_return_1(grp_sha256_update_fu_855_ap_return_1),
    .ap_return_2(grp_sha256_update_fu_855_ap_return_2),
    .ap_return_3(grp_sha256_update_fu_855_ap_return_3),
    .ap_return_4(grp_sha256_update_fu_855_ap_return_4),
    .ap_return_5(grp_sha256_update_fu_855_ap_return_5),
    .ap_return_6(grp_sha256_update_fu_855_ap_return_6),
    .ap_return_7(grp_sha256_update_fu_855_ap_return_7),
    .ap_return_8(grp_sha256_update_fu_855_ap_return_8),
    .ap_return_9(grp_sha256_update_fu_855_ap_return_9),
    .ap_return_10(grp_sha256_update_fu_855_ap_return_10)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_sha256_final_fu_836_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_1171_p2 == 1'd1))) begin
            ap_reg_grp_sha256_final_fu_836_ap_start <= 1'b1;
        end else if ((1'b1 == grp_sha256_final_fu_836_ap_ready)) begin
            ap_reg_grp_sha256_final_fu_836_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_sha256_update_fu_855_ap_start <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state3) & (1'd1 == exitcond5_fu_1201_p2)) | ((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond4_fu_1262_p2)))) begin
            ap_reg_grp_sha256_update_fu_855_ap_start <= 1'b1;
        end else if ((1'b1 == grp_sha256_update_fu_855_ap_ready)) begin
            ap_reg_grp_sha256_update_fu_855_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_1171_p2 == 1'd0) & (icmp_fu_1187_p2 == 1'd0))) begin
        i9_reg_814 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        i9_reg_814 <= i_reg_1418;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_1171_p2 == 1'd0) & (1'd1 == icmp_fu_1187_p2))) begin
        i_1_reg_825 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        i_1_reg_825 <= i_7_reg_1436;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond4_fu_1262_p2))) begin
        n_fu_154 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == exitcond5_fu_1201_p2))) begin
        n_fu_154 <= n_1_fu_1233_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        n_fu_154 <= bytes;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_reg_1406 == 1'd0) & (ap_block_state5_on_subcall_done == 1'b0))) begin
        seg_offset_fu_202 <= seg_offset_1_fu_1243_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        seg_offset_fu_202 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (icmp_reg_1406 == 1'd0) & (ap_block_state5_on_subcall_done == 1'b0)) | ((1'b1 == ap_CS_fsm_state5) & (1'd1 == icmp_reg_1406) & (ap_block_state5_on_subcall_done == 1'b0)))) begin
        sha256ctx_bitlen_0_2_fu_162 <= grp_sha256_update_fu_855_ap_return_1;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sha256ctx_bitlen_0_2_fu_162 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (icmp_reg_1406 == 1'd0) & (ap_block_state5_on_subcall_done == 1'b0)) | ((1'b1 == ap_CS_fsm_state5) & (1'd1 == icmp_reg_1406) & (ap_block_state5_on_subcall_done == 1'b0)))) begin
        sha256ctx_bitlen_1_2_fu_166 <= grp_sha256_update_fu_855_ap_return_2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sha256ctx_bitlen_1_2_fu_166 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (icmp_reg_1406 == 1'd0) & (ap_block_state5_on_subcall_done == 1'b0)) | ((1'b1 == ap_CS_fsm_state5) & (1'd1 == icmp_reg_1406) & (ap_block_state5_on_subcall_done == 1'b0)))) begin
        sha256ctx_datalen_fu_158 <= grp_sha256_update_fu_855_ap_return_0;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sha256ctx_datalen_fu_158 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (icmp_reg_1406 == 1'd0) & (ap_block_state5_on_subcall_done == 1'b0)) | ((1'b1 == ap_CS_fsm_state5) & (1'd1 == icmp_reg_1406) & (ap_block_state5_on_subcall_done == 1'b0)))) begin
        sha256ctx_state_0_2_fu_170 <= grp_sha256_update_fu_855_ap_return_3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sha256ctx_state_0_2_fu_170 <= 32'd1779033703;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (icmp_reg_1406 == 1'd0) & (ap_block_state5_on_subcall_done == 1'b0)) | ((1'b1 == ap_CS_fsm_state5) & (1'd1 == icmp_reg_1406) & (ap_block_state5_on_subcall_done == 1'b0)))) begin
        sha256ctx_state_1_2_fu_174 <= grp_sha256_update_fu_855_ap_return_4;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sha256ctx_state_1_2_fu_174 <= 32'd3144134277;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (icmp_reg_1406 == 1'd0) & (ap_block_state5_on_subcall_done == 1'b0)) | ((1'b1 == ap_CS_fsm_state5) & (1'd1 == icmp_reg_1406) & (ap_block_state5_on_subcall_done == 1'b0)))) begin
        sha256ctx_state_2_2_fu_178 <= grp_sha256_update_fu_855_ap_return_5;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sha256ctx_state_2_2_fu_178 <= 32'd1013904242;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (icmp_reg_1406 == 1'd0) & (ap_block_state5_on_subcall_done == 1'b0)) | ((1'b1 == ap_CS_fsm_state5) & (1'd1 == icmp_reg_1406) & (ap_block_state5_on_subcall_done == 1'b0)))) begin
        sha256ctx_state_3_2_fu_182 <= grp_sha256_update_fu_855_ap_return_6;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sha256ctx_state_3_2_fu_182 <= 32'd2773480762;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (icmp_reg_1406 == 1'd0) & (ap_block_state5_on_subcall_done == 1'b0)) | ((1'b1 == ap_CS_fsm_state5) & (1'd1 == icmp_reg_1406) & (ap_block_state5_on_subcall_done == 1'b0)))) begin
        sha256ctx_state_4_2_fu_186 <= grp_sha256_update_fu_855_ap_return_7;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sha256ctx_state_4_2_fu_186 <= 32'd1359893119;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (icmp_reg_1406 == 1'd0) & (ap_block_state5_on_subcall_done == 1'b0)) | ((1'b1 == ap_CS_fsm_state5) & (1'd1 == icmp_reg_1406) & (ap_block_state5_on_subcall_done == 1'b0)))) begin
        sha256ctx_state_5_2_fu_190 <= grp_sha256_update_fu_855_ap_return_8;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sha256ctx_state_5_2_fu_190 <= 32'd2600822924;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (icmp_reg_1406 == 1'd0) & (ap_block_state5_on_subcall_done == 1'b0)) | ((1'b1 == ap_CS_fsm_state5) & (1'd1 == icmp_reg_1406) & (ap_block_state5_on_subcall_done == 1'b0)))) begin
        sha256ctx_state_6_2_fu_194 <= grp_sha256_update_fu_855_ap_return_9;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sha256ctx_state_6_2_fu_194 <= 32'd528734635;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (icmp_reg_1406 == 1'd0) & (ap_block_state5_on_subcall_done == 1'b0)) | ((1'b1 == ap_CS_fsm_state5) & (1'd1 == icmp_reg_1406) & (ap_block_state5_on_subcall_done == 1'b0)))) begin
        sha256ctx_state_7_2_fu_198 <= grp_sha256_update_fu_855_ap_return_10;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sha256ctx_state_7_2_fu_198 <= 32'd1541459225;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i9_cast4_reg_1410[6 : 0] <= i9_cast4_fu_1197_p1[6 : 0];
        i_reg_1418 <= i_fu_1207_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_1_cast_reg_1428[5 : 0] <= i_1_cast_fu_1258_p1[5 : 0];
        i_7_reg_1436 <= i_7_fu_1267_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_1171_p2 == 1'd0))) begin
        icmp_reg_1406 <= icmp_fu_1187_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        n_load_reg_1396 <= n_fu_154;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (tmp_fu_1171_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state3) & (1'd1 == exitcond5_fu_1201_p2)))) begin
        reg_1033 <= sha256ctx_datalen_fu_158;
        reg_1039 <= sha256ctx_bitlen_0_2_fu_162;
        reg_1045 <= sha256ctx_bitlen_1_2_fu_166;
        reg_1051 <= sha256ctx_state_0_2_fu_170;
        reg_1057 <= sha256ctx_state_1_2_fu_174;
        reg_1063 <= sha256ctx_state_2_2_fu_178;
        reg_1069 <= sha256ctx_state_3_2_fu_182;
        reg_1075 <= sha256ctx_state_4_2_fu_186;
        reg_1081 <= sha256ctx_state_5_2_fu_190;
        reg_1087 <= sha256ctx_state_6_2_fu_194;
        reg_1093 <= sha256ctx_state_7_2_fu_198;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond4_fu_1262_p2))) begin
        sha256ctx_bitlen_0_1_reg_1451 <= sha256ctx_bitlen_0_2_fu_162;
        sha256ctx_bitlen_1_1_reg_1456 <= sha256ctx_bitlen_1_2_fu_166;
        sha256ctx_datalen_lo_1_reg_1446 <= sha256ctx_datalen_fu_158;
        sha256ctx_state_0_2_2_reg_1461 <= sha256ctx_state_0_2_fu_170;
        sha256ctx_state_1_2_2_reg_1466 <= sha256ctx_state_1_2_fu_174;
        sha256ctx_state_2_2_2_reg_1471 <= sha256ctx_state_2_2_fu_178;
        sha256ctx_state_3_2_2_reg_1476 <= sha256ctx_state_3_2_fu_182;
        sha256ctx_state_4_2_2_reg_1481 <= sha256ctx_state_4_2_fu_186;
        sha256ctx_state_5_2_2_reg_1486 <= sha256ctx_state_5_2_fu_190;
        sha256ctx_state_6_2_2_reg_1491 <= sha256ctx_state_6_2_fu_194;
        sha256ctx_state_7_2_2_reg_1496 <= sha256ctx_state_7_2_fu_198;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_96_reg_1390 <= tmp_96_fu_1099_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        data_address0 = sum2_cast_fu_1288_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        data_address0 = sum_cast_fu_1228_p1;
    end else begin
        data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6))) begin
        data_ce0 = 1'b1;
    end else begin
        data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        digest_address0 = 32'd31;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        digest_address0 = 32'd30;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        digest_address0 = 32'd29;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        digest_address0 = 32'd28;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        digest_address0 = 32'd27;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        digest_address0 = 32'd26;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        digest_address0 = 32'd25;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        digest_address0 = 32'd24;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        digest_address0 = 32'd23;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        digest_address0 = 32'd22;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        digest_address0 = 32'd21;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        digest_address0 = 32'd20;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        digest_address0 = 32'd19;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        digest_address0 = 32'd18;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        digest_address0 = 32'd17;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        digest_address0 = 32'd16;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        digest_address0 = 32'd15;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        digest_address0 = 32'd14;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        digest_address0 = 32'd13;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        digest_address0 = 32'd12;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        digest_address0 = 32'd11;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        digest_address0 = 32'd10;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        digest_address0 = 32'd9;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        digest_address0 = 32'd8;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        digest_address0 = 32'd7;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        digest_address0 = 32'd6;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        digest_address0 = 32'd5;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        digest_address0 = 32'd4;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        digest_address0 = 32'd3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        digest_address0 = 32'd2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        digest_address0 = 32'd1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        digest_address0 = 32'd0;
    end else begin
        digest_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state41))) begin
        digest_ce0 = 1'b1;
    end else begin
        digest_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state41))) begin
        digest_we0 = 1'b1;
    end else begin
        digest_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((1'd1 == icmp_reg_1406)) begin
            grp_sha256_update_fu_855_ctx_datalen_read = sha256ctx_datalen_lo_1_reg_1446;
        end else if ((icmp_reg_1406 == 1'd0)) begin
            grp_sha256_update_fu_855_ctx_datalen_read = reg_1033;
        end else begin
            grp_sha256_update_fu_855_ctx_datalen_read = 'bx;
        end
    end else begin
        grp_sha256_update_fu_855_ctx_datalen_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((1'd1 == icmp_reg_1406)) begin
            grp_sha256_update_fu_855_len = n_load_reg_1396;
        end else if ((icmp_reg_1406 == 1'd0)) begin
            grp_sha256_update_fu_855_len = 32'd64;
        end else begin
            grp_sha256_update_fu_855_len = 'bx;
        end
    end else begin
        grp_sha256_update_fu_855_len = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((1'd1 == icmp_reg_1406)) begin
            grp_sha256_update_fu_855_p_read1 = sha256ctx_bitlen_0_1_reg_1451;
        end else if ((icmp_reg_1406 == 1'd0)) begin
            grp_sha256_update_fu_855_p_read1 = reg_1039;
        end else begin
            grp_sha256_update_fu_855_p_read1 = 'bx;
        end
    end else begin
        grp_sha256_update_fu_855_p_read1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((1'd1 == icmp_reg_1406)) begin
            grp_sha256_update_fu_855_p_read10 = sha256ctx_state_7_2_2_reg_1496;
        end else if ((icmp_reg_1406 == 1'd0)) begin
            grp_sha256_update_fu_855_p_read10 = reg_1093;
        end else begin
            grp_sha256_update_fu_855_p_read10 = 'bx;
        end
    end else begin
        grp_sha256_update_fu_855_p_read10 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((1'd1 == icmp_reg_1406)) begin
            grp_sha256_update_fu_855_p_read2 = sha256ctx_bitlen_1_1_reg_1456;
        end else if ((icmp_reg_1406 == 1'd0)) begin
            grp_sha256_update_fu_855_p_read2 = reg_1045;
        end else begin
            grp_sha256_update_fu_855_p_read2 = 'bx;
        end
    end else begin
        grp_sha256_update_fu_855_p_read2 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((1'd1 == icmp_reg_1406)) begin
            grp_sha256_update_fu_855_p_read3 = sha256ctx_state_0_2_2_reg_1461;
        end else if ((icmp_reg_1406 == 1'd0)) begin
            grp_sha256_update_fu_855_p_read3 = reg_1051;
        end else begin
            grp_sha256_update_fu_855_p_read3 = 'bx;
        end
    end else begin
        grp_sha256_update_fu_855_p_read3 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((1'd1 == icmp_reg_1406)) begin
            grp_sha256_update_fu_855_p_read4 = sha256ctx_state_1_2_2_reg_1466;
        end else if ((icmp_reg_1406 == 1'd0)) begin
            grp_sha256_update_fu_855_p_read4 = reg_1057;
        end else begin
            grp_sha256_update_fu_855_p_read4 = 'bx;
        end
    end else begin
        grp_sha256_update_fu_855_p_read4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((1'd1 == icmp_reg_1406)) begin
            grp_sha256_update_fu_855_p_read5 = sha256ctx_state_2_2_2_reg_1471;
        end else if ((icmp_reg_1406 == 1'd0)) begin
            grp_sha256_update_fu_855_p_read5 = reg_1063;
        end else begin
            grp_sha256_update_fu_855_p_read5 = 'bx;
        end
    end else begin
        grp_sha256_update_fu_855_p_read5 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((1'd1 == icmp_reg_1406)) begin
            grp_sha256_update_fu_855_p_read6 = sha256ctx_state_3_2_2_reg_1476;
        end else if ((icmp_reg_1406 == 1'd0)) begin
            grp_sha256_update_fu_855_p_read6 = reg_1069;
        end else begin
            grp_sha256_update_fu_855_p_read6 = 'bx;
        end
    end else begin
        grp_sha256_update_fu_855_p_read6 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((1'd1 == icmp_reg_1406)) begin
            grp_sha256_update_fu_855_p_read7 = sha256ctx_state_4_2_2_reg_1481;
        end else if ((icmp_reg_1406 == 1'd0)) begin
            grp_sha256_update_fu_855_p_read7 = reg_1075;
        end else begin
            grp_sha256_update_fu_855_p_read7 = 'bx;
        end
    end else begin
        grp_sha256_update_fu_855_p_read7 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((1'd1 == icmp_reg_1406)) begin
            grp_sha256_update_fu_855_p_read8 = sha256ctx_state_5_2_2_reg_1486;
        end else if ((icmp_reg_1406 == 1'd0)) begin
            grp_sha256_update_fu_855_p_read8 = reg_1081;
        end else begin
            grp_sha256_update_fu_855_p_read8 = 'bx;
        end
    end else begin
        grp_sha256_update_fu_855_p_read8 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((1'd1 == icmp_reg_1406)) begin
            grp_sha256_update_fu_855_p_read9 = sha256ctx_state_6_2_2_reg_1491;
        end else if ((icmp_reg_1406 == 1'd0)) begin
            grp_sha256_update_fu_855_p_read9 = reg_1087;
        end else begin
            grp_sha256_update_fu_855_p_read9 = 'bx;
        end
    end else begin
        grp_sha256_update_fu_855_p_read9 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        seg_buf_address0 = 32'd31;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        seg_buf_address0 = 32'd30;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        seg_buf_address0 = 32'd29;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        seg_buf_address0 = 32'd28;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        seg_buf_address0 = 32'd27;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        seg_buf_address0 = 32'd26;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        seg_buf_address0 = 32'd25;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        seg_buf_address0 = 32'd24;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        seg_buf_address0 = 32'd23;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        seg_buf_address0 = 32'd22;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        seg_buf_address0 = 32'd21;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        seg_buf_address0 = 32'd20;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        seg_buf_address0 = 32'd19;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        seg_buf_address0 = 32'd18;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        seg_buf_address0 = 32'd17;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        seg_buf_address0 = 32'd16;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        seg_buf_address0 = 32'd15;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        seg_buf_address0 = 32'd14;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        seg_buf_address0 = 32'd13;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        seg_buf_address0 = 32'd12;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        seg_buf_address0 = 32'd11;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        seg_buf_address0 = 32'd10;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        seg_buf_address0 = 32'd9;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        seg_buf_address0 = 32'd8;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        seg_buf_address0 = 32'd7;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        seg_buf_address0 = 32'd6;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        seg_buf_address0 = 32'd5;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        seg_buf_address0 = 32'd4;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        seg_buf_address0 = 32'd3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        seg_buf_address0 = 32'd2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        seg_buf_address0 = 32'd1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        seg_buf_address0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        seg_buf_address0 = i_1_cast_reg_1428;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        seg_buf_address0 = i9_cast4_reg_1410;
    end else if ((((1'b1 == ap_CS_fsm_state5) & (icmp_reg_1406 == 1'd0)) | ((1'b1 == ap_CS_fsm_state5) & (1'd1 == icmp_reg_1406)))) begin
        seg_buf_address0 = grp_sha256_update_fu_855_data_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        seg_buf_address0 = grp_sha256_final_fu_836_hash_address0;
    end else begin
        seg_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state7))) begin
        seg_buf_ce0 = 1'b1;
    end else if ((((1'b1 == ap_CS_fsm_state5) & (icmp_reg_1406 == 1'd0)) | ((1'b1 == ap_CS_fsm_state5) & (1'd1 == icmp_reg_1406)))) begin
        seg_buf_ce0 = grp_sha256_update_fu_855_data_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        seg_buf_ce0 = grp_sha256_final_fu_836_hash_ce0;
    end else begin
        seg_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        seg_buf_ce1 = grp_sha256_final_fu_836_hash_ce1;
    end else begin
        seg_buf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state7))) begin
        seg_buf_d0 = data_q0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        seg_buf_d0 = grp_sha256_final_fu_836_hash_d0;
    end else begin
        seg_buf_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state7))) begin
        seg_buf_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        seg_buf_we0 = grp_sha256_final_fu_836_hash_we0;
    end else begin
        seg_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        seg_buf_we1 = grp_sha256_final_fu_836_hash_we1;
    end else begin
        seg_buf_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (icmp_reg_1406 == 1'd0)) | ((1'b1 == ap_CS_fsm_state5) & (1'd1 == icmp_reg_1406)))) begin
        sha256ctx_data_address0 = grp_sha256_update_fu_855_ctx_data_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sha256ctx_data_address0 = grp_sha256_final_fu_836_ctx_data_address0;
    end else begin
        sha256ctx_data_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (icmp_reg_1406 == 1'd0)) | ((1'b1 == ap_CS_fsm_state5) & (1'd1 == icmp_reg_1406)))) begin
        sha256ctx_data_address1 = grp_sha256_update_fu_855_ctx_data_address1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sha256ctx_data_address1 = grp_sha256_final_fu_836_ctx_data_address1;
    end else begin
        sha256ctx_data_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (icmp_reg_1406 == 1'd0)) | ((1'b1 == ap_CS_fsm_state5) & (1'd1 == icmp_reg_1406)))) begin
        sha256ctx_data_ce0 = grp_sha256_update_fu_855_ctx_data_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sha256ctx_data_ce0 = grp_sha256_final_fu_836_ctx_data_ce0;
    end else begin
        sha256ctx_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (icmp_reg_1406 == 1'd0)) | ((1'b1 == ap_CS_fsm_state5) & (1'd1 == icmp_reg_1406)))) begin
        sha256ctx_data_ce1 = grp_sha256_update_fu_855_ctx_data_ce1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sha256ctx_data_ce1 = grp_sha256_final_fu_836_ctx_data_ce1;
    end else begin
        sha256ctx_data_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (icmp_reg_1406 == 1'd0)) | ((1'b1 == ap_CS_fsm_state5) & (1'd1 == icmp_reg_1406)))) begin
        sha256ctx_data_d0 = grp_sha256_update_fu_855_ctx_data_d0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sha256ctx_data_d0 = grp_sha256_final_fu_836_ctx_data_d0;
    end else begin
        sha256ctx_data_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (icmp_reg_1406 == 1'd0)) | ((1'b1 == ap_CS_fsm_state5) & (1'd1 == icmp_reg_1406)))) begin
        sha256ctx_data_we0 = grp_sha256_update_fu_855_ctx_data_we0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sha256ctx_data_we0 = grp_sha256_final_fu_836_ctx_data_we0;
    end else begin
        sha256ctx_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sha256ctx_data_we1 = grp_sha256_final_fu_836_ctx_data_we1;
    end else begin
        sha256ctx_data_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_1171_p2 == 1'd0) & (1'd1 == icmp_fu_1187_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_1171_p2 == 1'd0) & (icmp_fu_1187_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == exitcond5_fu_1201_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (ap_block_state5_on_subcall_done == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond4_fu_1262_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (grp_sha256_final_fu_836_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state5_on_subcall_done = (((icmp_reg_1406 == 1'd0) & (1'b0 == grp_sha256_update_fu_855_ap_done)) | ((1'd1 == icmp_reg_1406) & (1'b0 == grp_sha256_update_fu_855_ap_done)));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond4_fu_1262_p2 = ((i_1_cast_fu_1258_p1 == n_load_reg_1396) ? 1'b1 : 1'b0);

assign exitcond5_fu_1201_p2 = ((i9_reg_814 == 7'd64) ? 1'b1 : 1'b0);

assign grp_sha256_final_fu_836_ap_start = ap_reg_grp_sha256_final_fu_836_ap_start;

assign grp_sha256_update_fu_855_ap_start = ap_reg_grp_sha256_update_fu_855_ap_start;

assign i9_cast4_fu_1197_p1 = i9_reg_814;

assign i9_cast5_fu_1193_p1 = i9_reg_814;

assign i_1_cast3_fu_1254_p1 = i_1_reg_825;

assign i_1_cast_fu_1258_p1 = i_1_reg_825;

assign i_7_fu_1267_p2 = (i_1_reg_825 + 6'd1);

assign i_fu_1207_p2 = (i9_reg_814 + 7'd1);

assign icmp_fu_1187_p2 = ((tmp_97_fu_1177_p4 == 26'd0) ? 1'b1 : 1'b0);

assign n_1_fu_1233_p2 = ($signed(n_load_reg_1396) + $signed(32'd4294967232));

assign seg_offset_1_fu_1243_p2 = (seg_offset_fu_202 + 32'd64);

assign sum2_cast_fu_1288_p1 = sum2_fu_1282_p2;

assign sum2_fu_1282_p2 = (tmp_98_fu_1278_p1 + tmp2_fu_1273_p2);

assign sum_cast_fu_1228_p1 = sum_fu_1222_p2;

assign sum_fu_1222_p2 = (tmp_99_fu_1218_p1 + tmp1_fu_1213_p2);

assign tmp1_fu_1213_p2 = (tmp_96_reg_1390 + i9_cast5_fu_1193_p1);

assign tmp2_fu_1273_p2 = (tmp_96_reg_1390 + i_1_cast3_fu_1254_p1);

assign tmp_96_fu_1099_p1 = base_offset[9:0];

assign tmp_97_fu_1177_p4 = {{n_fu_154[31:6]}};

assign tmp_98_fu_1278_p1 = seg_offset_fu_202[9:0];

assign tmp_99_fu_1218_p1 = seg_offset_fu_202[9:0];

assign tmp_fu_1171_p2 = ((n_fu_154 == 32'd0) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    i9_cast4_reg_1410[31:7] <= 25'b0000000000000000000000000;
    i_1_cast_reg_1428[31:6] <= 26'b00000000000000000000000000;
end

endmodule //sha256
