-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha256_transform is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ctx_state_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
    ctx_state_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
    ctx_state_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
    ctx_state_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
    ctx_state_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
    ctx_state_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
    ctx_state_6_read : IN STD_LOGIC_VECTOR (31 downto 0);
    ctx_state_7_read : IN STD_LOGIC_VECTOR (31 downto 0);
    data_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    data_ce0 : OUT STD_LOGIC;
    data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    data_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    data_ce1 : OUT STD_LOGIC;
    data_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sha256_transform is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv7_10 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_7E : STD_LOGIC_VECTOR (6 downto 0) := "1111110";
    constant ap_const_lv7_79 : STD_LOGIC_VECTOR (6 downto 0) := "1111001";
    constant ap_const_lv7_71 : STD_LOGIC_VECTOR (6 downto 0) := "1110001";
    constant ap_const_lv7_70 : STD_LOGIC_VECTOR (6 downto 0) := "1110000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal k_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_ce0 : STD_LOGIC;
    signal k_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast_fu_429_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast_reg_1110 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_5_fu_439_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_5_reg_1118 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_450_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_10_reg_1128 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_1_fu_465_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_1_reg_1139 : STD_LOGIC_VECTOR (6 downto 0);
    signal data_load_reg_1144 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal data_load_1_reg_1149 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_1_cast_fu_502_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_cast_reg_1164 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_load_reg_1182 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal m_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_load_1_reg_1191 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_fu_556_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_3_reg_1206 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_26_fu_708_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_reg_1211 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_4_fu_726_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_4_reg_1219 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_27_fu_720_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp10_fu_840_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp10_reg_1234 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_55_fu_864_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_55_reg_1239 : STD_LOGIC_VECTOR (31 downto 0);
    signal t1_fu_964_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t1_reg_1244 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal e_fu_1047_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal a_fu_1056_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal m_ce0 : STD_LOGIC;
    signal m_we0 : STD_LOGIC;
    signal m_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal m_ce1 : STD_LOGIC;
    signal m_we1 : STD_LOGIC;
    signal i_reg_299 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal j_reg_310 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_reg_321 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal h_reg_342 : STD_LOGIC_VECTOR (31 downto 0);
    signal h1_reg_333 : STD_LOGIC_VECTOR (31 downto 0);
    signal g_reg_353 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_reg_364 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_reg_385 : STD_LOGIC_VECTOR (31 downto 0);
    signal d1_reg_375 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_reg_396 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_407 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_reg_418 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_cast4_fu_445_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_cast_fu_460_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_cast_fu_476_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_cast_fu_486_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_cast_fu_518_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_cast_fu_529_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_cast_fu_540_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_cast_fu_551_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_cast_fu_714_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_454_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_471_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_fu_481_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_512_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_14_fu_523_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_15_fu_534_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_25_fu_545_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_18_fu_571_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_3_fu_562_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_21_fu_591_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_9_fu_582_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_11_fu_602_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_12_fu_611_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_594_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_615_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_574_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_637_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_16_fu_627_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_33_fu_659_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_19_fu_649_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_22_fu_671_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_23_fu_681_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_663_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_fu_685_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_641_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_621_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_691_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_fu_702_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_fu_697_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_fu_742_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_28_fu_732_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_44_fu_764_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_31_fu_754_p4 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_47_fu_786_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_34_fu_776_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_29_fu_746_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_fu_768_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp6_fu_798_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_fu_790_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_39_fu_816_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_fu_810_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_fu_822_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_37_fu_804_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_41_fu_828_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp11_fu_834_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_52_fu_846_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_53_fu_852_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_54_fu_858_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_fu_870_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_1_fu_875_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_2_fu_880_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_3_fu_885_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_4_fu_890_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_5_fu_895_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_6_fu_900_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_7_fu_905_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp9_fu_958_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_50_fu_979_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_42_fu_969_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_57_fu_1001_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_45_fu_991_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_58_fu_1023_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_48_fu_1013_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_43_fu_983_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_46_fu_1005_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp12_fu_1035_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_49_fu_1027_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp13_fu_1052_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_51_fu_1041_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_5_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_6_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_7_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component sha256_transform_k IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sha256_transform_m IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    k_U : component sha256_transform_k
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => k_address0,
        ce0 => k_ce0,
        q0 => k_q0);

    m_U : component sha256_transform_m
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => m_address0,
        ce0 => m_ce0,
        we0 => m_we0,
        d0 => m_d0,
        q0 => m_q0,
        address1 => m_address1,
        ce1 => m_ce1,
        we1 => m_we1,
        d1 => tmp_26_reg_1211,
        q1 => m_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_27_fu_720_p2 = ap_const_lv1_1))) then 
                    ap_return_0_preg <= ctx_state_fu_870_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_27_fu_720_p2 = ap_const_lv1_1))) then 
                    ap_return_1_preg <= ctx_state_1_fu_875_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_27_fu_720_p2 = ap_const_lv1_1))) then 
                    ap_return_2_preg <= ctx_state_2_fu_880_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_27_fu_720_p2 = ap_const_lv1_1))) then 
                    ap_return_3_preg <= ctx_state_3_fu_885_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_27_fu_720_p2 = ap_const_lv1_1))) then 
                    ap_return_4_preg <= ctx_state_4_fu_890_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_5_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_5_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_27_fu_720_p2 = ap_const_lv1_1))) then 
                    ap_return_5_preg <= ctx_state_5_fu_895_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_6_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_6_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_27_fu_720_p2 = ap_const_lv1_1))) then 
                    ap_return_6_preg <= ctx_state_6_fu_900_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_7_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_7_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_27_fu_720_p2 = ap_const_lv1_1))) then 
                    ap_return_7_preg <= ctx_state_7_fu_905_p2;
                end if; 
            end if;
        end if;
    end process;


    b_reg_407_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_fu_506_p2 = ap_const_lv1_1))) then 
                b_reg_407 <= ctx_state_0_read;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                b_reg_407 <= a_fu_1056_p2;
            end if; 
        end if;
    end process;

    c_reg_396_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_fu_506_p2 = ap_const_lv1_1))) then 
                c_reg_396 <= ctx_state_1_read;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                c_reg_396 <= b_reg_407;
            end if; 
        end if;
    end process;

    d1_reg_375_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_fu_506_p2 = ap_const_lv1_1))) then 
                d1_reg_375 <= ctx_state_3_read;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                d1_reg_375 <= d_reg_385;
            end if; 
        end if;
    end process;

    d_reg_385_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_fu_506_p2 = ap_const_lv1_1))) then 
                d_reg_385 <= ctx_state_2_read;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                d_reg_385 <= c_reg_396;
            end if; 
        end if;
    end process;

    f_reg_364_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_fu_506_p2 = ap_const_lv1_1))) then 
                f_reg_364 <= ctx_state_4_read;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                f_reg_364 <= e_fu_1047_p2;
            end if; 
        end if;
    end process;

    g_reg_353_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_fu_506_p2 = ap_const_lv1_1))) then 
                g_reg_353 <= ctx_state_5_read;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                g_reg_353 <= f_reg_364;
            end if; 
        end if;
    end process;

    h1_reg_333_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_fu_506_p2 = ap_const_lv1_1))) then 
                h1_reg_333 <= ctx_state_7_read;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                h1_reg_333 <= h_reg_342;
            end if; 
        end if;
    end process;

    h_reg_342_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_fu_506_p2 = ap_const_lv1_1))) then 
                h_reg_342 <= ctx_state_6_read;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                h_reg_342 <= g_reg_353;
            end if; 
        end if;
    end process;

    i_1_reg_321_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_433_p2 = ap_const_lv1_1))) then 
                i_1_reg_321 <= ap_const_lv7_10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_1_reg_321 <= i_3_reg_1206;
            end if; 
        end if;
    end process;

    i_2_reg_418_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_fu_506_p2 = ap_const_lv1_1))) then 
                i_2_reg_418 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_2_reg_418 <= i_4_reg_1219;
            end if; 
        end if;
    end process;

    i_reg_299_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_reg_299 <= tmp_5_reg_1118;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_299 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_reg_310_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_reg_310 <= j_1_reg_1139;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_reg_310 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                data_load_1_reg_1149 <= data_q1;
                data_load_reg_1144 <= data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                    i_1_cast_reg_1164(6 downto 0) <= i_1_cast_fu_502_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_3_reg_1206 <= i_3_fu_556_p2;
                m_load_1_reg_1191 <= m_q1;
                m_load_reg_1182 <= m_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                i_4_reg_1219 <= i_4_fu_726_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    i_cast_reg_1110(4 downto 0) <= i_cast_fu_429_p1(4 downto 0);
                tmp_5_reg_1118 <= tmp_5_fu_439_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_433_p2 = ap_const_lv1_0))) then
                j_1_reg_1139 <= j_1_fu_465_p2;
                tmp_10_reg_1128 <= tmp_10_fu_450_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                t1_reg_1244 <= t1_fu_964_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_27_fu_720_p2))) then
                tmp10_reg_1234 <= tmp10_fu_840_p2;
                tmp_55_reg_1239 <= tmp_55_fu_864_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_26_reg_1211 <= tmp_26_fu_708_p2;
            end if;
        end if;
    end process;
    i_cast_reg_1110(31 downto 5) <= "000000000000000000000000000";
    i_1_cast_reg_1164(31 downto 7) <= "0000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_433_p2, ap_CS_fsm_state5, exitcond_fu_506_p2, ap_CS_fsm_state9, tmp_27_fu_720_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_433_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_fu_506_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_27_fu_720_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    a_fu_1056_p2 <= std_logic_vector(unsigned(tmp13_fu_1052_p2) + unsigned(tmp_51_fu_1041_p2));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state9, tmp_27_fu_720_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_27_fu_720_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9, tmp_27_fu_720_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_27_fu_720_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state9, tmp_27_fu_720_p2, ctx_state_fu_870_p2, ap_return_0_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_27_fu_720_p2 = ap_const_lv1_1))) then 
            ap_return_0 <= ctx_state_fu_870_p2;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state9, tmp_27_fu_720_p2, ctx_state_1_fu_875_p2, ap_return_1_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_27_fu_720_p2 = ap_const_lv1_1))) then 
            ap_return_1 <= ctx_state_1_fu_875_p2;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_CS_fsm_state9, tmp_27_fu_720_p2, ctx_state_2_fu_880_p2, ap_return_2_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_27_fu_720_p2 = ap_const_lv1_1))) then 
            ap_return_2 <= ctx_state_2_fu_880_p2;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_CS_fsm_state9, tmp_27_fu_720_p2, ctx_state_3_fu_885_p2, ap_return_3_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_27_fu_720_p2 = ap_const_lv1_1))) then 
            ap_return_3 <= ctx_state_3_fu_885_p2;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ap_return_4_assign_proc : process(ap_CS_fsm_state9, tmp_27_fu_720_p2, ctx_state_4_fu_890_p2, ap_return_4_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_27_fu_720_p2 = ap_const_lv1_1))) then 
            ap_return_4 <= ctx_state_4_fu_890_p2;
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;


    ap_return_5_assign_proc : process(ap_CS_fsm_state9, tmp_27_fu_720_p2, ctx_state_5_fu_895_p2, ap_return_5_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_27_fu_720_p2 = ap_const_lv1_1))) then 
            ap_return_5 <= ctx_state_5_fu_895_p2;
        else 
            ap_return_5 <= ap_return_5_preg;
        end if; 
    end process;


    ap_return_6_assign_proc : process(ap_CS_fsm_state9, tmp_27_fu_720_p2, ctx_state_6_fu_900_p2, ap_return_6_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_27_fu_720_p2 = ap_const_lv1_1))) then 
            ap_return_6 <= ctx_state_6_fu_900_p2;
        else 
            ap_return_6 <= ap_return_6_preg;
        end if; 
    end process;


    ap_return_7_assign_proc : process(ap_CS_fsm_state9, tmp_27_fu_720_p2, ctx_state_7_fu_905_p2, ap_return_7_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_27_fu_720_p2 = ap_const_lv1_1))) then 
            ap_return_7 <= ctx_state_7_fu_905_p2;
        else 
            ap_return_7 <= ap_return_7_preg;
        end if; 
    end process;

    ctx_state_1_fu_875_p2 <= std_logic_vector(unsigned(c_reg_396) + unsigned(ctx_state_1_read));
    ctx_state_2_fu_880_p2 <= std_logic_vector(unsigned(d_reg_385) + unsigned(ctx_state_2_read));
    ctx_state_3_fu_885_p2 <= std_logic_vector(unsigned(d1_reg_375) + unsigned(ctx_state_3_read));
    ctx_state_4_fu_890_p2 <= std_logic_vector(unsigned(f_reg_364) + unsigned(ctx_state_4_read));
    ctx_state_5_fu_895_p2 <= std_logic_vector(unsigned(g_reg_353) + unsigned(ctx_state_5_read));
    ctx_state_6_fu_900_p2 <= std_logic_vector(unsigned(h_reg_342) + unsigned(ctx_state_6_read));
    ctx_state_7_fu_905_p2 <= std_logic_vector(unsigned(h1_reg_333) + unsigned(ctx_state_7_read));
    ctx_state_fu_870_p2 <= std_logic_vector(unsigned(b_reg_407) + unsigned(ctx_state_0_read));

    data_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, j_cast4_fu_445_p1, tmp_1_cast_fu_476_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            data_address0 <= tmp_1_cast_fu_476_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_address0 <= j_cast4_fu_445_p1(6 - 1 downto 0);
        else 
            data_address0 <= "XXXXXX";
        end if; 
    end process;


    data_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, tmp_8_cast_fu_460_p1, tmp_4_cast_fu_486_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            data_address1 <= tmp_4_cast_fu_486_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_address1 <= tmp_8_cast_fu_460_p1(6 - 1 downto 0);
        else 
            data_address1 <= "XXXXXX";
        end if; 
    end process;


    data_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data_ce0 <= ap_const_logic_1;
        else 
            data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data_ce1 <= ap_const_logic_1;
        else 
            data_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    e_fu_1047_p2 <= std_logic_vector(unsigned(t1_reg_1244) + unsigned(d1_reg_375));
    exitcond_fu_506_p2 <= "1" when (i_1_reg_321 = ap_const_lv7_40) else "0";
    i_1_cast_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_321),32));
    i_2_cast_fu_714_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_418),32));
    i_3_fu_556_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(i_1_reg_321));
    i_4_fu_726_p2 <= std_logic_vector(unsigned(i_2_reg_418) + unsigned(ap_const_lv7_1));
    i_cast_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_299),32));
    j_1_fu_465_p2 <= std_logic_vector(unsigned(ap_const_lv7_4) + unsigned(j_reg_310));
    j_cast4_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_310),32));
    k_address0 <= i_2_cast_fu_714_p1(6 - 1 downto 0);

    k_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            k_ce0 <= ap_const_logic_1;
        else 
            k_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    m_address0_assign_proc : process(i_cast_reg_1110, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state4, tmp_14_cast_fu_518_p1, tmp_35_cast_fu_551_p1, i_2_cast_fu_714_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            m_address0 <= i_2_cast_fu_714_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            m_address0 <= tmp_35_cast_fu_551_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            m_address0 <= tmp_14_cast_fu_518_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            m_address0 <= i_cast_reg_1110(6 - 1 downto 0);
        else 
            m_address0 <= "XXXXXX";
        end if; 
    end process;


    m_address1_assign_proc : process(i_1_cast_reg_1164, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state8, tmp_24_cast_fu_529_p1, tmp_25_cast_fu_540_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            m_address1 <= i_1_cast_reg_1164(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            m_address1 <= tmp_25_cast_fu_540_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            m_address1 <= tmp_24_cast_fu_529_p1(6 - 1 downto 0);
        else 
            m_address1 <= "XXXXXX";
        end if; 
    end process;


    m_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_ce0 <= ap_const_logic_1;
        else 
            m_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    m_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            m_ce1 <= ap_const_logic_1;
        else 
            m_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    m_d0 <= (((data_load_reg_1144 & data_load_1_reg_1149) & data_q0) & data_q1);

    m_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            m_we0 <= ap_const_logic_1;
        else 
            m_we0 <= ap_const_logic_0;
        end if; 
    end process;


    m_we1_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            m_we1 <= ap_const_logic_1;
        else 
            m_we1 <= ap_const_logic_0;
        end if; 
    end process;

    t1_fu_964_p2 <= std_logic_vector(unsigned(tmp10_reg_1234) + unsigned(tmp9_fu_958_p2));
    tmp10_fu_840_p2 <= std_logic_vector(unsigned(tmp11_fu_834_p2) + unsigned(h1_reg_333));
    tmp11_fu_834_p2 <= std_logic_vector(unsigned(tmp_37_fu_804_p2) + unsigned(tmp_41_fu_828_p2));
    tmp12_fu_1035_p2 <= (tmp_43_fu_983_p3 xor tmp_46_fu_1005_p3);
    tmp13_fu_1052_p2 <= std_logic_vector(unsigned(tmp_55_reg_1239) + unsigned(t1_reg_1244));
    tmp2_fu_615_p2 <= (tmp_12_fu_611_p1 xor tmp_6_fu_594_p3);
    tmp3_fu_685_p2 <= (tmp_23_fu_681_p1 xor tmp_20_fu_663_p3);
    tmp4_fu_697_p2 <= std_logic_vector(unsigned(m_load_1_reg_1191) + unsigned(m_q0));
    tmp5_fu_702_p2 <= std_logic_vector(unsigned(tmp_13_fu_621_p2) + unsigned(tmp_24_fu_691_p2));
    tmp6_fu_798_p2 <= (tmp_29_fu_746_p3 xor tmp_32_fu_768_p3);
    tmp9_fu_958_p2 <= std_logic_vector(unsigned(k_q0) + unsigned(m_q0));
    tmp_10_fu_450_p1 <= j_reg_310(6 - 1 downto 0);
    tmp_11_fu_602_p4 <= m_load_reg_1182(31 downto 10);
    tmp_12_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_602_p4),32));
    tmp_13_fu_621_p2 <= (tmp2_fu_615_p2 xor tmp_7_fu_574_p3);
    tmp_14_cast_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_512_p2),32));
    tmp_14_fu_523_p2 <= std_logic_vector(signed(ap_const_lv7_79) + signed(i_1_reg_321));
    tmp_15_fu_534_p2 <= std_logic_vector(signed(ap_const_lv7_71) + signed(i_1_reg_321));
    tmp_16_fu_627_p4 <= m_q1(31 downto 7);
    tmp_17_fu_641_p3 <= (tmp_30_fu_637_p1 & tmp_16_fu_627_p4);
    tmp_18_fu_571_p1 <= m_load_reg_1182(17 - 1 downto 0);
    tmp_19_fu_649_p4 <= m_q1(31 downto 18);
    tmp_1_cast_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_471_p2),32));
    tmp_1_fu_471_p2 <= (tmp_10_reg_1128 or ap_const_lv6_2);
    tmp_20_fu_663_p3 <= (tmp_33_fu_659_p1 & tmp_19_fu_649_p4);
    tmp_21_fu_591_p1 <= m_load_reg_1182(19 - 1 downto 0);
    tmp_22_fu_671_p4 <= m_q1(31 downto 3);
    tmp_23_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_671_p4),32));
    tmp_24_cast_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_523_p2),32));
    tmp_24_fu_691_p2 <= (tmp3_fu_685_p2 xor tmp_17_fu_641_p3);
    tmp_25_cast_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_534_p2),32));
    tmp_25_fu_545_p2 <= std_logic_vector(signed(ap_const_lv7_70) + signed(i_1_reg_321));
    tmp_26_fu_708_p2 <= std_logic_vector(unsigned(tmp5_fu_702_p2) + unsigned(tmp4_fu_697_p2));
    tmp_27_fu_720_p2 <= "1" when (i_2_reg_418 = ap_const_lv7_40) else "0";
    tmp_28_fu_732_p4 <= f_reg_364(31 downto 6);
    tmp_29_fu_746_p3 <= (tmp_36_fu_742_p1 & tmp_28_fu_732_p4);
    tmp_30_fu_637_p1 <= m_q1(7 - 1 downto 0);
    tmp_31_fu_754_p4 <= f_reg_364(31 downto 11);
    tmp_32_fu_768_p3 <= (tmp_44_fu_764_p1 & tmp_31_fu_754_p4);
    tmp_33_fu_659_p1 <= m_q1(18 - 1 downto 0);
    tmp_34_fu_776_p4 <= f_reg_364(31 downto 25);
    tmp_35_cast_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_fu_545_p2),32));
    tmp_35_fu_790_p3 <= (tmp_47_fu_786_p1 & tmp_34_fu_776_p4);
    tmp_36_fu_742_p1 <= f_reg_364(6 - 1 downto 0);
    tmp_37_fu_804_p2 <= (tmp6_fu_798_p2 xor tmp_35_fu_790_p3);
    tmp_38_fu_810_p2 <= (f_reg_364 and g_reg_353);
    tmp_39_fu_816_p2 <= (f_reg_364 xor ap_const_lv32_FFFFFFFF);
    tmp_3_fu_562_p4 <= m_load_reg_1182(31 downto 17);
    tmp_40_fu_822_p2 <= (h_reg_342 and tmp_39_fu_816_p2);
    tmp_41_fu_828_p2 <= (tmp_38_fu_810_p2 xor tmp_40_fu_822_p2);
    tmp_42_fu_969_p4 <= b_reg_407(31 downto 2);
    tmp_43_fu_983_p3 <= (tmp_50_fu_979_p1 & tmp_42_fu_969_p4);
    tmp_44_fu_764_p1 <= f_reg_364(11 - 1 downto 0);
    tmp_45_fu_991_p4 <= b_reg_407(31 downto 13);
    tmp_46_fu_1005_p3 <= (tmp_57_fu_1001_p1 & tmp_45_fu_991_p4);
    tmp_47_fu_786_p1 <= f_reg_364(25 - 1 downto 0);
    tmp_48_fu_1013_p4 <= b_reg_407(31 downto 22);
    tmp_49_fu_1027_p3 <= (tmp_58_fu_1023_p1 & tmp_48_fu_1013_p4);
    tmp_4_cast_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_481_p2),32));
    tmp_4_fu_481_p2 <= (tmp_10_reg_1128 or ap_const_lv6_3);
    tmp_50_fu_979_p1 <= b_reg_407(2 - 1 downto 0);
    tmp_51_fu_1041_p2 <= (tmp12_fu_1035_p2 xor tmp_49_fu_1027_p3);
    tmp_52_fu_846_p2 <= (c_reg_396 xor d_reg_385);
    tmp_53_fu_852_p2 <= (b_reg_407 and tmp_52_fu_846_p2);
    tmp_54_fu_858_p2 <= (c_reg_396 and d_reg_385);
    tmp_55_fu_864_p2 <= (tmp_53_fu_852_p2 xor tmp_54_fu_858_p2);
    tmp_57_fu_1001_p1 <= b_reg_407(13 - 1 downto 0);
    tmp_58_fu_1023_p1 <= b_reg_407(22 - 1 downto 0);
    tmp_5_fu_439_p2 <= std_logic_vector(unsigned(i_reg_299) + unsigned(ap_const_lv5_1));
    tmp_6_fu_594_p3 <= (tmp_21_fu_591_p1 & tmp_9_fu_582_p4);
    tmp_7_fu_574_p3 <= (tmp_18_fu_571_p1 & tmp_3_fu_562_p4);
    tmp_8_cast_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_454_p2),32));
    tmp_8_fu_454_p2 <= (tmp_10_fu_450_p1 or ap_const_lv6_1);
    tmp_9_fu_582_p4 <= m_load_reg_1182(31 downto 19);
    tmp_fu_433_p2 <= "1" when (i_reg_299 = ap_const_lv5_10) else "0";
    tmp_s_fu_512_p2 <= std_logic_vector(signed(ap_const_lv7_7E) + signed(i_1_reg_321));
end behav;
