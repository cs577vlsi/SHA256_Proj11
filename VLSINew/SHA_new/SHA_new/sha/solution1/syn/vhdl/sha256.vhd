-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha256 is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 10;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of sha256 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sha256,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.337500,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=12,HLS_SYN_DSP=0,HLS_SYN_FF=9205,HLS_SYN_LUT=6555}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (40 downto 0) := "00000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (40 downto 0) := "00000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (40 downto 0) := "00000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (40 downto 0) := "00000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (40 downto 0) := "00000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (40 downto 0) := "00000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (40 downto 0) := "00001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (40 downto 0) := "00010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (40 downto 0) := "00100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (40 downto 0) := "01000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (40 downto 0) := "10000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_6A09E667 : STD_LOGIC_VECTOR (31 downto 0) := "01101010000010011110011001100111";
    constant ap_const_lv32_BB67AE85 : STD_LOGIC_VECTOR (31 downto 0) := "10111011011001111010111010000101";
    constant ap_const_lv32_3C6EF372 : STD_LOGIC_VECTOR (31 downto 0) := "00111100011011101111001101110010";
    constant ap_const_lv32_A54FF53A : STD_LOGIC_VECTOR (31 downto 0) := "10100101010011111111010100111010";
    constant ap_const_lv32_510E527F : STD_LOGIC_VECTOR (31 downto 0) := "01010001000011100101001001111111";
    constant ap_const_lv32_9B05688C : STD_LOGIC_VECTOR (31 downto 0) := "10011011000001010110100010001100";
    constant ap_const_lv32_1F83D9AB : STD_LOGIC_VECTOR (31 downto 0) := "00011111100000111101100110101011";
    constant ap_const_lv32_5BE0CD19 : STD_LOGIC_VECTOR (31 downto 0) := "01011011111000001100110100011001";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_FFFFFFC0 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal data_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_ce0 : STD_LOGIC;
    signal data_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal base_offset : STD_LOGIC_VECTOR (31 downto 0);
    signal bytes : STD_LOGIC_VECTOR (31 downto 0);
    signal digest_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal digest_ce0 : STD_LOGIC;
    signal digest_we0 : STD_LOGIC;
    signal reg_1033 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_1171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond5_fu_1201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_1039 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1045 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1051 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1057 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1063 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1069 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1075 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1081 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1087 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1093 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_96_fu_1099_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_96_reg_1390 : STD_LOGIC_VECTOR (9 downto 0);
    signal n_load_reg_1396 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_fu_1187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_1406 : STD_LOGIC_VECTOR (0 downto 0);
    signal i9_cast4_fu_1197_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i9_cast4_reg_1410 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_1207_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_1418 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_cast_fu_1258_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_cast_reg_1428 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_7_fu_1267_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_7_reg_1436 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond4_fu_1262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sha256ctx_datalen_lo_1_reg_1446 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256ctx_bitlen_0_1_reg_1451 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256ctx_bitlen_1_1_reg_1456 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256ctx_state_0_2_2_reg_1461 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256ctx_state_1_2_2_reg_1466 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256ctx_state_2_2_2_reg_1471 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256ctx_state_3_2_2_reg_1476 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256ctx_state_4_2_2_reg_1481 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256ctx_state_5_2_2_reg_1486 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256ctx_state_6_2_2_reg_1491 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256ctx_state_7_2_2_reg_1496 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal seg_buf_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal seg_buf_ce0 : STD_LOGIC;
    signal seg_buf_we0 : STD_LOGIC;
    signal seg_buf_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal seg_buf_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal seg_buf_ce1 : STD_LOGIC;
    signal seg_buf_we1 : STD_LOGIC;
    signal sha256ctx_data_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal sha256ctx_data_ce0 : STD_LOGIC;
    signal sha256ctx_data_we0 : STD_LOGIC;
    signal sha256ctx_data_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sha256ctx_data_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sha256ctx_data_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sha256ctx_data_ce1 : STD_LOGIC;
    signal sha256ctx_data_we1 : STD_LOGIC;
    signal sha256ctx_data_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_final_fu_836_ap_start : STD_LOGIC;
    signal grp_sha256_final_fu_836_ap_done : STD_LOGIC;
    signal grp_sha256_final_fu_836_ap_idle : STD_LOGIC;
    signal grp_sha256_final_fu_836_ap_ready : STD_LOGIC;
    signal grp_sha256_final_fu_836_ctx_data_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_final_fu_836_ctx_data_ce0 : STD_LOGIC;
    signal grp_sha256_final_fu_836_ctx_data_we0 : STD_LOGIC;
    signal grp_sha256_final_fu_836_ctx_data_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_final_fu_836_ctx_data_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_final_fu_836_ctx_data_ce1 : STD_LOGIC;
    signal grp_sha256_final_fu_836_ctx_data_we1 : STD_LOGIC;
    signal grp_sha256_final_fu_836_ctx_data_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_final_fu_836_hash_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_final_fu_836_hash_ce0 : STD_LOGIC;
    signal grp_sha256_final_fu_836_hash_we0 : STD_LOGIC;
    signal grp_sha256_final_fu_836_hash_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_final_fu_836_hash_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_final_fu_836_hash_ce1 : STD_LOGIC;
    signal grp_sha256_final_fu_836_hash_we1 : STD_LOGIC;
    signal grp_sha256_final_fu_836_hash_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_update_fu_855_ap_start : STD_LOGIC;
    signal grp_sha256_update_fu_855_ap_done : STD_LOGIC;
    signal grp_sha256_update_fu_855_ap_idle : STD_LOGIC;
    signal grp_sha256_update_fu_855_ap_ready : STD_LOGIC;
    signal grp_sha256_update_fu_855_ctx_data_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_update_fu_855_ctx_data_ce0 : STD_LOGIC;
    signal grp_sha256_update_fu_855_ctx_data_we0 : STD_LOGIC;
    signal grp_sha256_update_fu_855_ctx_data_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_update_fu_855_ctx_data_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_update_fu_855_ctx_data_ce1 : STD_LOGIC;
    signal grp_sha256_update_fu_855_ctx_datalen_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_855_p_read1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_855_p_read2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_855_p_read3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_855_p_read4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_855_p_read5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_855_p_read6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_855_p_read7 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_855_p_read8 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_855_p_read9 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_855_p_read10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_855_data_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_update_fu_855_data_ce0 : STD_LOGIC;
    signal grp_sha256_update_fu_855_len : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_855_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_855_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_855_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_855_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_855_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_855_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_855_ap_return_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_855_ap_return_7 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_855_ap_return_8 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_855_ap_return_9 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_855_ap_return_10 : STD_LOGIC_VECTOR (31 downto 0);
    signal i9_reg_814 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_1_reg_825 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_reg_grp_sha256_final_fu_836_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_reg_grp_sha256_update_fu_855_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sum_cast_fu_1228_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum2_cast_fu_1288_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal n_fu_154 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_1_fu_1233_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256ctx_datalen_fu_158 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state5_on_subcall_done : BOOLEAN;
    signal sha256ctx_bitlen_0_2_fu_162 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256ctx_bitlen_1_2_fu_166 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256ctx_state_0_2_fu_170 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256ctx_state_1_2_fu_174 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256ctx_state_2_2_fu_178 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256ctx_state_3_2_fu_182 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256ctx_state_4_2_fu_186 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256ctx_state_5_2_fu_190 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256ctx_state_6_2_fu_194 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha256ctx_state_7_2_fu_198 : STD_LOGIC_VECTOR (31 downto 0);
    signal seg_offset_fu_202 : STD_LOGIC_VECTOR (31 downto 0);
    signal seg_offset_1_fu_1243_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_97_fu_1177_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal i9_cast5_fu_1193_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_99_fu_1218_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp1_fu_1213_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum_fu_1222_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_cast3_fu_1254_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_98_fu_1278_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp2_fu_1273_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum2_fu_1282_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (40 downto 0);

    component sha256_final IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ctx_data_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ctx_data_ce0 : OUT STD_LOGIC;
        ctx_data_we0 : OUT STD_LOGIC;
        ctx_data_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctx_data_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ctx_data_ce1 : OUT STD_LOGIC;
        ctx_data_we1 : OUT STD_LOGIC;
        ctx_data_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_data_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctx_datalen_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_bitlen_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read6 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read8 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read9 : IN STD_LOGIC_VECTOR (31 downto 0);
        hash_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        hash_ce0 : OUT STD_LOGIC;
        hash_we0 : OUT STD_LOGIC;
        hash_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        hash_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        hash_ce1 : OUT STD_LOGIC;
        hash_we1 : OUT STD_LOGIC;
        hash_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sha256_update IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ctx_data_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ctx_data_ce0 : OUT STD_LOGIC;
        ctx_data_we0 : OUT STD_LOGIC;
        ctx_data_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctx_data_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ctx_data_ce1 : OUT STD_LOGIC;
        ctx_data_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctx_datalen_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read6 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read8 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read9 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read10 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        data_ce0 : OUT STD_LOGIC;
        data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        len : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sha256_seg_buf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sha256_sha256ctx_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sha256_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        data_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        data_ce0 : IN STD_LOGIC;
        data_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        base_offset : OUT STD_LOGIC_VECTOR (31 downto 0);
        bytes : OUT STD_LOGIC_VECTOR (31 downto 0);
        digest_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        digest_ce0 : IN STD_LOGIC;
        digest_we0 : IN STD_LOGIC;
        digest_d0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    sha256_AXILiteS_s_axi_U : component sha256_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        data_address0 => data_address0,
        data_ce0 => data_ce0,
        data_q0 => data_q0,
        base_offset => base_offset,
        bytes => bytes,
        digest_address0 => digest_address0,
        digest_ce0 => digest_ce0,
        digest_we0 => digest_we0,
        digest_d0 => seg_buf_q0);

    seg_buf_U : component sha256_seg_buf
    generic map (
        DataWidth => 8,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => seg_buf_address0,
        ce0 => seg_buf_ce0,
        we0 => seg_buf_we0,
        d0 => seg_buf_d0,
        q0 => seg_buf_q0,
        address1 => grp_sha256_final_fu_836_hash_address1,
        ce1 => seg_buf_ce1,
        we1 => seg_buf_we1,
        d1 => grp_sha256_final_fu_836_hash_d1);

    sha256ctx_data_U : component sha256_sha256ctx_bkb
    generic map (
        DataWidth => 8,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sha256ctx_data_address0,
        ce0 => sha256ctx_data_ce0,
        we0 => sha256ctx_data_we0,
        d0 => sha256ctx_data_d0,
        q0 => sha256ctx_data_q0,
        address1 => sha256ctx_data_address1,
        ce1 => sha256ctx_data_ce1,
        we1 => sha256ctx_data_we1,
        d1 => grp_sha256_final_fu_836_ctx_data_d1,
        q1 => sha256ctx_data_q1);

    grp_sha256_final_fu_836 : component sha256_final
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_sha256_final_fu_836_ap_start,
        ap_done => grp_sha256_final_fu_836_ap_done,
        ap_idle => grp_sha256_final_fu_836_ap_idle,
        ap_ready => grp_sha256_final_fu_836_ap_ready,
        ctx_data_address0 => grp_sha256_final_fu_836_ctx_data_address0,
        ctx_data_ce0 => grp_sha256_final_fu_836_ctx_data_ce0,
        ctx_data_we0 => grp_sha256_final_fu_836_ctx_data_we0,
        ctx_data_d0 => grp_sha256_final_fu_836_ctx_data_d0,
        ctx_data_q0 => sha256ctx_data_q0,
        ctx_data_address1 => grp_sha256_final_fu_836_ctx_data_address1,
        ctx_data_ce1 => grp_sha256_final_fu_836_ctx_data_ce1,
        ctx_data_we1 => grp_sha256_final_fu_836_ctx_data_we1,
        ctx_data_d1 => grp_sha256_final_fu_836_ctx_data_d1,
        ctx_data_q1 => sha256ctx_data_q1,
        ctx_datalen_read => reg_1033,
        ctx_bitlen_0_read => reg_1039,
        p_read3 => reg_1045,
        p_read1 => reg_1051,
        p_read2 => reg_1057,
        p_read4 => reg_1063,
        p_read5 => reg_1069,
        p_read6 => reg_1075,
        p_read7 => reg_1081,
        p_read8 => reg_1087,
        p_read9 => reg_1093,
        hash_address0 => grp_sha256_final_fu_836_hash_address0,
        hash_ce0 => grp_sha256_final_fu_836_hash_ce0,
        hash_we0 => grp_sha256_final_fu_836_hash_we0,
        hash_d0 => grp_sha256_final_fu_836_hash_d0,
        hash_address1 => grp_sha256_final_fu_836_hash_address1,
        hash_ce1 => grp_sha256_final_fu_836_hash_ce1,
        hash_we1 => grp_sha256_final_fu_836_hash_we1,
        hash_d1 => grp_sha256_final_fu_836_hash_d1);

    grp_sha256_update_fu_855 : component sha256_update
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_sha256_update_fu_855_ap_start,
        ap_done => grp_sha256_update_fu_855_ap_done,
        ap_idle => grp_sha256_update_fu_855_ap_idle,
        ap_ready => grp_sha256_update_fu_855_ap_ready,
        ctx_data_address0 => grp_sha256_update_fu_855_ctx_data_address0,
        ctx_data_ce0 => grp_sha256_update_fu_855_ctx_data_ce0,
        ctx_data_we0 => grp_sha256_update_fu_855_ctx_data_we0,
        ctx_data_d0 => grp_sha256_update_fu_855_ctx_data_d0,
        ctx_data_q0 => sha256ctx_data_q0,
        ctx_data_address1 => grp_sha256_update_fu_855_ctx_data_address1,
        ctx_data_ce1 => grp_sha256_update_fu_855_ctx_data_ce1,
        ctx_data_q1 => sha256ctx_data_q1,
        ctx_datalen_read => grp_sha256_update_fu_855_ctx_datalen_read,
        p_read1 => grp_sha256_update_fu_855_p_read1,
        p_read2 => grp_sha256_update_fu_855_p_read2,
        p_read3 => grp_sha256_update_fu_855_p_read3,
        p_read4 => grp_sha256_update_fu_855_p_read4,
        p_read5 => grp_sha256_update_fu_855_p_read5,
        p_read6 => grp_sha256_update_fu_855_p_read6,
        p_read7 => grp_sha256_update_fu_855_p_read7,
        p_read8 => grp_sha256_update_fu_855_p_read8,
        p_read9 => grp_sha256_update_fu_855_p_read9,
        p_read10 => grp_sha256_update_fu_855_p_read10,
        data_address0 => grp_sha256_update_fu_855_data_address0,
        data_ce0 => grp_sha256_update_fu_855_data_ce0,
        data_q0 => seg_buf_q0,
        len => grp_sha256_update_fu_855_len,
        ap_return_0 => grp_sha256_update_fu_855_ap_return_0,
        ap_return_1 => grp_sha256_update_fu_855_ap_return_1,
        ap_return_2 => grp_sha256_update_fu_855_ap_return_2,
        ap_return_3 => grp_sha256_update_fu_855_ap_return_3,
        ap_return_4 => grp_sha256_update_fu_855_ap_return_4,
        ap_return_5 => grp_sha256_update_fu_855_ap_return_5,
        ap_return_6 => grp_sha256_update_fu_855_ap_return_6,
        ap_return_7 => grp_sha256_update_fu_855_ap_return_7,
        ap_return_8 => grp_sha256_update_fu_855_ap_return_8,
        ap_return_9 => grp_sha256_update_fu_855_ap_return_9,
        ap_return_10 => grp_sha256_update_fu_855_ap_return_10);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_sha256_final_fu_836_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_sha256_final_fu_836_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_1171_p2 = ap_const_lv1_1))) then 
                    ap_reg_grp_sha256_final_fu_836_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_sha256_final_fu_836_ap_ready)) then 
                    ap_reg_grp_sha256_final_fu_836_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_sha256_update_fu_855_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_sha256_update_fu_855_ap_start <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = exitcond5_fu_1201_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond4_fu_1262_p2)))) then 
                    ap_reg_grp_sha256_update_fu_855_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_sha256_update_fu_855_ap_ready)) then 
                    ap_reg_grp_sha256_update_fu_855_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i9_reg_814_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_1171_p2 = ap_const_lv1_0) and (icmp_fu_1187_p2 = ap_const_lv1_0))) then 
                i9_reg_814 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i9_reg_814 <= i_reg_1418;
            end if; 
        end if;
    end process;

    i_1_reg_825_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_1171_p2 = ap_const_lv1_0) and (ap_const_lv1_1 = icmp_fu_1187_p2))) then 
                i_1_reg_825 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_1_reg_825 <= i_7_reg_1436;
            end if; 
        end if;
    end process;

    n_fu_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond4_fu_1262_p2))) then 
                n_fu_154 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = exitcond5_fu_1201_p2))) then 
                n_fu_154 <= n_1_fu_1233_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                n_fu_154 <= bytes;
            end if; 
        end if;
    end process;

    seg_offset_fu_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_reg_1406 = ap_const_lv1_0) and (ap_block_state5_on_subcall_done = ap_const_boolean_0))) then 
                seg_offset_fu_202 <= seg_offset_1_fu_1243_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                seg_offset_fu_202 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sha256ctx_bitlen_0_2_fu_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_reg_1406 = ap_const_lv1_0) and (ap_block_state5_on_subcall_done = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = icmp_reg_1406) and (ap_block_state5_on_subcall_done = ap_const_boolean_0)))) then 
                sha256ctx_bitlen_0_2_fu_162 <= grp_sha256_update_fu_855_ap_return_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                sha256ctx_bitlen_0_2_fu_162 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sha256ctx_bitlen_1_2_fu_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_reg_1406 = ap_const_lv1_0) and (ap_block_state5_on_subcall_done = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = icmp_reg_1406) and (ap_block_state5_on_subcall_done = ap_const_boolean_0)))) then 
                sha256ctx_bitlen_1_2_fu_166 <= grp_sha256_update_fu_855_ap_return_2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                sha256ctx_bitlen_1_2_fu_166 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sha256ctx_datalen_fu_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_reg_1406 = ap_const_lv1_0) and (ap_block_state5_on_subcall_done = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = icmp_reg_1406) and (ap_block_state5_on_subcall_done = ap_const_boolean_0)))) then 
                sha256ctx_datalen_fu_158 <= grp_sha256_update_fu_855_ap_return_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                sha256ctx_datalen_fu_158 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sha256ctx_state_0_2_fu_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_reg_1406 = ap_const_lv1_0) and (ap_block_state5_on_subcall_done = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = icmp_reg_1406) and (ap_block_state5_on_subcall_done = ap_const_boolean_0)))) then 
                sha256ctx_state_0_2_fu_170 <= grp_sha256_update_fu_855_ap_return_3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                sha256ctx_state_0_2_fu_170 <= ap_const_lv32_6A09E667;
            end if; 
        end if;
    end process;

    sha256ctx_state_1_2_fu_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_reg_1406 = ap_const_lv1_0) and (ap_block_state5_on_subcall_done = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = icmp_reg_1406) and (ap_block_state5_on_subcall_done = ap_const_boolean_0)))) then 
                sha256ctx_state_1_2_fu_174 <= grp_sha256_update_fu_855_ap_return_4;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                sha256ctx_state_1_2_fu_174 <= ap_const_lv32_BB67AE85;
            end if; 
        end if;
    end process;

    sha256ctx_state_2_2_fu_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_reg_1406 = ap_const_lv1_0) and (ap_block_state5_on_subcall_done = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = icmp_reg_1406) and (ap_block_state5_on_subcall_done = ap_const_boolean_0)))) then 
                sha256ctx_state_2_2_fu_178 <= grp_sha256_update_fu_855_ap_return_5;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                sha256ctx_state_2_2_fu_178 <= ap_const_lv32_3C6EF372;
            end if; 
        end if;
    end process;

    sha256ctx_state_3_2_fu_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_reg_1406 = ap_const_lv1_0) and (ap_block_state5_on_subcall_done = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = icmp_reg_1406) and (ap_block_state5_on_subcall_done = ap_const_boolean_0)))) then 
                sha256ctx_state_3_2_fu_182 <= grp_sha256_update_fu_855_ap_return_6;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                sha256ctx_state_3_2_fu_182 <= ap_const_lv32_A54FF53A;
            end if; 
        end if;
    end process;

    sha256ctx_state_4_2_fu_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_reg_1406 = ap_const_lv1_0) and (ap_block_state5_on_subcall_done = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = icmp_reg_1406) and (ap_block_state5_on_subcall_done = ap_const_boolean_0)))) then 
                sha256ctx_state_4_2_fu_186 <= grp_sha256_update_fu_855_ap_return_7;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                sha256ctx_state_4_2_fu_186 <= ap_const_lv32_510E527F;
            end if; 
        end if;
    end process;

    sha256ctx_state_5_2_fu_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_reg_1406 = ap_const_lv1_0) and (ap_block_state5_on_subcall_done = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = icmp_reg_1406) and (ap_block_state5_on_subcall_done = ap_const_boolean_0)))) then 
                sha256ctx_state_5_2_fu_190 <= grp_sha256_update_fu_855_ap_return_8;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                sha256ctx_state_5_2_fu_190 <= ap_const_lv32_9B05688C;
            end if; 
        end if;
    end process;

    sha256ctx_state_6_2_fu_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_reg_1406 = ap_const_lv1_0) and (ap_block_state5_on_subcall_done = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = icmp_reg_1406) and (ap_block_state5_on_subcall_done = ap_const_boolean_0)))) then 
                sha256ctx_state_6_2_fu_194 <= grp_sha256_update_fu_855_ap_return_9;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                sha256ctx_state_6_2_fu_194 <= ap_const_lv32_1F83D9AB;
            end if; 
        end if;
    end process;

    sha256ctx_state_7_2_fu_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_reg_1406 = ap_const_lv1_0) and (ap_block_state5_on_subcall_done = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = icmp_reg_1406) and (ap_block_state5_on_subcall_done = ap_const_boolean_0)))) then 
                sha256ctx_state_7_2_fu_198 <= grp_sha256_update_fu_855_ap_return_10;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                sha256ctx_state_7_2_fu_198 <= ap_const_lv32_5BE0CD19;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    i9_cast4_reg_1410(6 downto 0) <= i9_cast4_fu_1197_p1(6 downto 0);
                i_reg_1418 <= i_fu_1207_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                    i_1_cast_reg_1428(5 downto 0) <= i_1_cast_fu_1258_p1(5 downto 0);
                i_7_reg_1436 <= i_7_fu_1267_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_1171_p2 = ap_const_lv1_0))) then
                icmp_reg_1406 <= icmp_fu_1187_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                n_load_reg_1396 <= n_fu_154;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_1171_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = exitcond5_fu_1201_p2)))) then
                reg_1033 <= sha256ctx_datalen_fu_158;
                reg_1039 <= sha256ctx_bitlen_0_2_fu_162;
                reg_1045 <= sha256ctx_bitlen_1_2_fu_166;
                reg_1051 <= sha256ctx_state_0_2_fu_170;
                reg_1057 <= sha256ctx_state_1_2_fu_174;
                reg_1063 <= sha256ctx_state_2_2_fu_178;
                reg_1069 <= sha256ctx_state_3_2_fu_182;
                reg_1075 <= sha256ctx_state_4_2_fu_186;
                reg_1081 <= sha256ctx_state_5_2_fu_190;
                reg_1087 <= sha256ctx_state_6_2_fu_194;
                reg_1093 <= sha256ctx_state_7_2_fu_198;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond4_fu_1262_p2))) then
                sha256ctx_bitlen_0_1_reg_1451 <= sha256ctx_bitlen_0_2_fu_162;
                sha256ctx_bitlen_1_1_reg_1456 <= sha256ctx_bitlen_1_2_fu_166;
                sha256ctx_datalen_lo_1_reg_1446 <= sha256ctx_datalen_fu_158;
                sha256ctx_state_0_2_2_reg_1461 <= sha256ctx_state_0_2_fu_170;
                sha256ctx_state_1_2_2_reg_1466 <= sha256ctx_state_1_2_fu_174;
                sha256ctx_state_2_2_2_reg_1471 <= sha256ctx_state_2_2_fu_178;
                sha256ctx_state_3_2_2_reg_1476 <= sha256ctx_state_3_2_fu_182;
                sha256ctx_state_4_2_2_reg_1481 <= sha256ctx_state_4_2_fu_186;
                sha256ctx_state_5_2_2_reg_1486 <= sha256ctx_state_5_2_fu_190;
                sha256ctx_state_6_2_2_reg_1491 <= sha256ctx_state_6_2_fu_194;
                sha256ctx_state_7_2_2_reg_1496 <= sha256ctx_state_7_2_fu_198;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                tmp_96_reg_1390 <= tmp_96_fu_1099_p1;
            end if;
        end if;
    end process;
    i9_cast4_reg_1410(31 downto 7) <= "0000000000000000000000000";
    i_1_cast_reg_1428(31 downto 6) <= "00000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_1171_p2, ap_CS_fsm_state3, exitcond5_fu_1201_p2, icmp_fu_1187_p2, ap_CS_fsm_state6, exitcond4_fu_1262_p2, grp_sha256_final_fu_836_ap_done, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_block_state5_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_1171_p2 = ap_const_lv1_0) and (ap_const_lv1_1 = icmp_fu_1187_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_1171_p2 = ap_const_lv1_0) and (icmp_fu_1187_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = exitcond5_fu_1201_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_block_state5_on_subcall_done = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond4_fu_1262_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_sha256_final_fu_836_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state5_on_subcall_done_assign_proc : process(icmp_reg_1406, grp_sha256_update_fu_855_ap_done)
    begin
                ap_block_state5_on_subcall_done <= (((icmp_reg_1406 = ap_const_lv1_0) and (ap_const_logic_0 = grp_sha256_update_fu_855_ap_done)) or ((ap_const_lv1_1 = icmp_reg_1406) and (ap_const_logic_0 = grp_sha256_update_fu_855_ap_done)));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    data_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, sum_cast_fu_1228_p1, sum2_cast_fu_1288_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data_address0 <= sum2_cast_fu_1288_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            data_address0 <= sum_cast_fu_1228_p1(8 - 1 downto 0);
        else 
            data_address0 <= "XXXXXXXX";
        end if; 
    end process;


    data_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            data_ce0 <= ap_const_logic_1;
        else 
            data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    digest_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            digest_address0 <= ap_const_lv32_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            digest_address0 <= ap_const_lv32_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            digest_address0 <= ap_const_lv32_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            digest_address0 <= ap_const_lv32_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            digest_address0 <= ap_const_lv32_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            digest_address0 <= ap_const_lv32_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            digest_address0 <= ap_const_lv32_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            digest_address0 <= ap_const_lv32_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            digest_address0 <= ap_const_lv32_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            digest_address0 <= ap_const_lv32_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            digest_address0 <= ap_const_lv32_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            digest_address0 <= ap_const_lv32_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            digest_address0 <= ap_const_lv32_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            digest_address0 <= ap_const_lv32_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            digest_address0 <= ap_const_lv32_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            digest_address0 <= ap_const_lv32_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            digest_address0 <= ap_const_lv32_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            digest_address0 <= ap_const_lv32_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            digest_address0 <= ap_const_lv32_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            digest_address0 <= ap_const_lv32_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            digest_address0 <= ap_const_lv32_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            digest_address0 <= ap_const_lv32_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            digest_address0 <= ap_const_lv32_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            digest_address0 <= ap_const_lv32_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            digest_address0 <= ap_const_lv32_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            digest_address0 <= ap_const_lv32_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            digest_address0 <= ap_const_lv32_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            digest_address0 <= ap_const_lv32_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            digest_address0 <= ap_const_lv32_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            digest_address0 <= ap_const_lv32_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            digest_address0 <= ap_const_lv32_1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            digest_address0 <= ap_const_lv32_0(5 - 1 downto 0);
        else 
            digest_address0 <= "XXXXX";
        end if; 
    end process;


    digest_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            digest_ce0 <= ap_const_logic_1;
        else 
            digest_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    digest_we0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            digest_we0 <= ap_const_logic_1;
        else 
            digest_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond4_fu_1262_p2 <= "1" when (i_1_cast_fu_1258_p1 = n_load_reg_1396) else "0";
    exitcond5_fu_1201_p2 <= "1" when (i9_reg_814 = ap_const_lv7_40) else "0";
    grp_sha256_final_fu_836_ap_start <= ap_reg_grp_sha256_final_fu_836_ap_start;
    grp_sha256_update_fu_855_ap_start <= ap_reg_grp_sha256_update_fu_855_ap_start;

    grp_sha256_update_fu_855_ctx_datalen_read_assign_proc : process(reg_1033, icmp_reg_1406, sha256ctx_datalen_lo_1_reg_1446, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
            if ((ap_const_lv1_1 = icmp_reg_1406)) then 
                grp_sha256_update_fu_855_ctx_datalen_read <= sha256ctx_datalen_lo_1_reg_1446;
            elsif ((icmp_reg_1406 = ap_const_lv1_0)) then 
                grp_sha256_update_fu_855_ctx_datalen_read <= reg_1033;
            else 
                grp_sha256_update_fu_855_ctx_datalen_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_sha256_update_fu_855_ctx_datalen_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_sha256_update_fu_855_len_assign_proc : process(n_load_reg_1396, icmp_reg_1406, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
            if ((ap_const_lv1_1 = icmp_reg_1406)) then 
                grp_sha256_update_fu_855_len <= n_load_reg_1396;
            elsif ((icmp_reg_1406 = ap_const_lv1_0)) then 
                grp_sha256_update_fu_855_len <= ap_const_lv32_40;
            else 
                grp_sha256_update_fu_855_len <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_sha256_update_fu_855_len <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_sha256_update_fu_855_p_read1_assign_proc : process(reg_1039, icmp_reg_1406, sha256ctx_bitlen_0_1_reg_1451, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
            if ((ap_const_lv1_1 = icmp_reg_1406)) then 
                grp_sha256_update_fu_855_p_read1 <= sha256ctx_bitlen_0_1_reg_1451;
            elsif ((icmp_reg_1406 = ap_const_lv1_0)) then 
                grp_sha256_update_fu_855_p_read1 <= reg_1039;
            else 
                grp_sha256_update_fu_855_p_read1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_sha256_update_fu_855_p_read1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_sha256_update_fu_855_p_read10_assign_proc : process(reg_1093, icmp_reg_1406, sha256ctx_state_7_2_2_reg_1496, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
            if ((ap_const_lv1_1 = icmp_reg_1406)) then 
                grp_sha256_update_fu_855_p_read10 <= sha256ctx_state_7_2_2_reg_1496;
            elsif ((icmp_reg_1406 = ap_const_lv1_0)) then 
                grp_sha256_update_fu_855_p_read10 <= reg_1093;
            else 
                grp_sha256_update_fu_855_p_read10 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_sha256_update_fu_855_p_read10 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_sha256_update_fu_855_p_read2_assign_proc : process(reg_1045, icmp_reg_1406, sha256ctx_bitlen_1_1_reg_1456, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
            if ((ap_const_lv1_1 = icmp_reg_1406)) then 
                grp_sha256_update_fu_855_p_read2 <= sha256ctx_bitlen_1_1_reg_1456;
            elsif ((icmp_reg_1406 = ap_const_lv1_0)) then 
                grp_sha256_update_fu_855_p_read2 <= reg_1045;
            else 
                grp_sha256_update_fu_855_p_read2 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_sha256_update_fu_855_p_read2 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_sha256_update_fu_855_p_read3_assign_proc : process(reg_1051, icmp_reg_1406, sha256ctx_state_0_2_2_reg_1461, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
            if ((ap_const_lv1_1 = icmp_reg_1406)) then 
                grp_sha256_update_fu_855_p_read3 <= sha256ctx_state_0_2_2_reg_1461;
            elsif ((icmp_reg_1406 = ap_const_lv1_0)) then 
                grp_sha256_update_fu_855_p_read3 <= reg_1051;
            else 
                grp_sha256_update_fu_855_p_read3 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_sha256_update_fu_855_p_read3 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_sha256_update_fu_855_p_read4_assign_proc : process(reg_1057, icmp_reg_1406, sha256ctx_state_1_2_2_reg_1466, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
            if ((ap_const_lv1_1 = icmp_reg_1406)) then 
                grp_sha256_update_fu_855_p_read4 <= sha256ctx_state_1_2_2_reg_1466;
            elsif ((icmp_reg_1406 = ap_const_lv1_0)) then 
                grp_sha256_update_fu_855_p_read4 <= reg_1057;
            else 
                grp_sha256_update_fu_855_p_read4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_sha256_update_fu_855_p_read4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_sha256_update_fu_855_p_read5_assign_proc : process(reg_1063, icmp_reg_1406, sha256ctx_state_2_2_2_reg_1471, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
            if ((ap_const_lv1_1 = icmp_reg_1406)) then 
                grp_sha256_update_fu_855_p_read5 <= sha256ctx_state_2_2_2_reg_1471;
            elsif ((icmp_reg_1406 = ap_const_lv1_0)) then 
                grp_sha256_update_fu_855_p_read5 <= reg_1063;
            else 
                grp_sha256_update_fu_855_p_read5 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_sha256_update_fu_855_p_read5 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_sha256_update_fu_855_p_read6_assign_proc : process(reg_1069, icmp_reg_1406, sha256ctx_state_3_2_2_reg_1476, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
            if ((ap_const_lv1_1 = icmp_reg_1406)) then 
                grp_sha256_update_fu_855_p_read6 <= sha256ctx_state_3_2_2_reg_1476;
            elsif ((icmp_reg_1406 = ap_const_lv1_0)) then 
                grp_sha256_update_fu_855_p_read6 <= reg_1069;
            else 
                grp_sha256_update_fu_855_p_read6 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_sha256_update_fu_855_p_read6 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_sha256_update_fu_855_p_read7_assign_proc : process(reg_1075, icmp_reg_1406, sha256ctx_state_4_2_2_reg_1481, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
            if ((ap_const_lv1_1 = icmp_reg_1406)) then 
                grp_sha256_update_fu_855_p_read7 <= sha256ctx_state_4_2_2_reg_1481;
            elsif ((icmp_reg_1406 = ap_const_lv1_0)) then 
                grp_sha256_update_fu_855_p_read7 <= reg_1075;
            else 
                grp_sha256_update_fu_855_p_read7 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_sha256_update_fu_855_p_read7 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_sha256_update_fu_855_p_read8_assign_proc : process(reg_1081, icmp_reg_1406, sha256ctx_state_5_2_2_reg_1486, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
            if ((ap_const_lv1_1 = icmp_reg_1406)) then 
                grp_sha256_update_fu_855_p_read8 <= sha256ctx_state_5_2_2_reg_1486;
            elsif ((icmp_reg_1406 = ap_const_lv1_0)) then 
                grp_sha256_update_fu_855_p_read8 <= reg_1081;
            else 
                grp_sha256_update_fu_855_p_read8 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_sha256_update_fu_855_p_read8 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_sha256_update_fu_855_p_read9_assign_proc : process(reg_1087, icmp_reg_1406, sha256ctx_state_6_2_2_reg_1491, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
            if ((ap_const_lv1_1 = icmp_reg_1406)) then 
                grp_sha256_update_fu_855_p_read9 <= sha256ctx_state_6_2_2_reg_1491;
            elsif ((icmp_reg_1406 = ap_const_lv1_0)) then 
                grp_sha256_update_fu_855_p_read9 <= reg_1087;
            else 
                grp_sha256_update_fu_855_p_read9 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_sha256_update_fu_855_p_read9 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i9_cast4_fu_1197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i9_reg_814),32));
    i9_cast5_fu_1193_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i9_reg_814),10));
    i_1_cast3_fu_1254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_825),10));
    i_1_cast_fu_1258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_825),32));
    i_7_fu_1267_p2 <= std_logic_vector(unsigned(i_1_reg_825) + unsigned(ap_const_lv6_1));
    i_fu_1207_p2 <= std_logic_vector(unsigned(i9_reg_814) + unsigned(ap_const_lv7_1));
    icmp_fu_1187_p2 <= "1" when (tmp_97_fu_1177_p4 = ap_const_lv26_0) else "0";
    n_1_fu_1233_p2 <= std_logic_vector(unsigned(n_load_reg_1396) + unsigned(ap_const_lv32_FFFFFFC0));

    seg_buf_address0_assign_proc : process(icmp_reg_1406, i9_cast4_reg_1410, i_1_cast_reg_1428, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, grp_sha256_final_fu_836_hash_address0, grp_sha256_update_fu_855_data_address0, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            seg_buf_address0 <= ap_const_lv32_1F(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            seg_buf_address0 <= ap_const_lv32_1E(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            seg_buf_address0 <= ap_const_lv32_1D(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            seg_buf_address0 <= ap_const_lv32_1C(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            seg_buf_address0 <= ap_const_lv32_1B(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            seg_buf_address0 <= ap_const_lv32_1A(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            seg_buf_address0 <= ap_const_lv32_19(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            seg_buf_address0 <= ap_const_lv32_18(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            seg_buf_address0 <= ap_const_lv32_17(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            seg_buf_address0 <= ap_const_lv32_16(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            seg_buf_address0 <= ap_const_lv32_15(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            seg_buf_address0 <= ap_const_lv32_14(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            seg_buf_address0 <= ap_const_lv32_13(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            seg_buf_address0 <= ap_const_lv32_12(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            seg_buf_address0 <= ap_const_lv32_11(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            seg_buf_address0 <= ap_const_lv32_10(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            seg_buf_address0 <= ap_const_lv32_F(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            seg_buf_address0 <= ap_const_lv32_E(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            seg_buf_address0 <= ap_const_lv32_D(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            seg_buf_address0 <= ap_const_lv32_C(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            seg_buf_address0 <= ap_const_lv32_B(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            seg_buf_address0 <= ap_const_lv32_A(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            seg_buf_address0 <= ap_const_lv32_9(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            seg_buf_address0 <= ap_const_lv32_8(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            seg_buf_address0 <= ap_const_lv32_7(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            seg_buf_address0 <= ap_const_lv32_6(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            seg_buf_address0 <= ap_const_lv32_5(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            seg_buf_address0 <= ap_const_lv32_4(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            seg_buf_address0 <= ap_const_lv32_3(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            seg_buf_address0 <= ap_const_lv32_2(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            seg_buf_address0 <= ap_const_lv32_1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            seg_buf_address0 <= ap_const_lv32_0(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            seg_buf_address0 <= i_1_cast_reg_1428(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            seg_buf_address0 <= i9_cast4_reg_1410(6 - 1 downto 0);
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_reg_1406 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = icmp_reg_1406)))) then 
            seg_buf_address0 <= grp_sha256_update_fu_855_data_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            seg_buf_address0 <= grp_sha256_final_fu_836_hash_address0;
        else 
            seg_buf_address0 <= "XXXXXX";
        end if; 
    end process;


    seg_buf_ce0_assign_proc : process(icmp_reg_1406, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, grp_sha256_final_fu_836_hash_ce0, grp_sha256_update_fu_855_data_ce0, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            seg_buf_ce0 <= ap_const_logic_1;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_reg_1406 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = icmp_reg_1406)))) then 
            seg_buf_ce0 <= grp_sha256_update_fu_855_data_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            seg_buf_ce0 <= grp_sha256_final_fu_836_hash_ce0;
        else 
            seg_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    seg_buf_ce1_assign_proc : process(grp_sha256_final_fu_836_hash_ce1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            seg_buf_ce1 <= grp_sha256_final_fu_836_hash_ce1;
        else 
            seg_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    seg_buf_d0_assign_proc : process(data_q0, grp_sha256_final_fu_836_hash_d0, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            seg_buf_d0 <= data_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            seg_buf_d0 <= grp_sha256_final_fu_836_hash_d0;
        else 
            seg_buf_d0 <= "XXXXXXXX";
        end if; 
    end process;


    seg_buf_we0_assign_proc : process(grp_sha256_final_fu_836_hash_we0, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            seg_buf_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            seg_buf_we0 <= grp_sha256_final_fu_836_hash_we0;
        else 
            seg_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    seg_buf_we1_assign_proc : process(grp_sha256_final_fu_836_hash_we1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            seg_buf_we1 <= grp_sha256_final_fu_836_hash_we1;
        else 
            seg_buf_we1 <= ap_const_logic_0;
        end if; 
    end process;

    seg_offset_1_fu_1243_p2 <= std_logic_vector(unsigned(seg_offset_fu_202) + unsigned(ap_const_lv32_40));

    sha256ctx_data_address0_assign_proc : process(icmp_reg_1406, grp_sha256_final_fu_836_ctx_data_address0, grp_sha256_update_fu_855_ctx_data_address0, ap_CS_fsm_state8, ap_CS_fsm_state5)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_reg_1406 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = icmp_reg_1406)))) then 
            sha256ctx_data_address0 <= grp_sha256_update_fu_855_ctx_data_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sha256ctx_data_address0 <= grp_sha256_final_fu_836_ctx_data_address0;
        else 
            sha256ctx_data_address0 <= "XXXXXX";
        end if; 
    end process;


    sha256ctx_data_address1_assign_proc : process(icmp_reg_1406, grp_sha256_final_fu_836_ctx_data_address1, grp_sha256_update_fu_855_ctx_data_address1, ap_CS_fsm_state8, ap_CS_fsm_state5)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_reg_1406 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = icmp_reg_1406)))) then 
            sha256ctx_data_address1 <= grp_sha256_update_fu_855_ctx_data_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sha256ctx_data_address1 <= grp_sha256_final_fu_836_ctx_data_address1;
        else 
            sha256ctx_data_address1 <= "XXXXXX";
        end if; 
    end process;


    sha256ctx_data_ce0_assign_proc : process(icmp_reg_1406, grp_sha256_final_fu_836_ctx_data_ce0, grp_sha256_update_fu_855_ctx_data_ce0, ap_CS_fsm_state8, ap_CS_fsm_state5)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_reg_1406 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = icmp_reg_1406)))) then 
            sha256ctx_data_ce0 <= grp_sha256_update_fu_855_ctx_data_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sha256ctx_data_ce0 <= grp_sha256_final_fu_836_ctx_data_ce0;
        else 
            sha256ctx_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sha256ctx_data_ce1_assign_proc : process(icmp_reg_1406, grp_sha256_final_fu_836_ctx_data_ce1, grp_sha256_update_fu_855_ctx_data_ce1, ap_CS_fsm_state8, ap_CS_fsm_state5)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_reg_1406 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = icmp_reg_1406)))) then 
            sha256ctx_data_ce1 <= grp_sha256_update_fu_855_ctx_data_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sha256ctx_data_ce1 <= grp_sha256_final_fu_836_ctx_data_ce1;
        else 
            sha256ctx_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sha256ctx_data_d0_assign_proc : process(icmp_reg_1406, grp_sha256_final_fu_836_ctx_data_d0, grp_sha256_update_fu_855_ctx_data_d0, ap_CS_fsm_state8, ap_CS_fsm_state5)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_reg_1406 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = icmp_reg_1406)))) then 
            sha256ctx_data_d0 <= grp_sha256_update_fu_855_ctx_data_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sha256ctx_data_d0 <= grp_sha256_final_fu_836_ctx_data_d0;
        else 
            sha256ctx_data_d0 <= "XXXXXXXX";
        end if; 
    end process;


    sha256ctx_data_we0_assign_proc : process(icmp_reg_1406, grp_sha256_final_fu_836_ctx_data_we0, grp_sha256_update_fu_855_ctx_data_we0, ap_CS_fsm_state8, ap_CS_fsm_state5)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_reg_1406 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = icmp_reg_1406)))) then 
            sha256ctx_data_we0 <= grp_sha256_update_fu_855_ctx_data_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sha256ctx_data_we0 <= grp_sha256_final_fu_836_ctx_data_we0;
        else 
            sha256ctx_data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sha256ctx_data_we1_assign_proc : process(grp_sha256_final_fu_836_ctx_data_we1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sha256ctx_data_we1 <= grp_sha256_final_fu_836_ctx_data_we1;
        else 
            sha256ctx_data_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sum2_cast_fu_1288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_fu_1282_p2),32));
    sum2_fu_1282_p2 <= std_logic_vector(unsigned(tmp_98_fu_1278_p1) + unsigned(tmp2_fu_1273_p2));
    sum_cast_fu_1228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_fu_1222_p2),32));
    sum_fu_1222_p2 <= std_logic_vector(unsigned(tmp_99_fu_1218_p1) + unsigned(tmp1_fu_1213_p2));
    tmp1_fu_1213_p2 <= std_logic_vector(unsigned(tmp_96_reg_1390) + unsigned(i9_cast5_fu_1193_p1));
    tmp2_fu_1273_p2 <= std_logic_vector(unsigned(tmp_96_reg_1390) + unsigned(i_1_cast3_fu_1254_p1));
    tmp_96_fu_1099_p1 <= base_offset(10 - 1 downto 0);
    tmp_97_fu_1177_p4 <= n_fu_154(31 downto 6);
    tmp_98_fu_1278_p1 <= seg_offset_fu_202(10 - 1 downto 0);
    tmp_99_fu_1218_p1 <= seg_offset_fu_202(10 - 1 downto 0);
    tmp_fu_1171_p2 <= "1" when (n_fu_154 = ap_const_lv32_0) else "0";
end behav;
