// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "sha256.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic sha256::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic sha256::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<41> sha256::ap_ST_fsm_state1 = "1";
const sc_lv<41> sha256::ap_ST_fsm_state2 = "10";
const sc_lv<41> sha256::ap_ST_fsm_state3 = "100";
const sc_lv<41> sha256::ap_ST_fsm_state4 = "1000";
const sc_lv<41> sha256::ap_ST_fsm_state5 = "10000";
const sc_lv<41> sha256::ap_ST_fsm_state6 = "100000";
const sc_lv<41> sha256::ap_ST_fsm_state7 = "1000000";
const sc_lv<41> sha256::ap_ST_fsm_state8 = "10000000";
const sc_lv<41> sha256::ap_ST_fsm_state9 = "100000000";
const sc_lv<41> sha256::ap_ST_fsm_state10 = "1000000000";
const sc_lv<41> sha256::ap_ST_fsm_state11 = "10000000000";
const sc_lv<41> sha256::ap_ST_fsm_state12 = "100000000000";
const sc_lv<41> sha256::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<41> sha256::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<41> sha256::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<41> sha256::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<41> sha256::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<41> sha256::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<41> sha256::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<41> sha256::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<41> sha256::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<41> sha256::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<41> sha256::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<41> sha256::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<41> sha256::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<41> sha256::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<41> sha256::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<41> sha256::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<41> sha256::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<41> sha256::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<41> sha256::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<41> sha256::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<41> sha256::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<41> sha256::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<41> sha256::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<41> sha256::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<41> sha256::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<41> sha256::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<41> sha256::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<41> sha256::ap_ST_fsm_state40 = "1000000000000000000000000000000000000000";
const sc_lv<41> sha256::ap_ST_fsm_state41 = "10000000000000000000000000000000000000000";
const sc_lv<32> sha256::ap_const_lv32_0 = "00000000000000000000000000000000";
const int sha256::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> sha256::ap_const_lv32_1 = "1";
const sc_lv<1> sha256::ap_const_lv1_1 = "1";
const sc_lv<32> sha256::ap_const_lv32_2 = "10";
const sc_lv<1> sha256::ap_const_lv1_0 = "0";
const sc_lv<32> sha256::ap_const_lv32_5 = "101";
const sc_lv<32> sha256::ap_const_lv32_8 = "1000";
const sc_lv<32> sha256::ap_const_lv32_9 = "1001";
const sc_lv<32> sha256::ap_const_lv32_A = "1010";
const sc_lv<32> sha256::ap_const_lv32_B = "1011";
const sc_lv<32> sha256::ap_const_lv32_C = "1100";
const sc_lv<32> sha256::ap_const_lv32_D = "1101";
const sc_lv<32> sha256::ap_const_lv32_E = "1110";
const sc_lv<32> sha256::ap_const_lv32_F = "1111";
const sc_lv<32> sha256::ap_const_lv32_10 = "10000";
const sc_lv<32> sha256::ap_const_lv32_11 = "10001";
const sc_lv<32> sha256::ap_const_lv32_12 = "10010";
const sc_lv<32> sha256::ap_const_lv32_13 = "10011";
const sc_lv<32> sha256::ap_const_lv32_14 = "10100";
const sc_lv<32> sha256::ap_const_lv32_15 = "10101";
const sc_lv<32> sha256::ap_const_lv32_16 = "10110";
const sc_lv<32> sha256::ap_const_lv32_17 = "10111";
const sc_lv<32> sha256::ap_const_lv32_18 = "11000";
const sc_lv<32> sha256::ap_const_lv32_19 = "11001";
const sc_lv<32> sha256::ap_const_lv32_1A = "11010";
const sc_lv<32> sha256::ap_const_lv32_1B = "11011";
const sc_lv<32> sha256::ap_const_lv32_1C = "11100";
const sc_lv<32> sha256::ap_const_lv32_1D = "11101";
const sc_lv<32> sha256::ap_const_lv32_1E = "11110";
const sc_lv<32> sha256::ap_const_lv32_1F = "11111";
const sc_lv<32> sha256::ap_const_lv32_20 = "100000";
const sc_lv<32> sha256::ap_const_lv32_21 = "100001";
const sc_lv<32> sha256::ap_const_lv32_22 = "100010";
const sc_lv<32> sha256::ap_const_lv32_23 = "100011";
const sc_lv<32> sha256::ap_const_lv32_24 = "100100";
const sc_lv<32> sha256::ap_const_lv32_25 = "100101";
const sc_lv<32> sha256::ap_const_lv32_26 = "100110";
const sc_lv<32> sha256::ap_const_lv32_27 = "100111";
const sc_lv<32> sha256::ap_const_lv32_3 = "11";
const sc_lv<7> sha256::ap_const_lv7_0 = "0000000";
const sc_lv<32> sha256::ap_const_lv32_6 = "110";
const sc_lv<6> sha256::ap_const_lv6_0 = "000000";
const sc_lv<32> sha256::ap_const_lv32_7 = "111";
const sc_lv<32> sha256::ap_const_lv32_4 = "100";
const sc_lv<32> sha256::ap_const_lv32_40 = "1000000";
const sc_lv<32> sha256::ap_const_lv32_28 = "101000";
const bool sha256::ap_const_boolean_0 = false;
const sc_lv<32> sha256::ap_const_lv32_6A09E667 = "1101010000010011110011001100111";
const sc_lv<32> sha256::ap_const_lv32_BB67AE85 = "10111011011001111010111010000101";
const sc_lv<32> sha256::ap_const_lv32_3C6EF372 = "111100011011101111001101110010";
const sc_lv<32> sha256::ap_const_lv32_A54FF53A = "10100101010011111111010100111010";
const sc_lv<32> sha256::ap_const_lv32_510E527F = "1010001000011100101001001111111";
const sc_lv<32> sha256::ap_const_lv32_9B05688C = "10011011000001010110100010001100";
const sc_lv<32> sha256::ap_const_lv32_1F83D9AB = "11111100000111101100110101011";
const sc_lv<32> sha256::ap_const_lv32_5BE0CD19 = "1011011111000001100110100011001";
const sc_lv<26> sha256::ap_const_lv26_0 = "00000000000000000000000000";
const sc_lv<7> sha256::ap_const_lv7_40 = "1000000";
const sc_lv<7> sha256::ap_const_lv7_1 = "1";
const sc_lv<32> sha256::ap_const_lv32_FFFFFFC0 = "11111111111111111111111111000000";
const sc_lv<6> sha256::ap_const_lv6_1 = "1";
const bool sha256::ap_const_boolean_1 = true;

sha256::sha256(sc_module_name name) : sc_module(name), mVcdFile(0) {
    sha256_AXILiteS_s_axi_U = new sha256_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("sha256_AXILiteS_s_axi_U");
    sha256_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    sha256_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    sha256_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    sha256_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    sha256_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    sha256_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    sha256_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    sha256_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    sha256_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    sha256_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    sha256_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    sha256_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    sha256_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    sha256_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    sha256_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    sha256_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    sha256_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    sha256_AXILiteS_s_axi_U->ACLK(ap_clk);
    sha256_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    sha256_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    sha256_AXILiteS_s_axi_U->ap_start(ap_start);
    sha256_AXILiteS_s_axi_U->interrupt(interrupt);
    sha256_AXILiteS_s_axi_U->ap_ready(ap_ready);
    sha256_AXILiteS_s_axi_U->ap_done(ap_done);
    sha256_AXILiteS_s_axi_U->ap_idle(ap_idle);
    sha256_AXILiteS_s_axi_U->data_address0(data_address0);
    sha256_AXILiteS_s_axi_U->data_ce0(data_ce0);
    sha256_AXILiteS_s_axi_U->data_q0(data_q0);
    sha256_AXILiteS_s_axi_U->base_offset(base_offset);
    sha256_AXILiteS_s_axi_U->bytes(bytes);
    sha256_AXILiteS_s_axi_U->digest_address0(digest_address0);
    sha256_AXILiteS_s_axi_U->digest_ce0(digest_ce0);
    sha256_AXILiteS_s_axi_U->digest_we0(digest_we0);
    sha256_AXILiteS_s_axi_U->digest_d0(seg_buf_q0);
    seg_buf_U = new sha256_seg_buf("seg_buf_U");
    seg_buf_U->clk(ap_clk);
    seg_buf_U->reset(ap_rst_n_inv);
    seg_buf_U->address0(seg_buf_address0);
    seg_buf_U->ce0(seg_buf_ce0);
    seg_buf_U->we0(seg_buf_we0);
    seg_buf_U->d0(seg_buf_d0);
    seg_buf_U->q0(seg_buf_q0);
    seg_buf_U->address1(grp_sha256_final_fu_836_hash_address1);
    seg_buf_U->ce1(seg_buf_ce1);
    seg_buf_U->we1(seg_buf_we1);
    seg_buf_U->d1(grp_sha256_final_fu_836_hash_d1);
    sha256ctx_data_U = new sha256_sha256ctx_bkb("sha256ctx_data_U");
    sha256ctx_data_U->clk(ap_clk);
    sha256ctx_data_U->reset(ap_rst_n_inv);
    sha256ctx_data_U->address0(sha256ctx_data_address0);
    sha256ctx_data_U->ce0(sha256ctx_data_ce0);
    sha256ctx_data_U->we0(sha256ctx_data_we0);
    sha256ctx_data_U->d0(sha256ctx_data_d0);
    sha256ctx_data_U->q0(sha256ctx_data_q0);
    sha256ctx_data_U->address1(sha256ctx_data_address1);
    sha256ctx_data_U->ce1(sha256ctx_data_ce1);
    sha256ctx_data_U->we1(sha256ctx_data_we1);
    sha256ctx_data_U->d1(grp_sha256_final_fu_836_ctx_data_d1);
    sha256ctx_data_U->q1(sha256ctx_data_q1);
    grp_sha256_final_fu_836 = new sha256_final("grp_sha256_final_fu_836");
    grp_sha256_final_fu_836->ap_clk(ap_clk);
    grp_sha256_final_fu_836->ap_rst(ap_rst_n_inv);
    grp_sha256_final_fu_836->ap_start(grp_sha256_final_fu_836_ap_start);
    grp_sha256_final_fu_836->ap_done(grp_sha256_final_fu_836_ap_done);
    grp_sha256_final_fu_836->ap_idle(grp_sha256_final_fu_836_ap_idle);
    grp_sha256_final_fu_836->ap_ready(grp_sha256_final_fu_836_ap_ready);
    grp_sha256_final_fu_836->ctx_data_address0(grp_sha256_final_fu_836_ctx_data_address0);
    grp_sha256_final_fu_836->ctx_data_ce0(grp_sha256_final_fu_836_ctx_data_ce0);
    grp_sha256_final_fu_836->ctx_data_we0(grp_sha256_final_fu_836_ctx_data_we0);
    grp_sha256_final_fu_836->ctx_data_d0(grp_sha256_final_fu_836_ctx_data_d0);
    grp_sha256_final_fu_836->ctx_data_q0(sha256ctx_data_q0);
    grp_sha256_final_fu_836->ctx_data_address1(grp_sha256_final_fu_836_ctx_data_address1);
    grp_sha256_final_fu_836->ctx_data_ce1(grp_sha256_final_fu_836_ctx_data_ce1);
    grp_sha256_final_fu_836->ctx_data_we1(grp_sha256_final_fu_836_ctx_data_we1);
    grp_sha256_final_fu_836->ctx_data_d1(grp_sha256_final_fu_836_ctx_data_d1);
    grp_sha256_final_fu_836->ctx_data_q1(sha256ctx_data_q1);
    grp_sha256_final_fu_836->ctx_datalen_read(reg_1033);
    grp_sha256_final_fu_836->ctx_bitlen_0_read(reg_1039);
    grp_sha256_final_fu_836->p_read3(reg_1045);
    grp_sha256_final_fu_836->p_read1(reg_1051);
    grp_sha256_final_fu_836->p_read2(reg_1057);
    grp_sha256_final_fu_836->p_read4(reg_1063);
    grp_sha256_final_fu_836->p_read5(reg_1069);
    grp_sha256_final_fu_836->p_read6(reg_1075);
    grp_sha256_final_fu_836->p_read7(reg_1081);
    grp_sha256_final_fu_836->p_read8(reg_1087);
    grp_sha256_final_fu_836->p_read9(reg_1093);
    grp_sha256_final_fu_836->hash_address0(grp_sha256_final_fu_836_hash_address0);
    grp_sha256_final_fu_836->hash_ce0(grp_sha256_final_fu_836_hash_ce0);
    grp_sha256_final_fu_836->hash_we0(grp_sha256_final_fu_836_hash_we0);
    grp_sha256_final_fu_836->hash_d0(grp_sha256_final_fu_836_hash_d0);
    grp_sha256_final_fu_836->hash_address1(grp_sha256_final_fu_836_hash_address1);
    grp_sha256_final_fu_836->hash_ce1(grp_sha256_final_fu_836_hash_ce1);
    grp_sha256_final_fu_836->hash_we1(grp_sha256_final_fu_836_hash_we1);
    grp_sha256_final_fu_836->hash_d1(grp_sha256_final_fu_836_hash_d1);
    grp_sha256_update_fu_855 = new sha256_update("grp_sha256_update_fu_855");
    grp_sha256_update_fu_855->ap_clk(ap_clk);
    grp_sha256_update_fu_855->ap_rst(ap_rst_n_inv);
    grp_sha256_update_fu_855->ap_start(grp_sha256_update_fu_855_ap_start);
    grp_sha256_update_fu_855->ap_done(grp_sha256_update_fu_855_ap_done);
    grp_sha256_update_fu_855->ap_idle(grp_sha256_update_fu_855_ap_idle);
    grp_sha256_update_fu_855->ap_ready(grp_sha256_update_fu_855_ap_ready);
    grp_sha256_update_fu_855->ctx_data_address0(grp_sha256_update_fu_855_ctx_data_address0);
    grp_sha256_update_fu_855->ctx_data_ce0(grp_sha256_update_fu_855_ctx_data_ce0);
    grp_sha256_update_fu_855->ctx_data_we0(grp_sha256_update_fu_855_ctx_data_we0);
    grp_sha256_update_fu_855->ctx_data_d0(grp_sha256_update_fu_855_ctx_data_d0);
    grp_sha256_update_fu_855->ctx_data_q0(sha256ctx_data_q0);
    grp_sha256_update_fu_855->ctx_data_address1(grp_sha256_update_fu_855_ctx_data_address1);
    grp_sha256_update_fu_855->ctx_data_ce1(grp_sha256_update_fu_855_ctx_data_ce1);
    grp_sha256_update_fu_855->ctx_data_q1(sha256ctx_data_q1);
    grp_sha256_update_fu_855->ctx_datalen_read(grp_sha256_update_fu_855_ctx_datalen_read);
    grp_sha256_update_fu_855->p_read1(grp_sha256_update_fu_855_p_read1);
    grp_sha256_update_fu_855->p_read2(grp_sha256_update_fu_855_p_read2);
    grp_sha256_update_fu_855->p_read3(grp_sha256_update_fu_855_p_read3);
    grp_sha256_update_fu_855->p_read4(grp_sha256_update_fu_855_p_read4);
    grp_sha256_update_fu_855->p_read5(grp_sha256_update_fu_855_p_read5);
    grp_sha256_update_fu_855->p_read6(grp_sha256_update_fu_855_p_read6);
    grp_sha256_update_fu_855->p_read7(grp_sha256_update_fu_855_p_read7);
    grp_sha256_update_fu_855->p_read8(grp_sha256_update_fu_855_p_read8);
    grp_sha256_update_fu_855->p_read9(grp_sha256_update_fu_855_p_read9);
    grp_sha256_update_fu_855->p_read10(grp_sha256_update_fu_855_p_read10);
    grp_sha256_update_fu_855->data_address0(grp_sha256_update_fu_855_data_address0);
    grp_sha256_update_fu_855->data_ce0(grp_sha256_update_fu_855_data_ce0);
    grp_sha256_update_fu_855->data_q0(seg_buf_q0);
    grp_sha256_update_fu_855->len(grp_sha256_update_fu_855_len);
    grp_sha256_update_fu_855->ap_return_0(grp_sha256_update_fu_855_ap_return_0);
    grp_sha256_update_fu_855->ap_return_1(grp_sha256_update_fu_855_ap_return_1);
    grp_sha256_update_fu_855->ap_return_2(grp_sha256_update_fu_855_ap_return_2);
    grp_sha256_update_fu_855->ap_return_3(grp_sha256_update_fu_855_ap_return_3);
    grp_sha256_update_fu_855->ap_return_4(grp_sha256_update_fu_855_ap_return_4);
    grp_sha256_update_fu_855->ap_return_5(grp_sha256_update_fu_855_ap_return_5);
    grp_sha256_update_fu_855->ap_return_6(grp_sha256_update_fu_855_ap_return_6);
    grp_sha256_update_fu_855->ap_return_7(grp_sha256_update_fu_855_ap_return_7);
    grp_sha256_update_fu_855->ap_return_8(grp_sha256_update_fu_855_ap_return_8);
    grp_sha256_update_fu_855->ap_return_9(grp_sha256_update_fu_855_ap_return_9);
    grp_sha256_update_fu_855->ap_return_10(grp_sha256_update_fu_855_ap_return_10);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state28);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state29);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state30);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state31);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state32);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state33);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state34);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state35);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state36);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state37);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state38);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state39);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state40);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state41);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state5_on_subcall_done);
    sensitive << ( icmp_reg_1406 );
    sensitive << ( grp_sha256_update_fu_855_ap_done );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state41 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state41 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_data_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( sum_cast_fu_1228_p1 );
    sensitive << ( sum2_cast_fu_1288_p1 );

    SC_METHOD(thread_data_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_digest_address0);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( ap_CS_fsm_state41 );

    SC_METHOD(thread_digest_ce0);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( ap_CS_fsm_state41 );

    SC_METHOD(thread_digest_we0);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( ap_CS_fsm_state41 );

    SC_METHOD(thread_exitcond4_fu_1262_p2);
    sensitive << ( n_load_reg_1396 );
    sensitive << ( i_1_cast_fu_1258_p1 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_exitcond5_fu_1201_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( i9_reg_814 );

    SC_METHOD(thread_grp_sha256_final_fu_836_ap_start);
    sensitive << ( ap_reg_grp_sha256_final_fu_836_ap_start );

    SC_METHOD(thread_grp_sha256_update_fu_855_ap_start);
    sensitive << ( ap_reg_grp_sha256_update_fu_855_ap_start );

    SC_METHOD(thread_grp_sha256_update_fu_855_ctx_datalen_read);
    sensitive << ( reg_1033 );
    sensitive << ( icmp_reg_1406 );
    sensitive << ( sha256ctx_datalen_lo_1_reg_1446 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_grp_sha256_update_fu_855_len);
    sensitive << ( n_load_reg_1396 );
    sensitive << ( icmp_reg_1406 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_grp_sha256_update_fu_855_p_read1);
    sensitive << ( reg_1039 );
    sensitive << ( icmp_reg_1406 );
    sensitive << ( sha256ctx_bitlen_0_1_reg_1451 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_grp_sha256_update_fu_855_p_read10);
    sensitive << ( reg_1093 );
    sensitive << ( icmp_reg_1406 );
    sensitive << ( sha256ctx_state_7_2_2_reg_1496 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_grp_sha256_update_fu_855_p_read2);
    sensitive << ( reg_1045 );
    sensitive << ( icmp_reg_1406 );
    sensitive << ( sha256ctx_bitlen_1_1_reg_1456 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_grp_sha256_update_fu_855_p_read3);
    sensitive << ( reg_1051 );
    sensitive << ( icmp_reg_1406 );
    sensitive << ( sha256ctx_state_0_2_2_reg_1461 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_grp_sha256_update_fu_855_p_read4);
    sensitive << ( reg_1057 );
    sensitive << ( icmp_reg_1406 );
    sensitive << ( sha256ctx_state_1_2_2_reg_1466 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_grp_sha256_update_fu_855_p_read5);
    sensitive << ( reg_1063 );
    sensitive << ( icmp_reg_1406 );
    sensitive << ( sha256ctx_state_2_2_2_reg_1471 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_grp_sha256_update_fu_855_p_read6);
    sensitive << ( reg_1069 );
    sensitive << ( icmp_reg_1406 );
    sensitive << ( sha256ctx_state_3_2_2_reg_1476 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_grp_sha256_update_fu_855_p_read7);
    sensitive << ( reg_1075 );
    sensitive << ( icmp_reg_1406 );
    sensitive << ( sha256ctx_state_4_2_2_reg_1481 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_grp_sha256_update_fu_855_p_read8);
    sensitive << ( reg_1081 );
    sensitive << ( icmp_reg_1406 );
    sensitive << ( sha256ctx_state_5_2_2_reg_1486 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_grp_sha256_update_fu_855_p_read9);
    sensitive << ( reg_1087 );
    sensitive << ( icmp_reg_1406 );
    sensitive << ( sha256ctx_state_6_2_2_reg_1491 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_i9_cast4_fu_1197_p1);
    sensitive << ( i9_reg_814 );

    SC_METHOD(thread_i9_cast5_fu_1193_p1);
    sensitive << ( i9_reg_814 );

    SC_METHOD(thread_i_1_cast3_fu_1254_p1);
    sensitive << ( i_1_reg_825 );

    SC_METHOD(thread_i_1_cast_fu_1258_p1);
    sensitive << ( i_1_reg_825 );

    SC_METHOD(thread_i_7_fu_1267_p2);
    sensitive << ( i_1_reg_825 );

    SC_METHOD(thread_i_fu_1207_p2);
    sensitive << ( i9_reg_814 );

    SC_METHOD(thread_icmp_fu_1187_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_1171_p2 );
    sensitive << ( tmp_97_fu_1177_p4 );

    SC_METHOD(thread_n_1_fu_1233_p2);
    sensitive << ( n_load_reg_1396 );

    SC_METHOD(thread_seg_buf_address0);
    sensitive << ( icmp_reg_1406 );
    sensitive << ( i9_cast4_reg_1410 );
    sensitive << ( i_1_cast_reg_1428 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( grp_sha256_final_fu_836_hash_address0 );
    sensitive << ( grp_sha256_update_fu_855_data_address0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_seg_buf_ce0);
    sensitive << ( icmp_reg_1406 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( grp_sha256_final_fu_836_hash_ce0 );
    sensitive << ( grp_sha256_update_fu_855_data_ce0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_seg_buf_ce1);
    sensitive << ( grp_sha256_final_fu_836_hash_ce1 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_seg_buf_d0);
    sensitive << ( data_q0 );
    sensitive << ( grp_sha256_final_fu_836_hash_d0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_seg_buf_we0);
    sensitive << ( grp_sha256_final_fu_836_hash_we0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_seg_buf_we1);
    sensitive << ( grp_sha256_final_fu_836_hash_we1 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_seg_offset_1_fu_1243_p2);
    sensitive << ( seg_offset_fu_202 );

    SC_METHOD(thread_sha256ctx_data_address0);
    sensitive << ( icmp_reg_1406 );
    sensitive << ( grp_sha256_final_fu_836_ctx_data_address0 );
    sensitive << ( grp_sha256_update_fu_855_ctx_data_address0 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_sha256ctx_data_address1);
    sensitive << ( icmp_reg_1406 );
    sensitive << ( grp_sha256_final_fu_836_ctx_data_address1 );
    sensitive << ( grp_sha256_update_fu_855_ctx_data_address1 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_sha256ctx_data_ce0);
    sensitive << ( icmp_reg_1406 );
    sensitive << ( grp_sha256_final_fu_836_ctx_data_ce0 );
    sensitive << ( grp_sha256_update_fu_855_ctx_data_ce0 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_sha256ctx_data_ce1);
    sensitive << ( icmp_reg_1406 );
    sensitive << ( grp_sha256_final_fu_836_ctx_data_ce1 );
    sensitive << ( grp_sha256_update_fu_855_ctx_data_ce1 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_sha256ctx_data_d0);
    sensitive << ( icmp_reg_1406 );
    sensitive << ( grp_sha256_final_fu_836_ctx_data_d0 );
    sensitive << ( grp_sha256_update_fu_855_ctx_data_d0 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_sha256ctx_data_we0);
    sensitive << ( icmp_reg_1406 );
    sensitive << ( grp_sha256_final_fu_836_ctx_data_we0 );
    sensitive << ( grp_sha256_update_fu_855_ctx_data_we0 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_sha256ctx_data_we1);
    sensitive << ( grp_sha256_final_fu_836_ctx_data_we1 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_sum2_cast_fu_1288_p1);
    sensitive << ( sum2_fu_1282_p2 );

    SC_METHOD(thread_sum2_fu_1282_p2);
    sensitive << ( tmp_98_fu_1278_p1 );
    sensitive << ( tmp2_fu_1273_p2 );

    SC_METHOD(thread_sum_cast_fu_1228_p1);
    sensitive << ( sum_fu_1222_p2 );

    SC_METHOD(thread_sum_fu_1222_p2);
    sensitive << ( tmp_99_fu_1218_p1 );
    sensitive << ( tmp1_fu_1213_p2 );

    SC_METHOD(thread_tmp1_fu_1213_p2);
    sensitive << ( tmp_96_reg_1390 );
    sensitive << ( i9_cast5_fu_1193_p1 );

    SC_METHOD(thread_tmp2_fu_1273_p2);
    sensitive << ( tmp_96_reg_1390 );
    sensitive << ( i_1_cast3_fu_1254_p1 );

    SC_METHOD(thread_tmp_96_fu_1099_p1);
    sensitive << ( base_offset );

    SC_METHOD(thread_tmp_97_fu_1177_p4);
    sensitive << ( n_fu_154 );

    SC_METHOD(thread_tmp_98_fu_1278_p1);
    sensitive << ( seg_offset_fu_202 );

    SC_METHOD(thread_tmp_99_fu_1218_p1);
    sensitive << ( seg_offset_fu_202 );

    SC_METHOD(thread_tmp_fu_1171_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( n_fu_154 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_1171_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond5_fu_1201_p2 );
    sensitive << ( icmp_fu_1187_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond4_fu_1262_p2 );
    sensitive << ( grp_sha256_final_fu_836_ap_done );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_state5_on_subcall_done );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "00000000000000000000000000000000000000001";
    ap_reg_grp_sha256_final_fu_836_ap_start = SC_LOGIC_0;
    ap_reg_grp_sha256_update_fu_855_ap_start = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "sha256_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, data_address0, "data_address0");
    sc_trace(mVcdFile, data_ce0, "data_ce0");
    sc_trace(mVcdFile, data_q0, "data_q0");
    sc_trace(mVcdFile, base_offset, "base_offset");
    sc_trace(mVcdFile, bytes, "bytes");
    sc_trace(mVcdFile, digest_address0, "digest_address0");
    sc_trace(mVcdFile, digest_ce0, "digest_ce0");
    sc_trace(mVcdFile, digest_we0, "digest_we0");
    sc_trace(mVcdFile, reg_1033, "reg_1033");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_fu_1171_p2, "tmp_fu_1171_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, exitcond5_fu_1201_p2, "exitcond5_fu_1201_p2");
    sc_trace(mVcdFile, reg_1039, "reg_1039");
    sc_trace(mVcdFile, reg_1045, "reg_1045");
    sc_trace(mVcdFile, reg_1051, "reg_1051");
    sc_trace(mVcdFile, reg_1057, "reg_1057");
    sc_trace(mVcdFile, reg_1063, "reg_1063");
    sc_trace(mVcdFile, reg_1069, "reg_1069");
    sc_trace(mVcdFile, reg_1075, "reg_1075");
    sc_trace(mVcdFile, reg_1081, "reg_1081");
    sc_trace(mVcdFile, reg_1087, "reg_1087");
    sc_trace(mVcdFile, reg_1093, "reg_1093");
    sc_trace(mVcdFile, tmp_96_fu_1099_p1, "tmp_96_fu_1099_p1");
    sc_trace(mVcdFile, tmp_96_reg_1390, "tmp_96_reg_1390");
    sc_trace(mVcdFile, n_load_reg_1396, "n_load_reg_1396");
    sc_trace(mVcdFile, icmp_fu_1187_p2, "icmp_fu_1187_p2");
    sc_trace(mVcdFile, icmp_reg_1406, "icmp_reg_1406");
    sc_trace(mVcdFile, i9_cast4_fu_1197_p1, "i9_cast4_fu_1197_p1");
    sc_trace(mVcdFile, i9_cast4_reg_1410, "i9_cast4_reg_1410");
    sc_trace(mVcdFile, i_fu_1207_p2, "i_fu_1207_p2");
    sc_trace(mVcdFile, i_reg_1418, "i_reg_1418");
    sc_trace(mVcdFile, i_1_cast_fu_1258_p1, "i_1_cast_fu_1258_p1");
    sc_trace(mVcdFile, i_1_cast_reg_1428, "i_1_cast_reg_1428");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, i_7_fu_1267_p2, "i_7_fu_1267_p2");
    sc_trace(mVcdFile, i_7_reg_1436, "i_7_reg_1436");
    sc_trace(mVcdFile, exitcond4_fu_1262_p2, "exitcond4_fu_1262_p2");
    sc_trace(mVcdFile, sha256ctx_datalen_lo_1_reg_1446, "sha256ctx_datalen_lo_1_reg_1446");
    sc_trace(mVcdFile, sha256ctx_bitlen_0_1_reg_1451, "sha256ctx_bitlen_0_1_reg_1451");
    sc_trace(mVcdFile, sha256ctx_bitlen_1_1_reg_1456, "sha256ctx_bitlen_1_1_reg_1456");
    sc_trace(mVcdFile, sha256ctx_state_0_2_2_reg_1461, "sha256ctx_state_0_2_2_reg_1461");
    sc_trace(mVcdFile, sha256ctx_state_1_2_2_reg_1466, "sha256ctx_state_1_2_2_reg_1466");
    sc_trace(mVcdFile, sha256ctx_state_2_2_2_reg_1471, "sha256ctx_state_2_2_2_reg_1471");
    sc_trace(mVcdFile, sha256ctx_state_3_2_2_reg_1476, "sha256ctx_state_3_2_2_reg_1476");
    sc_trace(mVcdFile, sha256ctx_state_4_2_2_reg_1481, "sha256ctx_state_4_2_2_reg_1481");
    sc_trace(mVcdFile, sha256ctx_state_5_2_2_reg_1486, "sha256ctx_state_5_2_2_reg_1486");
    sc_trace(mVcdFile, sha256ctx_state_6_2_2_reg_1491, "sha256ctx_state_6_2_2_reg_1491");
    sc_trace(mVcdFile, sha256ctx_state_7_2_2_reg_1496, "sha256ctx_state_7_2_2_reg_1496");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, ap_CS_fsm_state26, "ap_CS_fsm_state26");
    sc_trace(mVcdFile, ap_CS_fsm_state27, "ap_CS_fsm_state27");
    sc_trace(mVcdFile, ap_CS_fsm_state28, "ap_CS_fsm_state28");
    sc_trace(mVcdFile, ap_CS_fsm_state29, "ap_CS_fsm_state29");
    sc_trace(mVcdFile, ap_CS_fsm_state30, "ap_CS_fsm_state30");
    sc_trace(mVcdFile, ap_CS_fsm_state31, "ap_CS_fsm_state31");
    sc_trace(mVcdFile, ap_CS_fsm_state32, "ap_CS_fsm_state32");
    sc_trace(mVcdFile, ap_CS_fsm_state33, "ap_CS_fsm_state33");
    sc_trace(mVcdFile, ap_CS_fsm_state34, "ap_CS_fsm_state34");
    sc_trace(mVcdFile, ap_CS_fsm_state35, "ap_CS_fsm_state35");
    sc_trace(mVcdFile, ap_CS_fsm_state36, "ap_CS_fsm_state36");
    sc_trace(mVcdFile, ap_CS_fsm_state37, "ap_CS_fsm_state37");
    sc_trace(mVcdFile, ap_CS_fsm_state38, "ap_CS_fsm_state38");
    sc_trace(mVcdFile, ap_CS_fsm_state39, "ap_CS_fsm_state39");
    sc_trace(mVcdFile, ap_CS_fsm_state40, "ap_CS_fsm_state40");
    sc_trace(mVcdFile, seg_buf_address0, "seg_buf_address0");
    sc_trace(mVcdFile, seg_buf_ce0, "seg_buf_ce0");
    sc_trace(mVcdFile, seg_buf_we0, "seg_buf_we0");
    sc_trace(mVcdFile, seg_buf_d0, "seg_buf_d0");
    sc_trace(mVcdFile, seg_buf_q0, "seg_buf_q0");
    sc_trace(mVcdFile, seg_buf_ce1, "seg_buf_ce1");
    sc_trace(mVcdFile, seg_buf_we1, "seg_buf_we1");
    sc_trace(mVcdFile, sha256ctx_data_address0, "sha256ctx_data_address0");
    sc_trace(mVcdFile, sha256ctx_data_ce0, "sha256ctx_data_ce0");
    sc_trace(mVcdFile, sha256ctx_data_we0, "sha256ctx_data_we0");
    sc_trace(mVcdFile, sha256ctx_data_d0, "sha256ctx_data_d0");
    sc_trace(mVcdFile, sha256ctx_data_q0, "sha256ctx_data_q0");
    sc_trace(mVcdFile, sha256ctx_data_address1, "sha256ctx_data_address1");
    sc_trace(mVcdFile, sha256ctx_data_ce1, "sha256ctx_data_ce1");
    sc_trace(mVcdFile, sha256ctx_data_we1, "sha256ctx_data_we1");
    sc_trace(mVcdFile, sha256ctx_data_q1, "sha256ctx_data_q1");
    sc_trace(mVcdFile, grp_sha256_final_fu_836_ap_start, "grp_sha256_final_fu_836_ap_start");
    sc_trace(mVcdFile, grp_sha256_final_fu_836_ap_done, "grp_sha256_final_fu_836_ap_done");
    sc_trace(mVcdFile, grp_sha256_final_fu_836_ap_idle, "grp_sha256_final_fu_836_ap_idle");
    sc_trace(mVcdFile, grp_sha256_final_fu_836_ap_ready, "grp_sha256_final_fu_836_ap_ready");
    sc_trace(mVcdFile, grp_sha256_final_fu_836_ctx_data_address0, "grp_sha256_final_fu_836_ctx_data_address0");
    sc_trace(mVcdFile, grp_sha256_final_fu_836_ctx_data_ce0, "grp_sha256_final_fu_836_ctx_data_ce0");
    sc_trace(mVcdFile, grp_sha256_final_fu_836_ctx_data_we0, "grp_sha256_final_fu_836_ctx_data_we0");
    sc_trace(mVcdFile, grp_sha256_final_fu_836_ctx_data_d0, "grp_sha256_final_fu_836_ctx_data_d0");
    sc_trace(mVcdFile, grp_sha256_final_fu_836_ctx_data_address1, "grp_sha256_final_fu_836_ctx_data_address1");
    sc_trace(mVcdFile, grp_sha256_final_fu_836_ctx_data_ce1, "grp_sha256_final_fu_836_ctx_data_ce1");
    sc_trace(mVcdFile, grp_sha256_final_fu_836_ctx_data_we1, "grp_sha256_final_fu_836_ctx_data_we1");
    sc_trace(mVcdFile, grp_sha256_final_fu_836_ctx_data_d1, "grp_sha256_final_fu_836_ctx_data_d1");
    sc_trace(mVcdFile, grp_sha256_final_fu_836_hash_address0, "grp_sha256_final_fu_836_hash_address0");
    sc_trace(mVcdFile, grp_sha256_final_fu_836_hash_ce0, "grp_sha256_final_fu_836_hash_ce0");
    sc_trace(mVcdFile, grp_sha256_final_fu_836_hash_we0, "grp_sha256_final_fu_836_hash_we0");
    sc_trace(mVcdFile, grp_sha256_final_fu_836_hash_d0, "grp_sha256_final_fu_836_hash_d0");
    sc_trace(mVcdFile, grp_sha256_final_fu_836_hash_address1, "grp_sha256_final_fu_836_hash_address1");
    sc_trace(mVcdFile, grp_sha256_final_fu_836_hash_ce1, "grp_sha256_final_fu_836_hash_ce1");
    sc_trace(mVcdFile, grp_sha256_final_fu_836_hash_we1, "grp_sha256_final_fu_836_hash_we1");
    sc_trace(mVcdFile, grp_sha256_final_fu_836_hash_d1, "grp_sha256_final_fu_836_hash_d1");
    sc_trace(mVcdFile, grp_sha256_update_fu_855_ap_start, "grp_sha256_update_fu_855_ap_start");
    sc_trace(mVcdFile, grp_sha256_update_fu_855_ap_done, "grp_sha256_update_fu_855_ap_done");
    sc_trace(mVcdFile, grp_sha256_update_fu_855_ap_idle, "grp_sha256_update_fu_855_ap_idle");
    sc_trace(mVcdFile, grp_sha256_update_fu_855_ap_ready, "grp_sha256_update_fu_855_ap_ready");
    sc_trace(mVcdFile, grp_sha256_update_fu_855_ctx_data_address0, "grp_sha256_update_fu_855_ctx_data_address0");
    sc_trace(mVcdFile, grp_sha256_update_fu_855_ctx_data_ce0, "grp_sha256_update_fu_855_ctx_data_ce0");
    sc_trace(mVcdFile, grp_sha256_update_fu_855_ctx_data_we0, "grp_sha256_update_fu_855_ctx_data_we0");
    sc_trace(mVcdFile, grp_sha256_update_fu_855_ctx_data_d0, "grp_sha256_update_fu_855_ctx_data_d0");
    sc_trace(mVcdFile, grp_sha256_update_fu_855_ctx_data_address1, "grp_sha256_update_fu_855_ctx_data_address1");
    sc_trace(mVcdFile, grp_sha256_update_fu_855_ctx_data_ce1, "grp_sha256_update_fu_855_ctx_data_ce1");
    sc_trace(mVcdFile, grp_sha256_update_fu_855_ctx_datalen_read, "grp_sha256_update_fu_855_ctx_datalen_read");
    sc_trace(mVcdFile, grp_sha256_update_fu_855_p_read1, "grp_sha256_update_fu_855_p_read1");
    sc_trace(mVcdFile, grp_sha256_update_fu_855_p_read2, "grp_sha256_update_fu_855_p_read2");
    sc_trace(mVcdFile, grp_sha256_update_fu_855_p_read3, "grp_sha256_update_fu_855_p_read3");
    sc_trace(mVcdFile, grp_sha256_update_fu_855_p_read4, "grp_sha256_update_fu_855_p_read4");
    sc_trace(mVcdFile, grp_sha256_update_fu_855_p_read5, "grp_sha256_update_fu_855_p_read5");
    sc_trace(mVcdFile, grp_sha256_update_fu_855_p_read6, "grp_sha256_update_fu_855_p_read6");
    sc_trace(mVcdFile, grp_sha256_update_fu_855_p_read7, "grp_sha256_update_fu_855_p_read7");
    sc_trace(mVcdFile, grp_sha256_update_fu_855_p_read8, "grp_sha256_update_fu_855_p_read8");
    sc_trace(mVcdFile, grp_sha256_update_fu_855_p_read9, "grp_sha256_update_fu_855_p_read9");
    sc_trace(mVcdFile, grp_sha256_update_fu_855_p_read10, "grp_sha256_update_fu_855_p_read10");
    sc_trace(mVcdFile, grp_sha256_update_fu_855_data_address0, "grp_sha256_update_fu_855_data_address0");
    sc_trace(mVcdFile, grp_sha256_update_fu_855_data_ce0, "grp_sha256_update_fu_855_data_ce0");
    sc_trace(mVcdFile, grp_sha256_update_fu_855_len, "grp_sha256_update_fu_855_len");
    sc_trace(mVcdFile, grp_sha256_update_fu_855_ap_return_0, "grp_sha256_update_fu_855_ap_return_0");
    sc_trace(mVcdFile, grp_sha256_update_fu_855_ap_return_1, "grp_sha256_update_fu_855_ap_return_1");
    sc_trace(mVcdFile, grp_sha256_update_fu_855_ap_return_2, "grp_sha256_update_fu_855_ap_return_2");
    sc_trace(mVcdFile, grp_sha256_update_fu_855_ap_return_3, "grp_sha256_update_fu_855_ap_return_3");
    sc_trace(mVcdFile, grp_sha256_update_fu_855_ap_return_4, "grp_sha256_update_fu_855_ap_return_4");
    sc_trace(mVcdFile, grp_sha256_update_fu_855_ap_return_5, "grp_sha256_update_fu_855_ap_return_5");
    sc_trace(mVcdFile, grp_sha256_update_fu_855_ap_return_6, "grp_sha256_update_fu_855_ap_return_6");
    sc_trace(mVcdFile, grp_sha256_update_fu_855_ap_return_7, "grp_sha256_update_fu_855_ap_return_7");
    sc_trace(mVcdFile, grp_sha256_update_fu_855_ap_return_8, "grp_sha256_update_fu_855_ap_return_8");
    sc_trace(mVcdFile, grp_sha256_update_fu_855_ap_return_9, "grp_sha256_update_fu_855_ap_return_9");
    sc_trace(mVcdFile, grp_sha256_update_fu_855_ap_return_10, "grp_sha256_update_fu_855_ap_return_10");
    sc_trace(mVcdFile, i9_reg_814, "i9_reg_814");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, i_1_reg_825, "i_1_reg_825");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_reg_grp_sha256_final_fu_836_ap_start, "ap_reg_grp_sha256_final_fu_836_ap_start");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_reg_grp_sha256_update_fu_855_ap_start, "ap_reg_grp_sha256_update_fu_855_ap_start");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, sum_cast_fu_1228_p1, "sum_cast_fu_1228_p1");
    sc_trace(mVcdFile, sum2_cast_fu_1288_p1, "sum2_cast_fu_1288_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state41, "ap_CS_fsm_state41");
    sc_trace(mVcdFile, n_fu_154, "n_fu_154");
    sc_trace(mVcdFile, n_1_fu_1233_p2, "n_1_fu_1233_p2");
    sc_trace(mVcdFile, sha256ctx_datalen_fu_158, "sha256ctx_datalen_fu_158");
    sc_trace(mVcdFile, ap_block_state5_on_subcall_done, "ap_block_state5_on_subcall_done");
    sc_trace(mVcdFile, sha256ctx_bitlen_0_2_fu_162, "sha256ctx_bitlen_0_2_fu_162");
    sc_trace(mVcdFile, sha256ctx_bitlen_1_2_fu_166, "sha256ctx_bitlen_1_2_fu_166");
    sc_trace(mVcdFile, sha256ctx_state_0_2_fu_170, "sha256ctx_state_0_2_fu_170");
    sc_trace(mVcdFile, sha256ctx_state_1_2_fu_174, "sha256ctx_state_1_2_fu_174");
    sc_trace(mVcdFile, sha256ctx_state_2_2_fu_178, "sha256ctx_state_2_2_fu_178");
    sc_trace(mVcdFile, sha256ctx_state_3_2_fu_182, "sha256ctx_state_3_2_fu_182");
    sc_trace(mVcdFile, sha256ctx_state_4_2_fu_186, "sha256ctx_state_4_2_fu_186");
    sc_trace(mVcdFile, sha256ctx_state_5_2_fu_190, "sha256ctx_state_5_2_fu_190");
    sc_trace(mVcdFile, sha256ctx_state_6_2_fu_194, "sha256ctx_state_6_2_fu_194");
    sc_trace(mVcdFile, sha256ctx_state_7_2_fu_198, "sha256ctx_state_7_2_fu_198");
    sc_trace(mVcdFile, seg_offset_fu_202, "seg_offset_fu_202");
    sc_trace(mVcdFile, seg_offset_1_fu_1243_p2, "seg_offset_1_fu_1243_p2");
    sc_trace(mVcdFile, tmp_97_fu_1177_p4, "tmp_97_fu_1177_p4");
    sc_trace(mVcdFile, i9_cast5_fu_1193_p1, "i9_cast5_fu_1193_p1");
    sc_trace(mVcdFile, tmp_99_fu_1218_p1, "tmp_99_fu_1218_p1");
    sc_trace(mVcdFile, tmp1_fu_1213_p2, "tmp1_fu_1213_p2");
    sc_trace(mVcdFile, sum_fu_1222_p2, "sum_fu_1222_p2");
    sc_trace(mVcdFile, i_1_cast3_fu_1254_p1, "i_1_cast3_fu_1254_p1");
    sc_trace(mVcdFile, tmp_98_fu_1278_p1, "tmp_98_fu_1278_p1");
    sc_trace(mVcdFile, tmp2_fu_1273_p2, "tmp2_fu_1273_p2");
    sc_trace(mVcdFile, sum2_fu_1282_p2, "sum2_fu_1282_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("sha256.hdltvin.dat");
    mHdltvoutHandle.open("sha256.hdltvout.dat");
}

sha256::~sha256() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete sha256_AXILiteS_s_axi_U;
    delete seg_buf_U;
    delete sha256ctx_data_U;
    delete grp_sha256_final_fu_836;
    delete grp_sha256_update_fu_855;
}

void sha256::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void sha256::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_grp_sha256_final_fu_836_ap_start = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             esl_seteq<1,1,1>(tmp_fu_1171_p2.read(), ap_const_lv1_1))) {
            ap_reg_grp_sha256_final_fu_836_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_sha256_final_fu_836_ap_ready.read())) {
            ap_reg_grp_sha256_final_fu_836_ap_start = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_grp_sha256_update_fu_855_ap_start = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
              esl_seteq<1,1,1>(ap_const_lv1_1, exitcond5_fu_1201_p2.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
              esl_seteq<1,1,1>(ap_const_lv1_1, exitcond4_fu_1262_p2.read())))) {
            ap_reg_grp_sha256_update_fu_855_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_sha256_update_fu_855_ap_ready.read())) {
            ap_reg_grp_sha256_update_fu_855_ap_start = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_fu_1171_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(icmp_fu_1187_p2.read(), ap_const_lv1_0))) {
        i9_reg_814 = ap_const_lv7_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        i9_reg_814 = i_reg_1418.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_fu_1171_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_fu_1187_p2.read()))) {
        i_1_reg_825 = ap_const_lv6_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        i_1_reg_825 = i_7_reg_1436.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond4_fu_1262_p2.read()))) {
        n_fu_154 = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, exitcond5_fu_1201_p2.read()))) {
        n_fu_154 = n_1_fu_1233_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        n_fu_154 = bytes.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(icmp_reg_1406.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0))) {
        seg_offset_fu_202 = seg_offset_1_fu_1243_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        seg_offset_fu_202 = ap_const_lv32_0;
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(icmp_reg_1406.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_1406.read()) && 
          esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0)))) {
        sha256ctx_bitlen_0_2_fu_162 = grp_sha256_update_fu_855_ap_return_1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        sha256ctx_bitlen_0_2_fu_162 = ap_const_lv32_0;
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(icmp_reg_1406.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_1406.read()) && 
          esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0)))) {
        sha256ctx_bitlen_1_2_fu_166 = grp_sha256_update_fu_855_ap_return_2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        sha256ctx_bitlen_1_2_fu_166 = ap_const_lv32_0;
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(icmp_reg_1406.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_1406.read()) && 
          esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0)))) {
        sha256ctx_datalen_fu_158 = grp_sha256_update_fu_855_ap_return_0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        sha256ctx_datalen_fu_158 = ap_const_lv32_0;
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(icmp_reg_1406.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_1406.read()) && 
          esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0)))) {
        sha256ctx_state_0_2_fu_170 = grp_sha256_update_fu_855_ap_return_3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        sha256ctx_state_0_2_fu_170 = ap_const_lv32_6A09E667;
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(icmp_reg_1406.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_1406.read()) && 
          esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0)))) {
        sha256ctx_state_1_2_fu_174 = grp_sha256_update_fu_855_ap_return_4.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        sha256ctx_state_1_2_fu_174 = ap_const_lv32_BB67AE85;
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(icmp_reg_1406.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_1406.read()) && 
          esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0)))) {
        sha256ctx_state_2_2_fu_178 = grp_sha256_update_fu_855_ap_return_5.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        sha256ctx_state_2_2_fu_178 = ap_const_lv32_3C6EF372;
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(icmp_reg_1406.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_1406.read()) && 
          esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0)))) {
        sha256ctx_state_3_2_fu_182 = grp_sha256_update_fu_855_ap_return_6.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        sha256ctx_state_3_2_fu_182 = ap_const_lv32_A54FF53A;
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(icmp_reg_1406.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_1406.read()) && 
          esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0)))) {
        sha256ctx_state_4_2_fu_186 = grp_sha256_update_fu_855_ap_return_7.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        sha256ctx_state_4_2_fu_186 = ap_const_lv32_510E527F;
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(icmp_reg_1406.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_1406.read()) && 
          esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0)))) {
        sha256ctx_state_5_2_fu_190 = grp_sha256_update_fu_855_ap_return_8.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        sha256ctx_state_5_2_fu_190 = ap_const_lv32_9B05688C;
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(icmp_reg_1406.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_1406.read()) && 
          esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0)))) {
        sha256ctx_state_6_2_fu_194 = grp_sha256_update_fu_855_ap_return_9.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        sha256ctx_state_6_2_fu_194 = ap_const_lv32_1F83D9AB;
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(icmp_reg_1406.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_1406.read()) && 
          esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0)))) {
        sha256ctx_state_7_2_fu_198 = grp_sha256_update_fu_855_ap_return_10.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        sha256ctx_state_7_2_fu_198 = ap_const_lv32_5BE0CD19;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i9_cast4_reg_1410 = i9_cast4_fu_1197_p1.read();
        i_reg_1418 = i_fu_1207_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        i_1_cast_reg_1428 = i_1_cast_fu_1258_p1.read();
        i_7_reg_1436 = i_7_fu_1267_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_fu_1171_p2.read(), ap_const_lv1_0))) {
        icmp_reg_1406 = icmp_fu_1187_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        n_load_reg_1396 = n_fu_154.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
  esl_seteq<1,1,1>(tmp_fu_1171_p2.read(), ap_const_lv1_1)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, exitcond5_fu_1201_p2.read())))) {
        reg_1033 = sha256ctx_datalen_fu_158.read();
        reg_1039 = sha256ctx_bitlen_0_2_fu_162.read();
        reg_1045 = sha256ctx_bitlen_1_2_fu_166.read();
        reg_1051 = sha256ctx_state_0_2_fu_170.read();
        reg_1057 = sha256ctx_state_1_2_fu_174.read();
        reg_1063 = sha256ctx_state_2_2_fu_178.read();
        reg_1069 = sha256ctx_state_3_2_fu_182.read();
        reg_1075 = sha256ctx_state_4_2_fu_186.read();
        reg_1081 = sha256ctx_state_5_2_fu_190.read();
        reg_1087 = sha256ctx_state_6_2_fu_194.read();
        reg_1093 = sha256ctx_state_7_2_fu_198.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond4_fu_1262_p2.read()))) {
        sha256ctx_bitlen_0_1_reg_1451 = sha256ctx_bitlen_0_2_fu_162.read();
        sha256ctx_bitlen_1_1_reg_1456 = sha256ctx_bitlen_1_2_fu_166.read();
        sha256ctx_datalen_lo_1_reg_1446 = sha256ctx_datalen_fu_158.read();
        sha256ctx_state_0_2_2_reg_1461 = sha256ctx_state_0_2_fu_170.read();
        sha256ctx_state_1_2_2_reg_1466 = sha256ctx_state_1_2_fu_174.read();
        sha256ctx_state_2_2_2_reg_1471 = sha256ctx_state_2_2_fu_178.read();
        sha256ctx_state_3_2_2_reg_1476 = sha256ctx_state_3_2_fu_182.read();
        sha256ctx_state_4_2_2_reg_1481 = sha256ctx_state_4_2_fu_186.read();
        sha256ctx_state_5_2_2_reg_1486 = sha256ctx_state_5_2_fu_190.read();
        sha256ctx_state_6_2_2_reg_1491 = sha256ctx_state_6_2_fu_194.read();
        sha256ctx_state_7_2_2_reg_1496 = sha256ctx_state_7_2_fu_198.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        tmp_96_reg_1390 = tmp_96_fu_1099_p1.read();
    }
}

void sha256::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void sha256::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void sha256::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void sha256::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void sha256::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void sha256::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void sha256::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void sha256::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void sha256::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void sha256::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void sha256::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void sha256::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void sha256::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void sha256::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void sha256::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void sha256::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void sha256::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read()[23];
}

void sha256::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[24];
}

void sha256::thread_ap_CS_fsm_state26() {
    ap_CS_fsm_state26 = ap_CS_fsm.read()[25];
}

void sha256::thread_ap_CS_fsm_state27() {
    ap_CS_fsm_state27 = ap_CS_fsm.read()[26];
}

void sha256::thread_ap_CS_fsm_state28() {
    ap_CS_fsm_state28 = ap_CS_fsm.read()[27];
}

void sha256::thread_ap_CS_fsm_state29() {
    ap_CS_fsm_state29 = ap_CS_fsm.read()[28];
}

void sha256::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void sha256::thread_ap_CS_fsm_state30() {
    ap_CS_fsm_state30 = ap_CS_fsm.read()[29];
}

void sha256::thread_ap_CS_fsm_state31() {
    ap_CS_fsm_state31 = ap_CS_fsm.read()[30];
}

void sha256::thread_ap_CS_fsm_state32() {
    ap_CS_fsm_state32 = ap_CS_fsm.read()[31];
}

void sha256::thread_ap_CS_fsm_state33() {
    ap_CS_fsm_state33 = ap_CS_fsm.read()[32];
}

void sha256::thread_ap_CS_fsm_state34() {
    ap_CS_fsm_state34 = ap_CS_fsm.read()[33];
}

void sha256::thread_ap_CS_fsm_state35() {
    ap_CS_fsm_state35 = ap_CS_fsm.read()[34];
}

void sha256::thread_ap_CS_fsm_state36() {
    ap_CS_fsm_state36 = ap_CS_fsm.read()[35];
}

void sha256::thread_ap_CS_fsm_state37() {
    ap_CS_fsm_state37 = ap_CS_fsm.read()[36];
}

void sha256::thread_ap_CS_fsm_state38() {
    ap_CS_fsm_state38 = ap_CS_fsm.read()[37];
}

void sha256::thread_ap_CS_fsm_state39() {
    ap_CS_fsm_state39 = ap_CS_fsm.read()[38];
}

void sha256::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void sha256::thread_ap_CS_fsm_state40() {
    ap_CS_fsm_state40 = ap_CS_fsm.read()[39];
}

void sha256::thread_ap_CS_fsm_state41() {
    ap_CS_fsm_state41 = ap_CS_fsm.read()[40];
}

void sha256::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void sha256::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void sha256::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void sha256::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void sha256::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void sha256::thread_ap_block_state5_on_subcall_done() {
    ap_block_state5_on_subcall_done = ((esl_seteq<1,1,1>(icmp_reg_1406.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, grp_sha256_update_fu_855_ap_done.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_1406.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, grp_sha256_update_fu_855_ap_done.read())));
}

void sha256::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void sha256::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void sha256::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void sha256::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void sha256::thread_data_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        data_address0 =  (sc_lv<8>) (sum2_cast_fu_1288_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        data_address0 =  (sc_lv<8>) (sum_cast_fu_1228_p1.read());
    } else {
        data_address0 = "XXXXXXXX";
    }
}

void sha256::thread_data_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        data_ce0 = ap_const_logic_1;
    } else {
        data_ce0 = ap_const_logic_0;
    }
}

void sha256::thread_digest_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read())) {
        digest_address0 =  (sc_lv<5>) (ap_const_lv32_1F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read())) {
        digest_address0 =  (sc_lv<5>) (ap_const_lv32_1E);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read())) {
        digest_address0 =  (sc_lv<5>) (ap_const_lv32_1D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
        digest_address0 =  (sc_lv<5>) (ap_const_lv32_1C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        digest_address0 =  (sc_lv<5>) (ap_const_lv32_1B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        digest_address0 =  (sc_lv<5>) (ap_const_lv32_1A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
        digest_address0 =  (sc_lv<5>) (ap_const_lv32_19);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
        digest_address0 =  (sc_lv<5>) (ap_const_lv32_18);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
        digest_address0 =  (sc_lv<5>) (ap_const_lv32_17);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())) {
        digest_address0 =  (sc_lv<5>) (ap_const_lv32_16);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        digest_address0 =  (sc_lv<5>) (ap_const_lv32_15);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        digest_address0 =  (sc_lv<5>) (ap_const_lv32_14);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) {
        digest_address0 =  (sc_lv<5>) (ap_const_lv32_13);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        digest_address0 =  (sc_lv<5>) (ap_const_lv32_12);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        digest_address0 =  (sc_lv<5>) (ap_const_lv32_11);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        digest_address0 =  (sc_lv<5>) (ap_const_lv32_10);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        digest_address0 =  (sc_lv<5>) (ap_const_lv32_F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        digest_address0 =  (sc_lv<5>) (ap_const_lv32_E);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        digest_address0 =  (sc_lv<5>) (ap_const_lv32_D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        digest_address0 =  (sc_lv<5>) (ap_const_lv32_C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        digest_address0 =  (sc_lv<5>) (ap_const_lv32_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        digest_address0 =  (sc_lv<5>) (ap_const_lv32_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        digest_address0 =  (sc_lv<5>) (ap_const_lv32_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        digest_address0 =  (sc_lv<5>) (ap_const_lv32_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        digest_address0 =  (sc_lv<5>) (ap_const_lv32_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        digest_address0 =  (sc_lv<5>) (ap_const_lv32_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        digest_address0 =  (sc_lv<5>) (ap_const_lv32_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        digest_address0 =  (sc_lv<5>) (ap_const_lv32_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        digest_address0 =  (sc_lv<5>) (ap_const_lv32_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        digest_address0 =  (sc_lv<5>) (ap_const_lv32_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        digest_address0 =  (sc_lv<5>) (ap_const_lv32_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        digest_address0 =  (sc_lv<5>) (ap_const_lv32_0);
    } else {
        digest_address0 =  (sc_lv<5>) ("XXXXX");
    }
}

void sha256::thread_digest_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()))) {
        digest_ce0 = ap_const_logic_1;
    } else {
        digest_ce0 = ap_const_logic_0;
    }
}

void sha256::thread_digest_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()))) {
        digest_we0 = ap_const_logic_1;
    } else {
        digest_we0 = ap_const_logic_0;
    }
}

void sha256::thread_exitcond4_fu_1262_p2() {
    exitcond4_fu_1262_p2 = (!i_1_cast_fu_1258_p1.read().is_01() || !n_load_reg_1396.read().is_01())? sc_lv<1>(): sc_lv<1>(i_1_cast_fu_1258_p1.read() == n_load_reg_1396.read());
}

void sha256::thread_exitcond5_fu_1201_p2() {
    exitcond5_fu_1201_p2 = (!i9_reg_814.read().is_01() || !ap_const_lv7_40.is_01())? sc_lv<1>(): sc_lv<1>(i9_reg_814.read() == ap_const_lv7_40);
}

void sha256::thread_grp_sha256_final_fu_836_ap_start() {
    grp_sha256_final_fu_836_ap_start = ap_reg_grp_sha256_final_fu_836_ap_start.read();
}

void sha256::thread_grp_sha256_update_fu_855_ap_start() {
    grp_sha256_update_fu_855_ap_start = ap_reg_grp_sha256_update_fu_855_ap_start.read();
}

void sha256::thread_grp_sha256_update_fu_855_ctx_datalen_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_1406.read())) {
            grp_sha256_update_fu_855_ctx_datalen_read = sha256ctx_datalen_lo_1_reg_1446.read();
        } else if (esl_seteq<1,1,1>(icmp_reg_1406.read(), ap_const_lv1_0)) {
            grp_sha256_update_fu_855_ctx_datalen_read = reg_1033.read();
        } else {
            grp_sha256_update_fu_855_ctx_datalen_read =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        grp_sha256_update_fu_855_ctx_datalen_read =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void sha256::thread_grp_sha256_update_fu_855_len() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_1406.read())) {
            grp_sha256_update_fu_855_len = n_load_reg_1396.read();
        } else if (esl_seteq<1,1,1>(icmp_reg_1406.read(), ap_const_lv1_0)) {
            grp_sha256_update_fu_855_len = ap_const_lv32_40;
        } else {
            grp_sha256_update_fu_855_len =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        grp_sha256_update_fu_855_len =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void sha256::thread_grp_sha256_update_fu_855_p_read1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_1406.read())) {
            grp_sha256_update_fu_855_p_read1 = sha256ctx_bitlen_0_1_reg_1451.read();
        } else if (esl_seteq<1,1,1>(icmp_reg_1406.read(), ap_const_lv1_0)) {
            grp_sha256_update_fu_855_p_read1 = reg_1039.read();
        } else {
            grp_sha256_update_fu_855_p_read1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        grp_sha256_update_fu_855_p_read1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void sha256::thread_grp_sha256_update_fu_855_p_read10() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_1406.read())) {
            grp_sha256_update_fu_855_p_read10 = sha256ctx_state_7_2_2_reg_1496.read();
        } else if (esl_seteq<1,1,1>(icmp_reg_1406.read(), ap_const_lv1_0)) {
            grp_sha256_update_fu_855_p_read10 = reg_1093.read();
        } else {
            grp_sha256_update_fu_855_p_read10 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        grp_sha256_update_fu_855_p_read10 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void sha256::thread_grp_sha256_update_fu_855_p_read2() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_1406.read())) {
            grp_sha256_update_fu_855_p_read2 = sha256ctx_bitlen_1_1_reg_1456.read();
        } else if (esl_seteq<1,1,1>(icmp_reg_1406.read(), ap_const_lv1_0)) {
            grp_sha256_update_fu_855_p_read2 = reg_1045.read();
        } else {
            grp_sha256_update_fu_855_p_read2 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        grp_sha256_update_fu_855_p_read2 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void sha256::thread_grp_sha256_update_fu_855_p_read3() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_1406.read())) {
            grp_sha256_update_fu_855_p_read3 = sha256ctx_state_0_2_2_reg_1461.read();
        } else if (esl_seteq<1,1,1>(icmp_reg_1406.read(), ap_const_lv1_0)) {
            grp_sha256_update_fu_855_p_read3 = reg_1051.read();
        } else {
            grp_sha256_update_fu_855_p_read3 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        grp_sha256_update_fu_855_p_read3 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void sha256::thread_grp_sha256_update_fu_855_p_read4() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_1406.read())) {
            grp_sha256_update_fu_855_p_read4 = sha256ctx_state_1_2_2_reg_1466.read();
        } else if (esl_seteq<1,1,1>(icmp_reg_1406.read(), ap_const_lv1_0)) {
            grp_sha256_update_fu_855_p_read4 = reg_1057.read();
        } else {
            grp_sha256_update_fu_855_p_read4 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        grp_sha256_update_fu_855_p_read4 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void sha256::thread_grp_sha256_update_fu_855_p_read5() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_1406.read())) {
            grp_sha256_update_fu_855_p_read5 = sha256ctx_state_2_2_2_reg_1471.read();
        } else if (esl_seteq<1,1,1>(icmp_reg_1406.read(), ap_const_lv1_0)) {
            grp_sha256_update_fu_855_p_read5 = reg_1063.read();
        } else {
            grp_sha256_update_fu_855_p_read5 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        grp_sha256_update_fu_855_p_read5 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void sha256::thread_grp_sha256_update_fu_855_p_read6() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_1406.read())) {
            grp_sha256_update_fu_855_p_read6 = sha256ctx_state_3_2_2_reg_1476.read();
        } else if (esl_seteq<1,1,1>(icmp_reg_1406.read(), ap_const_lv1_0)) {
            grp_sha256_update_fu_855_p_read6 = reg_1069.read();
        } else {
            grp_sha256_update_fu_855_p_read6 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        grp_sha256_update_fu_855_p_read6 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void sha256::thread_grp_sha256_update_fu_855_p_read7() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_1406.read())) {
            grp_sha256_update_fu_855_p_read7 = sha256ctx_state_4_2_2_reg_1481.read();
        } else if (esl_seteq<1,1,1>(icmp_reg_1406.read(), ap_const_lv1_0)) {
            grp_sha256_update_fu_855_p_read7 = reg_1075.read();
        } else {
            grp_sha256_update_fu_855_p_read7 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        grp_sha256_update_fu_855_p_read7 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void sha256::thread_grp_sha256_update_fu_855_p_read8() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_1406.read())) {
            grp_sha256_update_fu_855_p_read8 = sha256ctx_state_5_2_2_reg_1486.read();
        } else if (esl_seteq<1,1,1>(icmp_reg_1406.read(), ap_const_lv1_0)) {
            grp_sha256_update_fu_855_p_read8 = reg_1081.read();
        } else {
            grp_sha256_update_fu_855_p_read8 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        grp_sha256_update_fu_855_p_read8 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void sha256::thread_grp_sha256_update_fu_855_p_read9() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_1406.read())) {
            grp_sha256_update_fu_855_p_read9 = sha256ctx_state_6_2_2_reg_1491.read();
        } else if (esl_seteq<1,1,1>(icmp_reg_1406.read(), ap_const_lv1_0)) {
            grp_sha256_update_fu_855_p_read9 = reg_1087.read();
        } else {
            grp_sha256_update_fu_855_p_read9 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        grp_sha256_update_fu_855_p_read9 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void sha256::thread_i9_cast4_fu_1197_p1() {
    i9_cast4_fu_1197_p1 = esl_zext<32,7>(i9_reg_814.read());
}

void sha256::thread_i9_cast5_fu_1193_p1() {
    i9_cast5_fu_1193_p1 = esl_zext<10,7>(i9_reg_814.read());
}

void sha256::thread_i_1_cast3_fu_1254_p1() {
    i_1_cast3_fu_1254_p1 = esl_zext<10,6>(i_1_reg_825.read());
}

void sha256::thread_i_1_cast_fu_1258_p1() {
    i_1_cast_fu_1258_p1 = esl_zext<32,6>(i_1_reg_825.read());
}

void sha256::thread_i_7_fu_1267_p2() {
    i_7_fu_1267_p2 = (!i_1_reg_825.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(i_1_reg_825.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void sha256::thread_i_fu_1207_p2() {
    i_fu_1207_p2 = (!i9_reg_814.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(i9_reg_814.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void sha256::thread_icmp_fu_1187_p2() {
    icmp_fu_1187_p2 = (!tmp_97_fu_1177_p4.read().is_01() || !ap_const_lv26_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_97_fu_1177_p4.read() == ap_const_lv26_0);
}

void sha256::thread_n_1_fu_1233_p2() {
    n_1_fu_1233_p2 = (!n_load_reg_1396.read().is_01() || !ap_const_lv32_FFFFFFC0.is_01())? sc_lv<32>(): (sc_biguint<32>(n_load_reg_1396.read()) + sc_bigint<32>(ap_const_lv32_FFFFFFC0));
}

void sha256::thread_seg_buf_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read())) {
        seg_buf_address0 =  (sc_lv<6>) (ap_const_lv32_1F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read())) {
        seg_buf_address0 =  (sc_lv<6>) (ap_const_lv32_1E);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
        seg_buf_address0 =  (sc_lv<6>) (ap_const_lv32_1D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        seg_buf_address0 =  (sc_lv<6>) (ap_const_lv32_1C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        seg_buf_address0 =  (sc_lv<6>) (ap_const_lv32_1B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
        seg_buf_address0 =  (sc_lv<6>) (ap_const_lv32_1A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
        seg_buf_address0 =  (sc_lv<6>) (ap_const_lv32_19);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
        seg_buf_address0 =  (sc_lv<6>) (ap_const_lv32_18);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())) {
        seg_buf_address0 =  (sc_lv<6>) (ap_const_lv32_17);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        seg_buf_address0 =  (sc_lv<6>) (ap_const_lv32_16);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        seg_buf_address0 =  (sc_lv<6>) (ap_const_lv32_15);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) {
        seg_buf_address0 =  (sc_lv<6>) (ap_const_lv32_14);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        seg_buf_address0 =  (sc_lv<6>) (ap_const_lv32_13);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        seg_buf_address0 =  (sc_lv<6>) (ap_const_lv32_12);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        seg_buf_address0 =  (sc_lv<6>) (ap_const_lv32_11);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        seg_buf_address0 =  (sc_lv<6>) (ap_const_lv32_10);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        seg_buf_address0 =  (sc_lv<6>) (ap_const_lv32_F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        seg_buf_address0 =  (sc_lv<6>) (ap_const_lv32_E);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        seg_buf_address0 =  (sc_lv<6>) (ap_const_lv32_D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        seg_buf_address0 =  (sc_lv<6>) (ap_const_lv32_C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        seg_buf_address0 =  (sc_lv<6>) (ap_const_lv32_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        seg_buf_address0 =  (sc_lv<6>) (ap_const_lv32_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        seg_buf_address0 =  (sc_lv<6>) (ap_const_lv32_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        seg_buf_address0 =  (sc_lv<6>) (ap_const_lv32_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        seg_buf_address0 =  (sc_lv<6>) (ap_const_lv32_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        seg_buf_address0 =  (sc_lv<6>) (ap_const_lv32_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        seg_buf_address0 =  (sc_lv<6>) (ap_const_lv32_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        seg_buf_address0 =  (sc_lv<6>) (ap_const_lv32_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        seg_buf_address0 =  (sc_lv<6>) (ap_const_lv32_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        seg_buf_address0 =  (sc_lv<6>) (ap_const_lv32_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        seg_buf_address0 =  (sc_lv<6>) (ap_const_lv32_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        seg_buf_address0 =  (sc_lv<6>) (ap_const_lv32_0);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        seg_buf_address0 =  (sc_lv<6>) (i_1_cast_reg_1428.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        seg_buf_address0 =  (sc_lv<6>) (i9_cast4_reg_1410.read());
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                 esl_seteq<1,1,1>(icmp_reg_1406.read(), ap_const_lv1_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_1406.read())))) {
        seg_buf_address0 = grp_sha256_update_fu_855_data_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        seg_buf_address0 = grp_sha256_final_fu_836_hash_address0.read();
    } else {
        seg_buf_address0 =  (sc_lv<6>) ("XXXXXX");
    }
}

void sha256::thread_seg_buf_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        seg_buf_ce0 = ap_const_logic_1;
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                 esl_seteq<1,1,1>(icmp_reg_1406.read(), ap_const_lv1_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_1406.read())))) {
        seg_buf_ce0 = grp_sha256_update_fu_855_data_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        seg_buf_ce0 = grp_sha256_final_fu_836_hash_ce0.read();
    } else {
        seg_buf_ce0 = ap_const_logic_0;
    }
}

void sha256::thread_seg_buf_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        seg_buf_ce1 = grp_sha256_final_fu_836_hash_ce1.read();
    } else {
        seg_buf_ce1 = ap_const_logic_0;
    }
}

void sha256::thread_seg_buf_d0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        seg_buf_d0 = data_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        seg_buf_d0 = grp_sha256_final_fu_836_hash_d0.read();
    } else {
        seg_buf_d0 = "XXXXXXXX";
    }
}

void sha256::thread_seg_buf_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        seg_buf_we0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        seg_buf_we0 = grp_sha256_final_fu_836_hash_we0.read();
    } else {
        seg_buf_we0 = ap_const_logic_0;
    }
}

void sha256::thread_seg_buf_we1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        seg_buf_we1 = grp_sha256_final_fu_836_hash_we1.read();
    } else {
        seg_buf_we1 = ap_const_logic_0;
    }
}

void sha256::thread_seg_offset_1_fu_1243_p2() {
    seg_offset_1_fu_1243_p2 = (!seg_offset_fu_202.read().is_01() || !ap_const_lv32_40.is_01())? sc_lv<32>(): (sc_biguint<32>(seg_offset_fu_202.read()) + sc_biguint<32>(ap_const_lv32_40));
}

void sha256::thread_sha256ctx_data_address0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(icmp_reg_1406.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_1406.read())))) {
        sha256ctx_data_address0 = grp_sha256_update_fu_855_ctx_data_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        sha256ctx_data_address0 = grp_sha256_final_fu_836_ctx_data_address0.read();
    } else {
        sha256ctx_data_address0 =  (sc_lv<6>) ("XXXXXX");
    }
}

void sha256::thread_sha256ctx_data_address1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(icmp_reg_1406.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_1406.read())))) {
        sha256ctx_data_address1 = grp_sha256_update_fu_855_ctx_data_address1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        sha256ctx_data_address1 = grp_sha256_final_fu_836_ctx_data_address1.read();
    } else {
        sha256ctx_data_address1 =  (sc_lv<6>) ("XXXXXX");
    }
}

void sha256::thread_sha256ctx_data_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(icmp_reg_1406.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_1406.read())))) {
        sha256ctx_data_ce0 = grp_sha256_update_fu_855_ctx_data_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        sha256ctx_data_ce0 = grp_sha256_final_fu_836_ctx_data_ce0.read();
    } else {
        sha256ctx_data_ce0 = ap_const_logic_0;
    }
}

void sha256::thread_sha256ctx_data_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(icmp_reg_1406.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_1406.read())))) {
        sha256ctx_data_ce1 = grp_sha256_update_fu_855_ctx_data_ce1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        sha256ctx_data_ce1 = grp_sha256_final_fu_836_ctx_data_ce1.read();
    } else {
        sha256ctx_data_ce1 = ap_const_logic_0;
    }
}

void sha256::thread_sha256ctx_data_d0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(icmp_reg_1406.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_1406.read())))) {
        sha256ctx_data_d0 = grp_sha256_update_fu_855_ctx_data_d0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        sha256ctx_data_d0 = grp_sha256_final_fu_836_ctx_data_d0.read();
    } else {
        sha256ctx_data_d0 = "XXXXXXXX";
    }
}

void sha256::thread_sha256ctx_data_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(icmp_reg_1406.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_1406.read())))) {
        sha256ctx_data_we0 = grp_sha256_update_fu_855_ctx_data_we0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        sha256ctx_data_we0 = grp_sha256_final_fu_836_ctx_data_we0.read();
    } else {
        sha256ctx_data_we0 = ap_const_logic_0;
    }
}

void sha256::thread_sha256ctx_data_we1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        sha256ctx_data_we1 = grp_sha256_final_fu_836_ctx_data_we1.read();
    } else {
        sha256ctx_data_we1 = ap_const_logic_0;
    }
}

void sha256::thread_sum2_cast_fu_1288_p1() {
    sum2_cast_fu_1288_p1 = esl_zext<32,10>(sum2_fu_1282_p2.read());
}

void sha256::thread_sum2_fu_1282_p2() {
    sum2_fu_1282_p2 = (!tmp_98_fu_1278_p1.read().is_01() || !tmp2_fu_1273_p2.read().is_01())? sc_lv<10>(): (sc_biguint<10>(tmp_98_fu_1278_p1.read()) + sc_biguint<10>(tmp2_fu_1273_p2.read()));
}

void sha256::thread_sum_cast_fu_1228_p1() {
    sum_cast_fu_1228_p1 = esl_zext<32,10>(sum_fu_1222_p2.read());
}

void sha256::thread_sum_fu_1222_p2() {
    sum_fu_1222_p2 = (!tmp_99_fu_1218_p1.read().is_01() || !tmp1_fu_1213_p2.read().is_01())? sc_lv<10>(): (sc_biguint<10>(tmp_99_fu_1218_p1.read()) + sc_biguint<10>(tmp1_fu_1213_p2.read()));
}

void sha256::thread_tmp1_fu_1213_p2() {
    tmp1_fu_1213_p2 = (!tmp_96_reg_1390.read().is_01() || !i9_cast5_fu_1193_p1.read().is_01())? sc_lv<10>(): (sc_biguint<10>(tmp_96_reg_1390.read()) + sc_biguint<10>(i9_cast5_fu_1193_p1.read()));
}

void sha256::thread_tmp2_fu_1273_p2() {
    tmp2_fu_1273_p2 = (!tmp_96_reg_1390.read().is_01() || !i_1_cast3_fu_1254_p1.read().is_01())? sc_lv<10>(): (sc_biguint<10>(tmp_96_reg_1390.read()) + sc_biguint<10>(i_1_cast3_fu_1254_p1.read()));
}

void sha256::thread_tmp_96_fu_1099_p1() {
    tmp_96_fu_1099_p1 = base_offset.read().range(10-1, 0);
}

void sha256::thread_tmp_97_fu_1177_p4() {
    tmp_97_fu_1177_p4 = n_fu_154.read().range(31, 6);
}

void sha256::thread_tmp_98_fu_1278_p1() {
    tmp_98_fu_1278_p1 = seg_offset_fu_202.read().range(10-1, 0);
}

void sha256::thread_tmp_99_fu_1218_p1() {
    tmp_99_fu_1218_p1 = seg_offset_fu_202.read().range(10-1, 0);
}

void sha256::thread_tmp_fu_1171_p2() {
    tmp_fu_1171_p2 = (!n_fu_154.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(n_fu_154.read() == ap_const_lv32_0);
}

void sha256::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_fu_1171_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_fu_1187_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_fu_1171_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(icmp_fu_1187_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond5_fu_1201_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_fu_1262_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(grp_sha256_final_fu_836_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_fsm_state36;
            break;
        case 34359738368 : 
            ap_NS_fsm = ap_ST_fsm_state37;
            break;
        case 68719476736 : 
            ap_NS_fsm = ap_ST_fsm_state38;
            break;
        case 137438953472 : 
            ap_NS_fsm = ap_ST_fsm_state39;
            break;
        case 274877906944 : 
            ap_NS_fsm = ap_ST_fsm_state40;
            break;
        case 549755813888 : 
            ap_NS_fsm = ap_ST_fsm_state41;
            break;
        case 1099511627776 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<41>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void sha256::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

