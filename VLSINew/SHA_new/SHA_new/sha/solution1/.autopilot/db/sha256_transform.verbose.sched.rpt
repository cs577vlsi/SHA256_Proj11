

================================================================
== Vivado HLS Report for 'sha256_transform'
================================================================
* Date:           Fri Mar 26 11:24:07 2021

* Version:        2017.2 (Build 1909853 on Thu Jun 15 18:55:24 MDT 2017)
* Project:        sha
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      8.34|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |  435|  435|  435|  435|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +----------+-----+-----+----------+-----------+-----------+------+----------+
        |          |  Latency  | Iteration|  Initiation Interval  | Trip |          |
        | Loop Name| min | max |  Latency |  achieved |   target  | Count| Pipelined|
        +----------+-----+-----+----------+-----------+-----------+------+----------+
        |- Loop 1  |   48|   48|         3|          -|          -|    16|    no    |
        |- Loop 2  |  192|  192|         4|          -|          -|    48|    no    |
        |- Loop 3  |  192|  192|         3|          -|          -|    64|    no    |
        +----------+-----+-----+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 11
* Pipeline: 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / (!tmp)
	5  / (tmp)
3 --> 
	4  / true
4 --> 
	2  / true
5 --> 
	6  / (!exitcond)
	9  / (exitcond)
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	5  / true
9 --> 
	10  / (!tmp_27)
10 --> 
	11  / true
11 --> 
	9  / true
* FSM state operations: 

 <State 1>: 1.59ns
ST_1: ctx_state_7_read_1 (11)  [1/1] 0.00ns
:0  %ctx_state_7_read_1 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %ctx_state_7_read)

ST_1: ctx_state_6_read_1 (12)  [1/1] 0.00ns
:1  %ctx_state_6_read_1 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %ctx_state_6_read)

ST_1: ctx_state_5_read_1 (13)  [1/1] 0.00ns
:2  %ctx_state_5_read_1 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %ctx_state_5_read)

ST_1: ctx_state_4_read_1 (14)  [1/1] 0.00ns
:3  %ctx_state_4_read_1 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %ctx_state_4_read)

ST_1: ctx_state_3_read_1 (15)  [1/1] 0.00ns
:4  %ctx_state_3_read_1 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %ctx_state_3_read)

ST_1: ctx_state_2_read_1 (16)  [1/1] 0.00ns
:5  %ctx_state_2_read_1 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %ctx_state_2_read)

ST_1: ctx_state_1_read_1 (17)  [1/1] 0.00ns
:6  %ctx_state_1_read_1 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %ctx_state_1_read)

ST_1: ctx_state_0_read_1 (18)  [1/1] 0.00ns
:7  %ctx_state_0_read_1 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %ctx_state_0_read)

ST_1: m (19)  [1/1] 0.00ns  loc: ./sha256_impl.c:32
:8  %m = alloca [64 x i32], align 4

ST_1: StgValue_21 (20)  [1/1] 1.59ns  loc: ./sha256_impl.c:34
:9  br label %1


 <State 2>: 3.31ns
ST_2: i (22)  [1/1] 0.00ns  loc: ./sha256_impl.c:34
:0  %i = phi i5 [ 0, %0 ], [ %tmp_5, %2 ]

ST_2: j (23)  [1/1] 0.00ns
:1  %j = phi i7 [ 0, %0 ], [ %j_1, %2 ]

ST_2: i_cast (24)  [1/1] 0.00ns  loc: ./sha256_impl.c:34
:2  %i_cast = zext i5 %i to i32

ST_2: tmp (25)  [1/1] 3.31ns  loc: ./sha256_impl.c:34
:3  %tmp = icmp eq i5 %i, -16

ST_2: StgValue_26 (26)  [1/1] 0.00ns
:4  call void (...)* @_ssdm_op_SpecLoopTripCount(i64 16, i64 16, i64 16)

ST_2: tmp_5 (27)  [1/1] 2.33ns  loc: ./sha256_impl.c:34
:5  %tmp_5 = add i5 %i, 1

ST_2: StgValue_28 (28)  [1/1] 0.00ns  loc: ./sha256_impl.c:34
:6  br i1 %tmp, label %.preheader.preheader, label %2

ST_2: j_cast4 (30)  [1/1] 0.00ns  loc: ./sha256_impl.c:34
:0  %j_cast4 = zext i7 %j to i32

ST_2: data_addr (31)  [1/1] 0.00ns  loc: ./sha256_impl.c:36
:1  %data_addr = getelementptr [64 x i8]* %data, i32 0, i32 %j_cast4

ST_2: data_load (32)  [2/2] 2.32ns  loc: ./sha256_impl.c:36
:2  %data_load = load i8* %data_addr, align 1

ST_2: tmp_10 (33)  [1/1] 0.00ns  loc: ./sha256_impl.c:34
:3  %tmp_10 = trunc i7 %j to i6

ST_2: tmp_8 (34)  [1/1] 0.00ns  loc: ./sha256_impl.c:36
:4  %tmp_8 = or i6 %tmp_10, 1

ST_2: tmp_8_cast (35)  [1/1] 0.00ns  loc: ./sha256_impl.c:36
:5  %tmp_8_cast = zext i6 %tmp_8 to i32

ST_2: data_addr_1 (36)  [1/1] 0.00ns  loc: ./sha256_impl.c:36
:6  %data_addr_1 = getelementptr [64 x i8]* %data, i32 0, i32 %tmp_8_cast

ST_2: data_load_1 (37)  [2/2] 2.32ns  loc: ./sha256_impl.c:36
:7  %data_load_1 = load i8* %data_addr_1, align 1

ST_2: j_1 (49)  [1/1] 2.32ns  loc: ./sha256_impl.c:34
:19  %j_1 = add i7 4, %j

ST_2: StgValue_38 (52)  [1/1] 1.59ns  loc: ./sha256_impl.c:37
.preheader.preheader:0  br label %.preheader


 <State 3>: 2.32ns
ST_3: data_load (32)  [1/2] 2.32ns  loc: ./sha256_impl.c:36
:2  %data_load = load i8* %data_addr, align 1

ST_3: data_load_1 (37)  [1/2] 2.32ns  loc: ./sha256_impl.c:36
:7  %data_load_1 = load i8* %data_addr_1, align 1

ST_3: tmp_1 (38)  [1/1] 0.00ns  loc: ./sha256_impl.c:36
:8  %tmp_1 = or i6 %tmp_10, 2

ST_3: tmp_1_cast (39)  [1/1] 0.00ns  loc: ./sha256_impl.c:36
:9  %tmp_1_cast = zext i6 %tmp_1 to i32

ST_3: data_addr_2 (40)  [1/1] 0.00ns  loc: ./sha256_impl.c:36
:10  %data_addr_2 = getelementptr [64 x i8]* %data, i32 0, i32 %tmp_1_cast

ST_3: data_load_2 (41)  [2/2] 2.32ns  loc: ./sha256_impl.c:36
:11  %data_load_2 = load i8* %data_addr_2, align 1

ST_3: tmp_4 (42)  [1/1] 0.00ns  loc: ./sha256_impl.c:36
:12  %tmp_4 = or i6 %tmp_10, 3

ST_3: tmp_4_cast (43)  [1/1] 0.00ns  loc: ./sha256_impl.c:36
:13  %tmp_4_cast = zext i6 %tmp_4 to i32

ST_3: data_addr_3 (44)  [1/1] 0.00ns  loc: ./sha256_impl.c:36
:14  %data_addr_3 = getelementptr [64 x i8]* %data, i32 0, i32 %tmp_4_cast

ST_3: data_load_3 (45)  [2/2] 2.32ns  loc: ./sha256_impl.c:36
:15  %data_load_3 = load i8* %data_addr_3, align 1


 <State 4>: 5.58ns
ST_4: data_load_2 (41)  [1/2] 2.32ns  loc: ./sha256_impl.c:36
:11  %data_load_2 = load i8* %data_addr_2, align 1

ST_4: data_load_3 (45)  [1/2] 2.32ns  loc: ./sha256_impl.c:36
:15  %data_load_3 = load i8* %data_addr_3, align 1

ST_4: tmp_2 (46)  [1/1] 0.00ns  loc: ./sha256_impl.c:36
:16  %tmp_2 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %data_load, i8 %data_load_1, i8 %data_load_2, i8 %data_load_3)

ST_4: m_addr (47)  [1/1] 0.00ns  loc: ./sha256_impl.c:36
:17  %m_addr = getelementptr inbounds [64 x i32]* %m, i32 0, i32 %i_cast

ST_4: StgValue_53 (48)  [1/1] 3.25ns  loc: ./sha256_impl.c:36
:18  store i32 %tmp_2, i32* %m_addr, align 4

ST_4: StgValue_54 (50)  [1/1] 0.00ns  loc: ./sha256_impl.c:34
:20  br label %1


 <State 5>: 5.57ns
ST_5: i_1 (54)  [1/1] 0.00ns
.preheader:0  %i_1 = phi i7 [ %i_3, %3 ], [ 16, %.preheader.preheader ]

ST_5: i_1_cast (55)  [1/1] 0.00ns  loc: ./sha256_impl.c:37
.preheader:1  %i_1_cast = zext i7 %i_1 to i32

ST_5: exitcond (56)  [1/1] 2.91ns  loc: ./sha256_impl.c:37
.preheader:2  %exitcond = icmp eq i7 %i_1, -64

ST_5: StgValue_58 (57)  [1/1] 0.00ns
.preheader:3  call void (...)* @_ssdm_op_SpecLoopTripCount(i64 48, i64 48, i64 48)

ST_5: StgValue_59 (58)  [1/1] 0.00ns  loc: ./sha256_impl.c:37
.preheader:4  br i1 %exitcond, label %.preheader1.preheader, label %3

ST_5: tmp_s (60)  [1/1] 2.32ns  loc: ./sha256_impl.c:39
:0  %tmp_s = add i7 -2, %i_1

ST_5: tmp_14_cast (61)  [1/1] 0.00ns  loc: ./sha256_impl.c:39
:1  %tmp_14_cast = zext i7 %tmp_s to i32

ST_5: m_addr_1 (62)  [1/1] 0.00ns  loc: ./sha256_impl.c:39
:2  %m_addr_1 = getelementptr inbounds [64 x i32]* %m, i32 0, i32 %tmp_14_cast

ST_5: m_load (63)  [2/2] 3.25ns  loc: ./sha256_impl.c:39
:3  %m_load = load i32* %m_addr_1, align 4

ST_5: tmp_14 (74)  [1/1] 2.32ns  loc: ./sha256_impl.c:39
:14  %tmp_14 = add i7 -7, %i_1

ST_5: tmp_24_cast (75)  [1/1] 0.00ns  loc: ./sha256_impl.c:39
:15  %tmp_24_cast = zext i7 %tmp_14 to i32

ST_5: m_addr_2 (76)  [1/1] 0.00ns  loc: ./sha256_impl.c:39
:16  %m_addr_2 = getelementptr inbounds [64 x i32]* %m, i32 0, i32 %tmp_24_cast

ST_5: m_load_1 (77)  [2/2] 3.25ns  loc: ./sha256_impl.c:39
:17  %m_load_1 = load i32* %m_addr_2, align 4

ST_5: StgValue_68 (104)  [1/1] 1.59ns  loc: ./sha256_impl.c:50
.preheader1.preheader:0  br label %.preheader1


 <State 6>: 5.57ns
ST_6: m_load (63)  [1/2] 3.25ns  loc: ./sha256_impl.c:39
:3  %m_load = load i32* %m_addr_1, align 4

ST_6: m_load_1 (77)  [1/2] 3.25ns  loc: ./sha256_impl.c:39
:17  %m_load_1 = load i32* %m_addr_2, align 4

ST_6: tmp_15 (78)  [1/1] 2.32ns  loc: ./sha256_impl.c:39
:18  %tmp_15 = add i7 -15, %i_1

ST_6: tmp_25_cast (79)  [1/1] 0.00ns  loc: ./sha256_impl.c:39
:19  %tmp_25_cast = zext i7 %tmp_15 to i32

ST_6: m_addr_3 (80)  [1/1] 0.00ns  loc: ./sha256_impl.c:39
:20  %m_addr_3 = getelementptr inbounds [64 x i32]* %m, i32 0, i32 %tmp_25_cast

ST_6: m_load_2 (81)  [2/2] 3.25ns  loc: ./sha256_impl.c:39
:21  %m_load_2 = load i32* %m_addr_3, align 4

ST_6: tmp_25 (92)  [1/1] 2.32ns  loc: ./sha256_impl.c:39
:32  %tmp_25 = add i7 -16, %i_1

ST_6: tmp_35_cast (93)  [1/1] 0.00ns  loc: ./sha256_impl.c:39
:33  %tmp_35_cast = zext i7 %tmp_25 to i32

ST_6: m_addr_4 (94)  [1/1] 0.00ns  loc: ./sha256_impl.c:39
:34  %m_addr_4 = getelementptr inbounds [64 x i32]* %m, i32 0, i32 %tmp_35_cast

ST_6: m_load_3 (95)  [2/2] 3.25ns  loc: ./sha256_impl.c:39
:35  %m_load_3 = load i32* %m_addr_4, align 4

ST_6: i_3 (101)  [1/1] 2.32ns  loc: ./sha256_impl.c:37
:41  %i_3 = add i7 1, %i_1


 <State 7>: 8.34ns
ST_7: tmp_3 (64)  [1/1] 0.00ns  loc: ./sha256_impl.c:39 (grouped into LUT with out node tmp5)
:4  %tmp_3 = call i15 @_ssdm_op_PartSelect.i15.i32.i32.i32(i32 %m_load, i32 17, i32 31)

ST_7: tmp_18 (65)  [1/1] 0.00ns  loc: ./sha256_impl.c:39 (grouped into LUT with out node tmp5)
:5  %tmp_18 = trunc i32 %m_load to i17

ST_7: tmp_7 (66)  [1/1] 0.00ns  loc: ./sha256_impl.c:39 (grouped into LUT with out node tmp5)
:6  %tmp_7 = call i32 @_ssdm_op_BitConcatenate.i32.i17.i15(i17 %tmp_18, i15 %tmp_3)

ST_7: tmp_9 (67)  [1/1] 0.00ns  loc: ./sha256_impl.c:39 (grouped into LUT with out node tmp5)
:7  %tmp_9 = call i13 @_ssdm_op_PartSelect.i13.i32.i32.i32(i32 %m_load, i32 19, i32 31)

ST_7: tmp_21 (68)  [1/1] 0.00ns  loc: ./sha256_impl.c:39 (grouped into LUT with out node tmp5)
:8  %tmp_21 = trunc i32 %m_load to i19

ST_7: tmp_6 (69)  [1/1] 0.00ns  loc: ./sha256_impl.c:39 (grouped into LUT with out node tmp5)
:9  %tmp_6 = call i32 @_ssdm_op_BitConcatenate.i32.i19.i13(i19 %tmp_21, i13 %tmp_9)

ST_7: tmp_11 (70)  [1/1] 0.00ns  loc: ./sha256_impl.c:39 (grouped into LUT with out node tmp5)
:10  %tmp_11 = call i22 @_ssdm_op_PartSelect.i22.i32.i32.i32(i32 %m_load, i32 10, i32 31)

ST_7: tmp_12 (71)  [1/1] 0.00ns  loc: ./sha256_impl.c:39 (grouped into LUT with out node tmp5)
:11  %tmp_12 = zext i22 %tmp_11 to i32

ST_7: tmp2 (72)  [1/1] 0.00ns  loc: ./sha256_impl.c:39 (grouped into LUT with out node tmp5)
:12  %tmp2 = xor i32 %tmp_12, %tmp_6

ST_7: tmp_13 (73)  [1/1] 0.00ns  loc: ./sha256_impl.c:39 (grouped into LUT with out node tmp5)
:13  %tmp_13 = xor i32 %tmp2, %tmp_7

ST_7: m_load_2 (81)  [1/2] 3.25ns  loc: ./sha256_impl.c:39
:21  %m_load_2 = load i32* %m_addr_3, align 4

ST_7: tmp_16 (82)  [1/1] 0.00ns  loc: ./sha256_impl.c:39 (grouped into LUT with out node tmp5)
:22  %tmp_16 = call i25 @_ssdm_op_PartSelect.i25.i32.i32.i32(i32 %m_load_2, i32 7, i32 31)

ST_7: tmp_30 (83)  [1/1] 0.00ns  loc: ./sha256_impl.c:39 (grouped into LUT with out node tmp5)
:23  %tmp_30 = trunc i32 %m_load_2 to i7

ST_7: tmp_17 (84)  [1/1] 0.00ns  loc: ./sha256_impl.c:39 (grouped into LUT with out node tmp5)
:24  %tmp_17 = call i32 @_ssdm_op_BitConcatenate.i32.i7.i25(i7 %tmp_30, i25 %tmp_16)

ST_7: tmp_19 (85)  [1/1] 0.00ns  loc: ./sha256_impl.c:39 (grouped into LUT with out node tmp5)
:25  %tmp_19 = call i14 @_ssdm_op_PartSelect.i14.i32.i32.i32(i32 %m_load_2, i32 18, i32 31)

ST_7: tmp_33 (86)  [1/1] 0.00ns  loc: ./sha256_impl.c:39 (grouped into LUT with out node tmp5)
:26  %tmp_33 = trunc i32 %m_load_2 to i18

ST_7: tmp_20 (87)  [1/1] 0.00ns  loc: ./sha256_impl.c:39 (grouped into LUT with out node tmp5)
:27  %tmp_20 = call i32 @_ssdm_op_BitConcatenate.i32.i18.i14(i18 %tmp_33, i14 %tmp_19)

ST_7: tmp_22 (88)  [1/1] 0.00ns  loc: ./sha256_impl.c:39 (grouped into LUT with out node tmp5)
:28  %tmp_22 = call i29 @_ssdm_op_PartSelect.i29.i32.i32.i32(i32 %m_load_2, i32 3, i32 31)

ST_7: tmp_23 (89)  [1/1] 0.00ns  loc: ./sha256_impl.c:39 (grouped into LUT with out node tmp5)
:29  %tmp_23 = zext i29 %tmp_22 to i32

ST_7: tmp3 (90)  [1/1] 0.00ns  loc: ./sha256_impl.c:39 (grouped into LUT with out node tmp5)
:30  %tmp3 = xor i32 %tmp_23, %tmp_20

ST_7: tmp_24 (91)  [1/1] 0.00ns  loc: ./sha256_impl.c:39 (grouped into LUT with out node tmp5)
:31  %tmp_24 = xor i32 %tmp3, %tmp_17

ST_7: m_load_3 (95)  [1/2] 3.25ns  loc: ./sha256_impl.c:39
:35  %m_load_3 = load i32* %m_addr_4, align 4

ST_7: tmp4 (96)  [1/1] 2.19ns  loc: ./sha256_impl.c:39
:36  %tmp4 = add i32 %m_load_1, %m_load_3

ST_7: tmp5 (97)  [1/1] 2.90ns  loc: ./sha256_impl.c:39 (out node of the LUT)
:37  %tmp5 = add i32 %tmp_13, %tmp_24

ST_7: tmp_26 (98)  [1/1] 2.19ns  loc: ./sha256_impl.c:39
:38  %tmp_26 = add i32 %tmp5, %tmp4


 <State 8>: 3.25ns
ST_8: m_addr_5 (99)  [1/1] 0.00ns  loc: ./sha256_impl.c:39
:39  %m_addr_5 = getelementptr inbounds [64 x i32]* %m, i32 0, i32 %i_1_cast

ST_8: StgValue_106 (100)  [1/1] 3.25ns  loc: ./sha256_impl.c:39
:40  store i32 %tmp_26, i32* %m_addr_5, align 4

ST_8: StgValue_107 (102)  [1/1] 0.00ns  loc: ./sha256_impl.c:37
:42  br label %.preheader


 <State 9>: 6.44ns
ST_9: h1 (106)  [1/1] 0.00ns
.preheader1:0  %h1 = phi i32 [ %h, %4 ], [ %ctx_state_7_read_1, %.preheader1.preheader ]

ST_9: h (107)  [1/1] 0.00ns
.preheader1:1  %h = phi i32 [ %g, %4 ], [ %ctx_state_6_read_1, %.preheader1.preheader ]

ST_9: g (108)  [1/1] 0.00ns
.preheader1:2  %g = phi i32 [ %f, %4 ], [ %ctx_state_5_read_1, %.preheader1.preheader ]

ST_9: f (109)  [1/1] 0.00ns
.preheader1:3  %f = phi i32 [ %e, %4 ], [ %ctx_state_4_read_1, %.preheader1.preheader ]

ST_9: d1 (110)  [1/1] 0.00ns
.preheader1:4  %d1 = phi i32 [ %d, %4 ], [ %ctx_state_3_read_1, %.preheader1.preheader ]

ST_9: d (111)  [1/1] 0.00ns
.preheader1:5  %d = phi i32 [ %c, %4 ], [ %ctx_state_2_read_1, %.preheader1.preheader ]

ST_9: c (112)  [1/1] 0.00ns
.preheader1:6  %c = phi i32 [ %b, %4 ], [ %ctx_state_1_read_1, %.preheader1.preheader ]

ST_9: b (113)  [1/1] 0.00ns
.preheader1:7  %b = phi i32 [ %a, %4 ], [ %ctx_state_0_read_1, %.preheader1.preheader ]

ST_9: i_2 (114)  [1/1] 0.00ns
.preheader1:8  %i_2 = phi i7 [ %i_4, %4 ], [ 0, %.preheader1.preheader ]

ST_9: i_2_cast (115)  [1/1] 0.00ns  loc: ./sha256_impl.c:50
.preheader1:9  %i_2_cast = zext i7 %i_2 to i32

ST_9: tmp_27 (116)  [1/1] 2.91ns  loc: ./sha256_impl.c:50
.preheader1:10  %tmp_27 = icmp eq i7 %i_2, -64

ST_9: StgValue_119 (117)  [1/1] 0.00ns
.preheader1:11  call void (...)* @_ssdm_op_SpecLoopTripCount(i64 64, i64 64, i64 64)

ST_9: i_4 (118)  [1/1] 2.32ns  loc: ./sha256_impl.c:50
.preheader1:12  %i_4 = add i7 %i_2, 1

ST_9: StgValue_121 (119)  [1/1] 0.00ns  loc: ./sha256_impl.c:50
.preheader1:13  br i1 %tmp_27, label %5, label %4

ST_9: tmp_28 (121)  [1/1] 0.00ns  loc: ./sha256_impl.c:52 (grouped into LUT with out node tmp_37)
:0  %tmp_28 = call i26 @_ssdm_op_PartSelect.i26.i32.i32.i32(i32 %f, i32 6, i32 31)

ST_9: tmp_36 (122)  [1/1] 0.00ns  loc: ./sha256_impl.c:57 (grouped into LUT with out node tmp_37)
:1  %tmp_36 = trunc i32 %f to i6

ST_9: tmp_29 (123)  [1/1] 0.00ns  loc: ./sha256_impl.c:52 (grouped into LUT with out node tmp_37)
:2  %tmp_29 = call i32 @_ssdm_op_BitConcatenate.i32.i6.i26(i6 %tmp_36, i26 %tmp_28)

ST_9: tmp_31 (124)  [1/1] 0.00ns  loc: ./sha256_impl.c:52 (grouped into LUT with out node tmp_37)
:3  %tmp_31 = call i21 @_ssdm_op_PartSelect.i21.i32.i32.i32(i32 %f, i32 11, i32 31)

ST_9: tmp_44 (125)  [1/1] 0.00ns  loc: ./sha256_impl.c:57 (grouped into LUT with out node tmp_37)
:4  %tmp_44 = trunc i32 %f to i11

ST_9: tmp_32 (126)  [1/1] 0.00ns  loc: ./sha256_impl.c:52 (grouped into LUT with out node tmp_37)
:5  %tmp_32 = call i32 @_ssdm_op_BitConcatenate.i32.i11.i21(i11 %tmp_44, i21 %tmp_31)

ST_9: tmp_34 (127)  [1/1] 0.00ns  loc: ./sha256_impl.c:52 (grouped into LUT with out node tmp_37)
:6  %tmp_34 = call i7 @_ssdm_op_PartSelect.i7.i32.i32.i32(i32 %f, i32 25, i32 31)

ST_9: tmp_47 (128)  [1/1] 0.00ns  loc: ./sha256_impl.c:57 (grouped into LUT with out node tmp_37)
:7  %tmp_47 = trunc i32 %f to i25

ST_9: tmp_35 (129)  [1/1] 0.00ns  loc: ./sha256_impl.c:52 (grouped into LUT with out node tmp_37)
:8  %tmp_35 = call i32 @_ssdm_op_BitConcatenate.i32.i25.i7(i25 %tmp_47, i7 %tmp_34)

ST_9: tmp6 (130)  [1/1] 0.00ns  loc: ./sha256_impl.c:52 (grouped into LUT with out node tmp_37)
:9  %tmp6 = xor i32 %tmp_29, %tmp_32

ST_9: tmp_37 (131)  [1/1] 2.07ns  loc: ./sha256_impl.c:52 (out node of the LUT)
:10  %tmp_37 = xor i32 %tmp6, %tmp_35

ST_9: tmp_38 (132)  [1/1] 0.00ns  loc: ./sha256_impl.c:52 (grouped into LUT with out node tmp_41)
:11  %tmp_38 = and i32 %f, %g

ST_9: tmp_39 (133)  [1/1] 0.00ns  loc: ./sha256_impl.c:52 (grouped into LUT with out node tmp_41)
:12  %tmp_39 = xor i32 %f, -1

ST_9: tmp_40 (134)  [1/1] 0.00ns  loc: ./sha256_impl.c:52 (grouped into LUT with out node tmp_41)
:13  %tmp_40 = and i32 %h, %tmp_39

ST_9: tmp_41 (135)  [1/1] 2.07ns  loc: ./sha256_impl.c:52 (out node of the LUT)
:14  %tmp_41 = xor i32 %tmp_38, %tmp_40

ST_9: k_addr (136)  [1/1] 0.00ns  loc: ./sha256_impl.c:52
:15  %k_addr = getelementptr inbounds [64 x i32]* @k, i32 0, i32 %i_2_cast

ST_9: k_load (137)  [2/2] 3.25ns  loc: ./sha256_impl.c:52
:16  %k_load = load i32* %k_addr, align 4

ST_9: m_addr_6 (138)  [1/1] 0.00ns  loc: ./sha256_impl.c:52
:17  %m_addr_6 = getelementptr inbounds [64 x i32]* %m, i32 0, i32 %i_2_cast

ST_9: m_load_4 (139)  [2/2] 3.25ns  loc: ./sha256_impl.c:52
:18  %m_load_4 = load i32* %m_addr_6, align 4

ST_9: tmp11 (141)  [1/1] 2.19ns  loc: ./sha256_impl.c:52
:20  %tmp11 = add i32 %tmp_37, %tmp_41

ST_9: tmp10 (142)  [1/1] 2.19ns  loc: ./sha256_impl.c:52
:21  %tmp10 = add i32 %tmp11, %h1

ST_9: tmp_52 (155)  [1/1] 0.00ns  loc: ./sha256_impl.c:53 (grouped into LUT with out node tmp_55)
:34  %tmp_52 = xor i32 %c, %d

ST_9: tmp_53 (156)  [1/1] 0.00ns  loc: ./sha256_impl.c:53 (grouped into LUT with out node tmp_55)
:35  %tmp_53 = and i32 %b, %tmp_52

ST_9: tmp_54 (157)  [1/1] 0.00ns  loc: ./sha256_impl.c:53 (grouped into LUT with out node tmp_55)
:36  %tmp_54 = and i32 %c, %d

ST_9: tmp_55 (158)  [1/1] 2.07ns  loc: ./sha256_impl.c:53 (out node of the LUT)
:37  %tmp_55 = xor i32 %tmp_53, %tmp_54

ST_9: ctx_state (164)  [1/1] 2.90ns  loc: ./sha256_impl.c:64
:0  %ctx_state = add i32 %b, %ctx_state_0_read_1

ST_9: ctx_state_1 (165)  [1/1] 2.90ns  loc: ./sha256_impl.c:65
:1  %ctx_state_1 = add i32 %c, %ctx_state_1_read_1

ST_9: ctx_state_2 (166)  [1/1] 2.90ns  loc: ./sha256_impl.c:66
:2  %ctx_state_2 = add i32 %d, %ctx_state_2_read_1

ST_9: ctx_state_3 (167)  [1/1] 2.90ns  loc: ./sha256_impl.c:67
:3  %ctx_state_3 = add i32 %d1, %ctx_state_3_read_1

ST_9: ctx_state_4 (168)  [1/1] 2.90ns  loc: ./sha256_impl.c:68
:4  %ctx_state_4 = add i32 %f, %ctx_state_4_read_1

ST_9: ctx_state_5 (169)  [1/1] 2.90ns  loc: ./sha256_impl.c:69
:5  %ctx_state_5 = add i32 %g, %ctx_state_5_read_1

ST_9: ctx_state_6 (170)  [1/1] 2.90ns  loc: ./sha256_impl.c:70
:6  %ctx_state_6 = add i32 %h, %ctx_state_6_read_1

ST_9: ctx_state_7 (171)  [1/1] 2.90ns  loc: ./sha256_impl.c:71
:7  %ctx_state_7 = add i32 %h1, %ctx_state_7_read_1

ST_9: mrv (172)  [1/1] 0.00ns  loc: ./sha256_impl.c:72
:8  %mrv = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32 } undef, i32 %ctx_state, 0

ST_9: mrv_1 (173)  [1/1] 0.00ns  loc: ./sha256_impl.c:72
:9  %mrv_1 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %mrv, i32 %ctx_state_1, 1

ST_9: mrv_2 (174)  [1/1] 0.00ns  loc: ./sha256_impl.c:72
:10  %mrv_2 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_1, i32 %ctx_state_2, 2

ST_9: mrv_3 (175)  [1/1] 0.00ns  loc: ./sha256_impl.c:72
:11  %mrv_3 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_2, i32 %ctx_state_3, 3

ST_9: mrv_4 (176)  [1/1] 0.00ns  loc: ./sha256_impl.c:72
:12  %mrv_4 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_3, i32 %ctx_state_4, 4

ST_9: mrv_5 (177)  [1/1] 0.00ns  loc: ./sha256_impl.c:72
:13  %mrv_5 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_4, i32 %ctx_state_5, 5

ST_9: mrv_6 (178)  [1/1] 0.00ns  loc: ./sha256_impl.c:72
:14  %mrv_6 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_5, i32 %ctx_state_6, 6

ST_9: mrv_7 (179)  [1/1] 0.00ns  loc: ./sha256_impl.c:72
:15  %mrv_7 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_6, i32 %ctx_state_7, 7

ST_9: StgValue_163 (180)  [1/1] 0.00ns  loc: ./sha256_impl.c:72
:16  ret { i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_7


 <State 10>: 7.63ns
ST_10: k_load (137)  [1/2] 3.25ns  loc: ./sha256_impl.c:52
:16  %k_load = load i32* %k_addr, align 4

ST_10: m_load_4 (139)  [1/2] 3.25ns  loc: ./sha256_impl.c:52
:18  %m_load_4 = load i32* %m_addr_6, align 4

ST_10: tmp9 (140)  [1/1] 2.19ns  loc: ./sha256_impl.c:52
:19  %tmp9 = add i32 %k_load, %m_load_4

ST_10: t1 (143)  [1/1] 2.19ns  loc: ./sha256_impl.c:52
:22  %t1 = add i32 %tmp10, %tmp9


 <State 11>: 4.37ns
ST_11: tmp_42 (144)  [1/1] 0.00ns  loc: ./sha256_impl.c:53 (grouped into LUT with out node tmp_51)
:23  %tmp_42 = call i30 @_ssdm_op_PartSelect.i30.i32.i32.i32(i32 %b, i32 2, i32 31)

ST_11: tmp_50 (145)  [1/1] 0.00ns  loc: ./sha256_impl.c:61 (grouped into LUT with out node tmp_51)
:24  %tmp_50 = trunc i32 %b to i2

ST_11: tmp_43 (146)  [1/1] 0.00ns  loc: ./sha256_impl.c:53 (grouped into LUT with out node tmp_51)
:25  %tmp_43 = call i32 @_ssdm_op_BitConcatenate.i32.i2.i30(i2 %tmp_50, i30 %tmp_42)

ST_11: tmp_45 (147)  [1/1] 0.00ns  loc: ./sha256_impl.c:53 (grouped into LUT with out node tmp_51)
:26  %tmp_45 = call i19 @_ssdm_op_PartSelect.i19.i32.i32.i32(i32 %b, i32 13, i32 31)

ST_11: tmp_57 (148)  [1/1] 0.00ns  loc: ./sha256_impl.c:61 (grouped into LUT with out node tmp_51)
:27  %tmp_57 = trunc i32 %b to i13

ST_11: tmp_46 (149)  [1/1] 0.00ns  loc: ./sha256_impl.c:53 (grouped into LUT with out node tmp_51)
:28  %tmp_46 = call i32 @_ssdm_op_BitConcatenate.i32.i13.i19(i13 %tmp_57, i19 %tmp_45)

ST_11: tmp_48 (150)  [1/1] 0.00ns  loc: ./sha256_impl.c:53 (grouped into LUT with out node tmp_51)
:29  %tmp_48 = call i10 @_ssdm_op_PartSelect.i10.i32.i32.i32(i32 %b, i32 22, i32 31)

ST_11: tmp_58 (151)  [1/1] 0.00ns  loc: ./sha256_impl.c:61 (grouped into LUT with out node tmp_51)
:30  %tmp_58 = trunc i32 %b to i22

ST_11: tmp_49 (152)  [1/1] 0.00ns  loc: ./sha256_impl.c:53 (grouped into LUT with out node tmp_51)
:31  %tmp_49 = call i32 @_ssdm_op_BitConcatenate.i32.i22.i10(i22 %tmp_58, i10 %tmp_48)

ST_11: tmp12 (153)  [1/1] 0.00ns  loc: ./sha256_impl.c:53 (grouped into LUT with out node tmp_51)
:32  %tmp12 = xor i32 %tmp_43, %tmp_46

ST_11: tmp_51 (154)  [1/1] 2.07ns  loc: ./sha256_impl.c:53 (out node of the LUT)
:33  %tmp_51 = xor i32 %tmp12, %tmp_49

ST_11: e (159)  [1/1] 2.90ns  loc: ./sha256_impl.c:57
:38  %e = add i32 %t1, %d1

ST_11: tmp13 (160)  [1/1] 2.19ns  loc: ./sha256_impl.c:61
:39  %tmp13 = add i32 %tmp_55, %t1

ST_11: a (161)  [1/1] 2.19ns  loc: ./sha256_impl.c:61
:40  %a = add i32 %tmp13, %tmp_51

ST_11: StgValue_182 (162)  [1/1] 0.00ns  loc: ./sha256_impl.c:50
:41  br label %.preheader1



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 1.59ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('i', ./sha256_impl.c:34) with incoming values : ('tmp_5', ./sha256_impl.c:34) [22]  (1.59 ns)

 <State 2>: 3.31ns
The critical path consists of the following:
	'phi' operation ('i', ./sha256_impl.c:34) with incoming values : ('tmp_5', ./sha256_impl.c:34) [22]  (0 ns)
	'icmp' operation ('tmp', ./sha256_impl.c:34) [25]  (3.31 ns)

 <State 3>: 2.32ns
The critical path consists of the following:
	'load' operation ('data_load', ./sha256_impl.c:36) on array 'data' [32]  (2.32 ns)

 <State 4>: 5.58ns
The critical path consists of the following:
	'load' operation ('data_load_2', ./sha256_impl.c:36) on array 'data' [41]  (2.32 ns)
	'store' operation (./sha256_impl.c:36) of variable 'tmp_2', ./sha256_impl.c:36 on array 'm', ./sha256_impl.c:32 [48]  (3.25 ns)

 <State 5>: 5.57ns
The critical path consists of the following:
	'phi' operation ('i') with incoming values : ('i', ./sha256_impl.c:37) [54]  (0 ns)
	'add' operation ('tmp_14', ./sha256_impl.c:39) [74]  (2.32 ns)
	'getelementptr' operation ('m_addr_2', ./sha256_impl.c:39) [76]  (0 ns)
	'load' operation ('m_load_1', ./sha256_impl.c:39) on array 'm', ./sha256_impl.c:32 [77]  (3.25 ns)

 <State 6>: 5.57ns
The critical path consists of the following:
	'add' operation ('tmp_15', ./sha256_impl.c:39) [78]  (2.32 ns)
	'getelementptr' operation ('m_addr_3', ./sha256_impl.c:39) [80]  (0 ns)
	'load' operation ('m_load_2', ./sha256_impl.c:39) on array 'm', ./sha256_impl.c:32 [81]  (3.25 ns)

 <State 7>: 8.34ns
The critical path consists of the following:
	'load' operation ('m_load_2', ./sha256_impl.c:39) on array 'm', ./sha256_impl.c:32 [81]  (3.25 ns)
	'xor' operation ('tmp_24', ./sha256_impl.c:39) [91]  (0 ns)
	'add' operation ('tmp5', ./sha256_impl.c:39) [97]  (2.9 ns)
	'add' operation ('tmp_26', ./sha256_impl.c:39) [98]  (2.19 ns)

 <State 8>: 3.25ns
The critical path consists of the following:
	'getelementptr' operation ('m_addr_5', ./sha256_impl.c:39) [99]  (0 ns)
	'store' operation (./sha256_impl.c:39) of variable 'tmp_26', ./sha256_impl.c:39 on array 'm', ./sha256_impl.c:32 [100]  (3.25 ns)

 <State 9>: 6.44ns
The critical path consists of the following:
	'phi' operation ('g') with incoming values : ('ctx_state_6_read_1') ('ctx_state_5_read_1') ('ctx_state_4_read_1') ('e', ./sha256_impl.c:57) [107]  (0 ns)
	'and' operation ('tmp_40', ./sha256_impl.c:52) [134]  (0 ns)
	'xor' operation ('tmp_41', ./sha256_impl.c:52) [135]  (2.07 ns)
	'add' operation ('tmp11', ./sha256_impl.c:52) [141]  (2.19 ns)
	'add' operation ('tmp10', ./sha256_impl.c:52) [142]  (2.19 ns)

 <State 10>: 7.63ns
The critical path consists of the following:
	'load' operation ('k_load', ./sha256_impl.c:52) on array 'k' [137]  (3.25 ns)
	'add' operation ('tmp9', ./sha256_impl.c:52) [140]  (2.19 ns)
	'add' operation ('t1', ./sha256_impl.c:52) [143]  (2.19 ns)

 <State 11>: 4.37ns
The critical path consists of the following:
	'add' operation ('tmp13', ./sha256_impl.c:61) [160]  (2.19 ns)
	'add' operation ('a', ./sha256_impl.c:61) [161]  (2.19 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
