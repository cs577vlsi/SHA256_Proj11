

================================================================
== Vivado HLS Report for 'sha256'
================================================================
* Date:           Fri Mar 26 11:24:08 2021

* Version:        2017.2 (Build 1909853 on Thu Jun 15 18:55:24 MDT 2017)
* Project:        sha
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      8.34|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |    ?|    ?|    ?|    ?|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-------------+-----+---------+------------+-----------+-----------+----------+----------+
        |             |    Latency    |  Iteration |  Initiation Interval  |   Trip   |          |
        |  Loop Name  | min |   max   |   Latency  |  achieved |   target  |   Count  | Pipelined|
        +-------------+-----+---------+------------+-----------+-----------+----------+----------+
        |- Loop 1     |  768|  2822800| 64 ~ 28228 |          -|          -| 12 ~ 100 |    no    |
        | + Loop 1.1  |  128|      128|           2|          -|          -|        64|    no    |
        | + Loop 1.2  |   24|      126|           2|          -|          -|  12 ~ 63 |    no    |
        +-------------+-----+---------+------------+-----------+-----------+----------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 41
* Pipeline: 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	8  / (tmp)
	3  / (!tmp & !icmp)
	6  / (!tmp & icmp)
3 --> 
	4  / (!exitcond5)
	5  / (exitcond5)
4 --> 
	3  / true
5 --> 
	2  / true
6 --> 
	5  / (exitcond4)
	7  / (!exitcond4)
7 --> 
	6  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	19  / true
19 --> 
	20  / true
20 --> 
	21  / true
21 --> 
	22  / true
22 --> 
	23  / true
23 --> 
	24  / true
24 --> 
	25  / true
25 --> 
	26  / true
26 --> 
	27  / true
27 --> 
	28  / true
28 --> 
	29  / true
29 --> 
	30  / true
30 --> 
	31  / true
31 --> 
	32  / true
32 --> 
	33  / true
33 --> 
	34  / true
34 --> 
	35  / true
35 --> 
	36  / true
36 --> 
	37  / true
37 --> 
	38  / true
38 --> 
	39  / true
39 --> 
	40  / true
40 --> 
	41  / true
41 --> 
* FSM state operations: 

 <State 1>: 2.77ns
ST_1: n (6)  [1/1] 0.00ns
:0  %n = alloca i32

ST_1: sha256ctx_datalen (7)  [1/1] 0.00ns
:1  %sha256ctx_datalen = alloca i32

ST_1: sha256ctx_bitlen_0_2 (8)  [1/1] 0.00ns
:2  %sha256ctx_bitlen_0_2 = alloca i32

ST_1: sha256ctx_bitlen_1_2 (9)  [1/1] 0.00ns
:3  %sha256ctx_bitlen_1_2 = alloca i32

ST_1: sha256ctx_state_0_2 (10)  [1/1] 0.00ns
:4  %sha256ctx_state_0_2 = alloca i32

ST_1: sha256ctx_state_1_2 (11)  [1/1] 0.00ns
:5  %sha256ctx_state_1_2 = alloca i32

ST_1: sha256ctx_state_2_2 (12)  [1/1] 0.00ns
:6  %sha256ctx_state_2_2 = alloca i32

ST_1: sha256ctx_state_3_2 (13)  [1/1] 0.00ns
:7  %sha256ctx_state_3_2 = alloca i32

ST_1: sha256ctx_state_4_2 (14)  [1/1] 0.00ns
:8  %sha256ctx_state_4_2 = alloca i32

ST_1: sha256ctx_state_5_2 (15)  [1/1] 0.00ns
:9  %sha256ctx_state_5_2 = alloca i32

ST_1: sha256ctx_state_6_2 (16)  [1/1] 0.00ns
:10  %sha256ctx_state_6_2 = alloca i32

ST_1: sha256ctx_state_7_2 (17)  [1/1] 0.00ns
:11  %sha256ctx_state_7_2 = alloca i32

ST_1: seg_offset (18)  [1/1] 0.00ns
:12  %seg_offset = alloca i32

ST_1: StgValue_55 (19)  [1/1] 0.00ns
:13  call void (...)* @_ssdm_op_SpecBitsMap([256 x i8]* %data) nounwind, !map !27

ST_1: StgValue_56 (20)  [1/1] 0.00ns
:14  call void (...)* @_ssdm_op_SpecBitsMap(i32 %base_offset) nounwind, !map !33

ST_1: StgValue_57 (21)  [1/1] 0.00ns
:15  call void (...)* @_ssdm_op_SpecBitsMap(i32 %bytes) nounwind, !map !39

ST_1: StgValue_58 (22)  [1/1] 0.00ns
:16  call void (...)* @_ssdm_op_SpecBitsMap([32 x i8]* %digest) nounwind, !map !43

ST_1: StgValue_59 (23)  [1/1] 0.00ns
:17  call void (...)* @_ssdm_op_SpecTopModule([7 x i8]* @sha256_str) nounwind

ST_1: bytes_read (24)  [1/1] 1.00ns
:18  %bytes_read = call i32 @_ssdm_op_Read.s_axilite.i32(i32 %bytes) nounwind

ST_1: base_offset_read (25)  [1/1] 1.00ns
:19  %base_offset_read = call i32 @_ssdm_op_Read.s_axilite.i32(i32 %base_offset) nounwind

ST_1: seg_buf (26)  [1/1] 0.00ns  loc: sha256.c:23
:20  %seg_buf = alloca [64 x i8], align 1

ST_1: sha256ctx_data (27)  [1/1] 0.00ns  loc: sha256.c:29
:21  %sha256ctx_data = alloca [64 x i8], align 1

ST_1: empty (28)  [1/1] 0.00ns
:22  %empty = call i32 (...)* @_ssdm_op_SpecMemCore([256 x i8]* %data, [1 x i8]* @p_str, [7 x i8]* @RAM_1P_str, [1 x i8]* @p_str, i32 -1, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str) nounwind

ST_1: StgValue_65 (29)  [1/1] 0.00ns
:23  call void (...)* @_ssdm_op_SpecInterface([256 x i8]* %data, [10 x i8]* @p_str7, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_1: empty_9 (30)  [1/1] 0.00ns
:24  %empty_9 = call i32 (...)* @_ssdm_op_SpecMemCore([32 x i8]* %digest, [1 x i8]* @p_str, [7 x i8]* @RAM_1P_str, [1 x i8]* @p_str, i32 -1, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str) nounwind

ST_1: StgValue_67 (31)  [1/1] 0.00ns
:25  call void (...)* @_ssdm_op_SpecInterface([32 x i8]* %digest, [10 x i8]* @p_str7, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_1: StgValue_68 (32)  [1/1] 0.00ns  loc: sha256.c:18
:26  call void (...)* @_ssdm_op_SpecInterface(i32 %base_offset, [10 x i8]* @p_str7, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_1: StgValue_69 (33)  [1/1] 0.00ns  loc: sha256.c:19
:27  call void (...)* @_ssdm_op_SpecInterface(i32 %bytes, [10 x i8]* @p_str7, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_1: StgValue_70 (34)  [1/1] 0.00ns  loc: sha256.c:20
:28  call void (...)* @_ssdm_op_SpecInterface(i32 0, [10 x i8]* @p_str7, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_1: tmp_96 (35)  [1/1] 0.00ns
:29  %tmp_96 = trunc i32 %base_offset_read to i10

ST_1: StgValue_72 (36)  [1/1] 1.59ns
:30  store i32 0, i32* %seg_offset

ST_1: StgValue_73 (37)  [1/1] 1.77ns
:31  store i32 1541459225, i32* %sha256ctx_state_7_2

ST_1: StgValue_74 (38)  [1/1] 1.77ns
:32  store i32 528734635, i32* %sha256ctx_state_6_2

ST_1: StgValue_75 (39)  [1/1] 1.77ns
:33  store i32 -1694144372, i32* %sha256ctx_state_5_2

ST_1: StgValue_76 (40)  [1/1] 1.77ns
:34  store i32 1359893119, i32* %sha256ctx_state_4_2

ST_1: StgValue_77 (41)  [1/1] 1.77ns
:35  store i32 -1521486534, i32* %sha256ctx_state_3_2

ST_1: StgValue_78 (42)  [1/1] 1.77ns
:36  store i32 1013904242, i32* %sha256ctx_state_2_2

ST_1: StgValue_79 (43)  [1/1] 1.77ns
:37  store i32 -1150833019, i32* %sha256ctx_state_1_2

ST_1: StgValue_80 (44)  [1/1] 1.77ns
:38  store i32 1779033703, i32* %sha256ctx_state_0_2

ST_1: StgValue_81 (45)  [1/1] 1.77ns
:39  store i32 0, i32* %sha256ctx_bitlen_1_2

ST_1: StgValue_82 (46)  [1/1] 1.77ns
:40  store i32 0, i32* %sha256ctx_bitlen_0_2

ST_1: StgValue_83 (47)  [1/1] 1.77ns
:41  store i32 0, i32* %sha256ctx_datalen

ST_1: StgValue_84 (48)  [1/1] 1.77ns  loc: sha256.c:11
:42  store i32 %bytes_read, i32* %n

ST_1: StgValue_85 (49)  [1/1] 0.00ns  loc: sha256.c:33
:43  br label %1


 <State 2>: 3.26ns
ST_2: n_load (51)  [1/1] 0.00ns  loc: sha256.c:40
:0  %n_load = load i32* %n

ST_2: tmp (52)  [1/1] 3.26ns  loc: sha256.c:33
:1  %tmp = icmp eq i32 %n_load, 0

ST_2: StgValue_88 (53)  [1/1] 0.00ns  loc: sha256.c:33
:2  br i1 %tmp, label %8, label %2

ST_2: tmp_14 (55)  [1/1] 0.00ns  loc: sha256.c:34
:0  %tmp_14 = call i32 (...)* @_ssdm_op_SpecRegionBegin([12 x i8]* @p_str8) nounwind

ST_2: StgValue_90 (56)  [1/1] 0.00ns  loc: sha256.c:35
:1  call void (...)* @_ssdm_op_SpecLoopTripCount(i32 12, i32 100, i32 56, [1 x i8]* @p_str1) nounwind

ST_2: tmp_97 (57)  [1/1] 0.00ns  loc: sha256.c:36
:2  %tmp_97 = call i26 @_ssdm_op_PartSelect.i26.i32.i32.i32(i32 %n_load, i32 6, i32 31)

ST_2: icmp (58)  [1/1] 3.25ns  loc: sha256.c:36
:3  %icmp = icmp eq i26 %tmp_97, 0

ST_2: StgValue_93 (59)  [1/1] 0.00ns  loc: sha256.c:36
:4  br i1 %icmp, label %.preheader.preheader, label %.preheader6.preheader

ST_2: StgValue_94 (61)  [1/1] 1.59ns  loc: sha256.c:38
.preheader6.preheader:0  br label %.preheader6

ST_2: StgValue_95 (123)  [1/1] 1.59ns  loc: sha256.c:46
.preheader.preheader:0  br label %.preheader

ST_2: sha256ctx_datalen_lo_2 (184)  [1/1] 0.00ns  loc: sha256.c:55
:0  %sha256ctx_datalen_lo_2 = load i32* %sha256ctx_datalen

ST_2: sha256ctx_bitlen_0_2_13 (185)  [1/1] 0.00ns  loc: sha256.c:55
:1  %sha256ctx_bitlen_0_2_13 = load i32* %sha256ctx_bitlen_0_2

ST_2: sha256ctx_bitlen_1_2_14 (186)  [1/1] 0.00ns  loc: sha256.c:55
:2  %sha256ctx_bitlen_1_2_14 = load i32* %sha256ctx_bitlen_1_2

ST_2: sha256ctx_state_0_2_3 (187)  [1/1] 0.00ns  loc: sha256.c:55
:3  %sha256ctx_state_0_2_3 = load i32* %sha256ctx_state_0_2

ST_2: sha256ctx_state_1_2_3 (188)  [1/1] 0.00ns  loc: sha256.c:55
:4  %sha256ctx_state_1_2_3 = load i32* %sha256ctx_state_1_2

ST_2: sha256ctx_state_2_2_3 (189)  [1/1] 0.00ns  loc: sha256.c:55
:5  %sha256ctx_state_2_2_3 = load i32* %sha256ctx_state_2_2

ST_2: sha256ctx_state_3_2_3 (190)  [1/1] 0.00ns  loc: sha256.c:55
:6  %sha256ctx_state_3_2_3 = load i32* %sha256ctx_state_3_2

ST_2: sha256ctx_state_4_2_3 (191)  [1/1] 0.00ns  loc: sha256.c:55
:7  %sha256ctx_state_4_2_3 = load i32* %sha256ctx_state_4_2

ST_2: sha256ctx_state_5_2_3 (192)  [1/1] 0.00ns  loc: sha256.c:55
:8  %sha256ctx_state_5_2_3 = load i32* %sha256ctx_state_5_2

ST_2: sha256ctx_state_6_2_3 (193)  [1/1] 0.00ns  loc: sha256.c:55
:9  %sha256ctx_state_6_2_3 = load i32* %sha256ctx_state_6_2

ST_2: sha256ctx_state_7_2_3 (194)  [1/1] 0.00ns  loc: sha256.c:55
:10  %sha256ctx_state_7_2_3 = load i32* %sha256ctx_state_7_2

ST_2: StgValue_107 (195)  [2/2] 3.26ns  loc: sha256.c:55
:11  call fastcc void @sha256_final([64 x i8]* %sha256ctx_data, i32 %sha256ctx_datalen_lo_2, i32 %sha256ctx_bitlen_0_2_13, i32 %sha256ctx_bitlen_1_2_14, i32 %sha256ctx_state_0_2_3, i32 %sha256ctx_state_1_2_3, i32 %sha256ctx_state_2_2_3, i32 %sha256ctx_state_3_2_3, i32 %sha256ctx_state_4_2_3, i32 %sha256ctx_state_5_2_3, i32 %sha256ctx_state_6_2_3, i32 %sha256ctx_state_7_2_3, [64 x i8]* %seg_buf) nounwind


 <State 3>: 5.99ns
ST_3: i9 (63)  [1/1] 0.00ns
.preheader6:0  %i9 = phi i7 [ %i, %3 ], [ 0, %.preheader6.preheader ]

ST_3: i9_cast5 (64)  [1/1] 0.00ns  loc: sha256.c:38
.preheader6:1  %i9_cast5 = zext i7 %i9 to i10

ST_3: i9_cast4 (65)  [1/1] 0.00ns  loc: sha256.c:38
.preheader6:2  %i9_cast4 = zext i7 %i9 to i32

ST_3: exitcond5 (66)  [1/1] 2.91ns  loc: sha256.c:38
.preheader6:3  %exitcond5 = icmp eq i7 %i9, -64

ST_3: StgValue_112 (67)  [1/1] 0.00ns
.preheader6:4  call void (...)* @_ssdm_op_SpecLoopTripCount(i64 64, i64 64, i64 64)

ST_3: i (68)  [1/1] 2.32ns  loc: sha256.c:38
.preheader6:5  %i = add i7 %i9, 1

ST_3: StgValue_114 (69)  [1/1] 0.00ns  loc: sha256.c:38
.preheader6:6  br i1 %exitcond5, label %4, label %3

ST_3: seg_offset_load_2 (71)  [1/1] 0.00ns  loc: sha256.c:33
:0  %seg_offset_load_2 = load i32* %seg_offset

ST_3: tmp1 (72)  [1/1] 1.86ns  loc: sha256.c:38
:1  %tmp1 = add i10 %tmp_96, %i9_cast5

ST_3: tmp_99 (73)  [1/1] 0.00ns  loc: sha256.c:33
:2  %tmp_99 = trunc i32 %seg_offset_load_2 to i10

ST_3: sum (74)  [1/1] 1.86ns  loc: sha256.c:33
:3  %sum = add i10 %tmp_99, %tmp1

ST_3: sum_cast (75)  [1/1] 0.00ns  loc: sha256.c:33
:4  %sum_cast = zext i10 %sum to i32

ST_3: data_addr (76)  [1/1] 0.00ns  loc: sha256.c:39
:5  %data_addr = getelementptr [256 x i8]* %data, i32 0, i32 %sum_cast

ST_3: data_load (77)  [2/2] 2.27ns  loc: sha256.c:39
:6  %data_load = load i8* %data_addr, align 1

ST_3: sha256ctx_datalen_lo (82)  [1/1] 0.00ns  loc: sha256.c:42
:0  %sha256ctx_datalen_lo = load i32* %sha256ctx_datalen

ST_3: sha256ctx_bitlen_0_s (83)  [1/1] 0.00ns  loc: sha256.c:42
:1  %sha256ctx_bitlen_0_s = load i32* %sha256ctx_bitlen_0_2

ST_3: sha256ctx_bitlen_1_s (84)  [1/1] 0.00ns  loc: sha256.c:42
:2  %sha256ctx_bitlen_1_s = load i32* %sha256ctx_bitlen_1_2

ST_3: sha256ctx_state_0_2_1 (85)  [1/1] 0.00ns  loc: sha256.c:42
:3  %sha256ctx_state_0_2_1 = load i32* %sha256ctx_state_0_2

ST_3: sha256ctx_state_1_2_1 (86)  [1/1] 0.00ns  loc: sha256.c:42
:4  %sha256ctx_state_1_2_1 = load i32* %sha256ctx_state_1_2

ST_3: sha256ctx_state_2_2_1 (87)  [1/1] 0.00ns  loc: sha256.c:42
:5  %sha256ctx_state_2_2_1 = load i32* %sha256ctx_state_2_2

ST_3: sha256ctx_state_3_2_1 (88)  [1/1] 0.00ns  loc: sha256.c:42
:6  %sha256ctx_state_3_2_1 = load i32* %sha256ctx_state_3_2

ST_3: sha256ctx_state_4_2_1 (89)  [1/1] 0.00ns  loc: sha256.c:42
:7  %sha256ctx_state_4_2_1 = load i32* %sha256ctx_state_4_2

ST_3: sha256ctx_state_5_2_1 (90)  [1/1] 0.00ns  loc: sha256.c:42
:8  %sha256ctx_state_5_2_1 = load i32* %sha256ctx_state_5_2

ST_3: sha256ctx_state_6_2_1 (91)  [1/1] 0.00ns  loc: sha256.c:42
:9  %sha256ctx_state_6_2_1 = load i32* %sha256ctx_state_6_2

ST_3: sha256ctx_state_7_2_1 (92)  [1/1] 0.00ns  loc: sha256.c:42
:10  %sha256ctx_state_7_2_1 = load i32* %sha256ctx_state_7_2

ST_3: n_1 (94)  [1/1] 2.90ns  loc: sha256.c:40
:12  %n_1 = add i32 %n_load, -64

ST_3: call_ret (96)  [2/2] 3.18ns  loc: sha256.c:42
:14  %call_ret = call fastcc { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } @sha256_update([64 x i8]* %sha256ctx_data, i32 %sha256ctx_datalen_lo, i32 %sha256ctx_bitlen_0_s, i32 %sha256ctx_bitlen_1_s, i32 %sha256ctx_state_0_2_1, i32 %sha256ctx_state_1_2_1, i32 %sha256ctx_state_2_2_1, i32 %sha256ctx_state_3_2_1, i32 %sha256ctx_state_4_2_1, i32 %sha256ctx_state_5_2_1, i32 %sha256ctx_state_6_2_1, i32 %sha256ctx_state_7_2_1, [64 x i8]* %seg_buf, i32 64) nounwind

ST_3: StgValue_135 (120)  [1/1] 1.77ns  loc: sha256.c:40
:38  store i32 %n_1, i32* %n


 <State 4>: 4.59ns
ST_4: data_load (77)  [1/2] 2.27ns  loc: sha256.c:39
:6  %data_load = load i8* %data_addr, align 1

ST_4: seg_buf_addr_2 (78)  [1/1] 0.00ns  loc: sha256.c:39
:7  %seg_buf_addr_2 = getelementptr inbounds [64 x i8]* %seg_buf, i32 0, i32 %i9_cast4

ST_4: StgValue_138 (79)  [1/1] 2.32ns  loc: sha256.c:39
:8  store i8 %data_load, i8* %seg_buf_addr_2, align 1

ST_4: StgValue_139 (80)  [1/1] 0.00ns  loc: sha256.c:38
:9  br label %.preheader6


 <State 5>: 4.49ns
ST_5: seg_offset_load (93)  [1/1] 0.00ns  loc: sha256.c:41
:11  %seg_offset_load = load i32* %seg_offset

ST_5: seg_offset_1 (95)  [1/1] 2.90ns  loc: sha256.c:41
:13  %seg_offset_1 = add i32 %seg_offset_load, 64

ST_5: call_ret (96)  [1/2] 0.00ns  loc: sha256.c:42
:14  %call_ret = call fastcc { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } @sha256_update([64 x i8]* %sha256ctx_data, i32 %sha256ctx_datalen_lo, i32 %sha256ctx_bitlen_0_s, i32 %sha256ctx_bitlen_1_s, i32 %sha256ctx_state_0_2_1, i32 %sha256ctx_state_1_2_1, i32 %sha256ctx_state_2_2_1, i32 %sha256ctx_state_3_2_1, i32 %sha256ctx_state_4_2_1, i32 %sha256ctx_state_5_2_1, i32 %sha256ctx_state_6_2_1, i32 %sha256ctx_state_7_2_1, [64 x i8]* %seg_buf, i32 64) nounwind

ST_5: sha256ctx_datalen_2 (97)  [1/1] 0.00ns  loc: sha256.c:42
:15  %sha256ctx_datalen_2 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 0

ST_5: sha256ctx_bitlen_0 (98)  [1/1] 0.00ns  loc: sha256.c:42
:16  %sha256ctx_bitlen_0 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 1

ST_5: sha256ctx_bitlen_1 (99)  [1/1] 0.00ns  loc: sha256.c:42
:17  %sha256ctx_bitlen_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 2

ST_5: sha256ctx_state_0 (100)  [1/1] 0.00ns  loc: sha256.c:42
:18  %sha256ctx_state_0 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 3

ST_5: sha256ctx_state_1 (101)  [1/1] 0.00ns  loc: sha256.c:42
:19  %sha256ctx_state_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 4

ST_5: sha256ctx_state_2 (102)  [1/1] 0.00ns  loc: sha256.c:42
:20  %sha256ctx_state_2 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 5

ST_5: sha256ctx_state_3 (103)  [1/1] 0.00ns  loc: sha256.c:42
:21  %sha256ctx_state_3 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 6

ST_5: sha256ctx_state_4 (104)  [1/1] 0.00ns  loc: sha256.c:42
:22  %sha256ctx_state_4 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 7

ST_5: sha256ctx_state_5 (105)  [1/1] 0.00ns  loc: sha256.c:42
:23  %sha256ctx_state_5 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 8

ST_5: sha256ctx_state_6 (106)  [1/1] 0.00ns  loc: sha256.c:42
:24  %sha256ctx_state_6 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 9

ST_5: sha256ctx_state_7 (107)  [1/1] 0.00ns  loc: sha256.c:42
:25  %sha256ctx_state_7 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 10

ST_5: StgValue_154 (108)  [1/1] 1.59ns  loc: sha256.c:41
:26  store i32 %seg_offset_1, i32* %seg_offset

ST_5: StgValue_155 (109)  [1/1] 1.77ns  loc: sha256.c:42
:27  store i32 %sha256ctx_state_7, i32* %sha256ctx_state_7_2

ST_5: StgValue_156 (110)  [1/1] 1.77ns  loc: sha256.c:42
:28  store i32 %sha256ctx_state_6, i32* %sha256ctx_state_6_2

ST_5: StgValue_157 (111)  [1/1] 1.77ns  loc: sha256.c:42
:29  store i32 %sha256ctx_state_5, i32* %sha256ctx_state_5_2

ST_5: StgValue_158 (112)  [1/1] 1.77ns  loc: sha256.c:42
:30  store i32 %sha256ctx_state_4, i32* %sha256ctx_state_4_2

ST_5: StgValue_159 (113)  [1/1] 1.77ns  loc: sha256.c:42
:31  store i32 %sha256ctx_state_3, i32* %sha256ctx_state_3_2

ST_5: StgValue_160 (114)  [1/1] 1.77ns  loc: sha256.c:42
:32  store i32 %sha256ctx_state_2, i32* %sha256ctx_state_2_2

ST_5: StgValue_161 (115)  [1/1] 1.77ns  loc: sha256.c:42
:33  store i32 %sha256ctx_state_1, i32* %sha256ctx_state_1_2

ST_5: StgValue_162 (116)  [1/1] 1.77ns  loc: sha256.c:42
:34  store i32 %sha256ctx_state_0, i32* %sha256ctx_state_0_2

ST_5: StgValue_163 (117)  [1/1] 1.77ns  loc: sha256.c:42
:35  store i32 %sha256ctx_bitlen_1, i32* %sha256ctx_bitlen_1_2

ST_5: StgValue_164 (118)  [1/1] 1.77ns  loc: sha256.c:42
:36  store i32 %sha256ctx_bitlen_0, i32* %sha256ctx_bitlen_0_2

ST_5: StgValue_165 (119)  [1/1] 1.77ns  loc: sha256.c:42
:37  store i32 %sha256ctx_datalen_2, i32* %sha256ctx_datalen

ST_5: StgValue_166 (121)  [1/1] 0.00ns  loc: sha256.c:43
:39  br label %7

ST_5: call_ret1 (155)  [1/2] 0.00ns  loc: sha256.c:49
:11  %call_ret1 = call fastcc { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } @sha256_update([64 x i8]* %sha256ctx_data, i32 %sha256ctx_datalen_lo_1, i32 %sha256ctx_bitlen_0_1, i32 %sha256ctx_bitlen_1_1, i32 %sha256ctx_state_0_2_2, i32 %sha256ctx_state_1_2_2, i32 %sha256ctx_state_2_2_2, i32 %sha256ctx_state_3_2_2, i32 %sha256ctx_state_4_2_2, i32 %sha256ctx_state_5_2_2, i32 %sha256ctx_state_6_2_2, i32 %sha256ctx_state_7_2_2, [64 x i8]* %seg_buf, i32 %n_load) nounwind

ST_5: sha256ctx_datalen_1 (156)  [1/1] 0.00ns  loc: sha256.c:49
:12  %sha256ctx_datalen_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret1, 0

ST_5: sha256ctx_bitlen_0_1_10 (157)  [1/1] 0.00ns  loc: sha256.c:49
:13  %sha256ctx_bitlen_0_1_10 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret1, 1

ST_5: sha256ctx_bitlen_1_1_11 (158)  [1/1] 0.00ns  loc: sha256.c:49
:14  %sha256ctx_bitlen_1_1_11 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret1, 2

ST_5: sha256ctx_state_0_1 (159)  [1/1] 0.00ns  loc: sha256.c:49
:15  %sha256ctx_state_0_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret1, 3

ST_5: sha256ctx_state_1_1 (160)  [1/1] 0.00ns  loc: sha256.c:49
:16  %sha256ctx_state_1_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret1, 4

ST_5: sha256ctx_state_2_1 (161)  [1/1] 0.00ns  loc: sha256.c:49
:17  %sha256ctx_state_2_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret1, 5

ST_5: sha256ctx_state_3_1 (162)  [1/1] 0.00ns  loc: sha256.c:49
:18  %sha256ctx_state_3_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret1, 6

ST_5: sha256ctx_state_4_1 (163)  [1/1] 0.00ns  loc: sha256.c:49
:19  %sha256ctx_state_4_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret1, 7

ST_5: sha256ctx_state_5_1 (164)  [1/1] 0.00ns  loc: sha256.c:49
:20  %sha256ctx_state_5_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret1, 8

ST_5: sha256ctx_state_6_1 (165)  [1/1] 0.00ns  loc: sha256.c:49
:21  %sha256ctx_state_6_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret1, 9

ST_5: sha256ctx_state_7_1 (166)  [1/1] 0.00ns  loc: sha256.c:49
:22  %sha256ctx_state_7_1 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret1, 10

ST_5: StgValue_179 (167)  [1/1] 1.77ns  loc: sha256.c:49
:23  store i32 %sha256ctx_state_7_1, i32* %sha256ctx_state_7_2

ST_5: StgValue_180 (168)  [1/1] 1.77ns  loc: sha256.c:49
:24  store i32 %sha256ctx_state_6_1, i32* %sha256ctx_state_6_2

ST_5: StgValue_181 (169)  [1/1] 1.77ns  loc: sha256.c:49
:25  store i32 %sha256ctx_state_5_1, i32* %sha256ctx_state_5_2

ST_5: StgValue_182 (170)  [1/1] 1.77ns  loc: sha256.c:49
:26  store i32 %sha256ctx_state_4_1, i32* %sha256ctx_state_4_2

ST_5: StgValue_183 (171)  [1/1] 1.77ns  loc: sha256.c:49
:27  store i32 %sha256ctx_state_3_1, i32* %sha256ctx_state_3_2

ST_5: StgValue_184 (172)  [1/1] 1.77ns  loc: sha256.c:49
:28  store i32 %sha256ctx_state_2_1, i32* %sha256ctx_state_2_2

ST_5: StgValue_185 (173)  [1/1] 1.77ns  loc: sha256.c:49
:29  store i32 %sha256ctx_state_1_1, i32* %sha256ctx_state_1_2

ST_5: StgValue_186 (174)  [1/1] 1.77ns  loc: sha256.c:49
:30  store i32 %sha256ctx_state_0_1, i32* %sha256ctx_state_0_2

ST_5: StgValue_187 (175)  [1/1] 1.77ns  loc: sha256.c:49
:31  store i32 %sha256ctx_bitlen_1_1_11, i32* %sha256ctx_bitlen_1_2

ST_5: StgValue_188 (176)  [1/1] 1.77ns  loc: sha256.c:49
:32  store i32 %sha256ctx_bitlen_0_1_10, i32* %sha256ctx_bitlen_0_2

ST_5: StgValue_189 (177)  [1/1] 1.77ns  loc: sha256.c:49
:33  store i32 %sha256ctx_datalen_1, i32* %sha256ctx_datalen

ST_5: StgValue_190 (179)  [1/1] 0.00ns
:35  br label %7

ST_5: empty_12 (181)  [1/1] 0.00ns  loc: sha256.c:52
:0  %empty_12 = call i32 (...)* @_ssdm_op_SpecRegionEnd([12 x i8]* @p_str8, i32 %tmp_14) nounwind

ST_5: StgValue_192 (182)  [1/1] 0.00ns  loc: sha256.c:52
:1  br label %1


 <State 6>: 5.99ns
ST_6: i_1 (125)  [1/1] 0.00ns
.preheader:0  %i_1 = phi i6 [ %i_7, %5 ], [ 0, %.preheader.preheader ]

ST_6: i_1_cast3 (126)  [1/1] 0.00ns  loc: sha256.c:46
.preheader:1  %i_1_cast3 = zext i6 %i_1 to i10

ST_6: i_1_cast (127)  [1/1] 0.00ns  loc: sha256.c:46
.preheader:2  %i_1_cast = zext i6 %i_1 to i32

ST_6: exitcond4 (128)  [1/1] 3.26ns  loc: sha256.c:46
.preheader:3  %exitcond4 = icmp eq i32 %i_1_cast, %n_load

ST_6: StgValue_197 (129)  [1/1] 0.00ns
.preheader:4  call void (...)* @_ssdm_op_SpecLoopTripCount(i64 12, i64 63, i64 56)

ST_6: i_7 (130)  [1/1] 2.31ns  loc: sha256.c:46
.preheader:5  %i_7 = add i6 %i_1, 1

ST_6: StgValue_199 (131)  [1/1] 0.00ns  loc: sha256.c:46
.preheader:6  br i1 %exitcond4, label %6, label %5

ST_6: seg_offset_load_1 (133)  [1/1] 0.00ns  loc: sha256.c:33
:0  %seg_offset_load_1 = load i32* %seg_offset

ST_6: tmp2 (134)  [1/1] 1.86ns  loc: sha256.c:46
:1  %tmp2 = add i10 %tmp_96, %i_1_cast3

ST_6: tmp_98 (135)  [1/1] 0.00ns  loc: sha256.c:33
:2  %tmp_98 = trunc i32 %seg_offset_load_1 to i10

ST_6: sum2 (136)  [1/1] 1.86ns  loc: sha256.c:33
:3  %sum2 = add i10 %tmp_98, %tmp2

ST_6: sum2_cast (137)  [1/1] 0.00ns  loc: sha256.c:33
:4  %sum2_cast = zext i10 %sum2 to i32

ST_6: data_addr_4 (138)  [1/1] 0.00ns  loc: sha256.c:48
:5  %data_addr_4 = getelementptr [256 x i8]* %data, i32 0, i32 %sum2_cast

ST_6: data_load_4 (139)  [2/2] 2.27ns  loc: sha256.c:48
:6  %data_load_4 = load i8* %data_addr_4, align 1

ST_6: sha256ctx_datalen_lo_1 (144)  [1/1] 0.00ns  loc: sha256.c:49
:0  %sha256ctx_datalen_lo_1 = load i32* %sha256ctx_datalen

ST_6: sha256ctx_bitlen_0_1 (145)  [1/1] 0.00ns  loc: sha256.c:49
:1  %sha256ctx_bitlen_0_1 = load i32* %sha256ctx_bitlen_0_2

ST_6: sha256ctx_bitlen_1_1 (146)  [1/1] 0.00ns  loc: sha256.c:49
:2  %sha256ctx_bitlen_1_1 = load i32* %sha256ctx_bitlen_1_2

ST_6: sha256ctx_state_0_2_2 (147)  [1/1] 0.00ns  loc: sha256.c:49
:3  %sha256ctx_state_0_2_2 = load i32* %sha256ctx_state_0_2

ST_6: sha256ctx_state_1_2_2 (148)  [1/1] 0.00ns  loc: sha256.c:49
:4  %sha256ctx_state_1_2_2 = load i32* %sha256ctx_state_1_2

ST_6: sha256ctx_state_2_2_2 (149)  [1/1] 0.00ns  loc: sha256.c:49
:5  %sha256ctx_state_2_2_2 = load i32* %sha256ctx_state_2_2

ST_6: sha256ctx_state_3_2_2 (150)  [1/1] 0.00ns  loc: sha256.c:49
:6  %sha256ctx_state_3_2_2 = load i32* %sha256ctx_state_3_2

ST_6: sha256ctx_state_4_2_2 (151)  [1/1] 0.00ns  loc: sha256.c:49
:7  %sha256ctx_state_4_2_2 = load i32* %sha256ctx_state_4_2

ST_6: sha256ctx_state_5_2_2 (152)  [1/1] 0.00ns  loc: sha256.c:49
:8  %sha256ctx_state_5_2_2 = load i32* %sha256ctx_state_5_2

ST_6: sha256ctx_state_6_2_2 (153)  [1/1] 0.00ns  loc: sha256.c:49
:9  %sha256ctx_state_6_2_2 = load i32* %sha256ctx_state_6_2

ST_6: sha256ctx_state_7_2_2 (154)  [1/1] 0.00ns  loc: sha256.c:49
:10  %sha256ctx_state_7_2_2 = load i32* %sha256ctx_state_7_2

ST_6: call_ret1 (155)  [2/2] 3.18ns  loc: sha256.c:49
:11  %call_ret1 = call fastcc { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } @sha256_update([64 x i8]* %sha256ctx_data, i32 %sha256ctx_datalen_lo_1, i32 %sha256ctx_bitlen_0_1, i32 %sha256ctx_bitlen_1_1, i32 %sha256ctx_state_0_2_2, i32 %sha256ctx_state_1_2_2, i32 %sha256ctx_state_2_2_2, i32 %sha256ctx_state_3_2_2, i32 %sha256ctx_state_4_2_2, i32 %sha256ctx_state_5_2_2, i32 %sha256ctx_state_6_2_2, i32 %sha256ctx_state_7_2_2, [64 x i8]* %seg_buf, i32 %n_load) nounwind

ST_6: StgValue_219 (178)  [1/1] 1.77ns
:34  store i32 0, i32* %n


 <State 7>: 4.59ns
ST_7: data_load_4 (139)  [1/2] 2.27ns  loc: sha256.c:48
:6  %data_load_4 = load i8* %data_addr_4, align 1

ST_7: seg_buf_addr_3 (140)  [1/1] 0.00ns  loc: sha256.c:48
:7  %seg_buf_addr_3 = getelementptr inbounds [64 x i8]* %seg_buf, i32 0, i32 %i_1_cast

ST_7: StgValue_222 (141)  [1/1] 2.32ns  loc: sha256.c:48
:8  store i8 %data_load_4, i8* %seg_buf_addr_3, align 1

ST_7: StgValue_223 (142)  [1/1] 0.00ns  loc: sha256.c:46
:9  br label %.preheader


 <State 8>: 0.00ns
ST_8: StgValue_224 (195)  [1/2] 0.00ns  loc: sha256.c:55
:11  call fastcc void @sha256_final([64 x i8]* %sha256ctx_data, i32 %sha256ctx_datalen_lo_2, i32 %sha256ctx_bitlen_0_2_13, i32 %sha256ctx_bitlen_1_2_14, i32 %sha256ctx_state_0_2_3, i32 %sha256ctx_state_1_2_3, i32 %sha256ctx_state_2_2_3, i32 %sha256ctx_state_3_2_3, i32 %sha256ctx_state_4_2_3, i32 %sha256ctx_state_5_2_3, i32 %sha256ctx_state_6_2_3, i32 %sha256ctx_state_7_2_3, [64 x i8]* %seg_buf) nounwind


 <State 9>: 2.32ns
ST_9: seg_buf_addr (196)  [1/1] 0.00ns  loc: sha256.c:60
:12  %seg_buf_addr = getelementptr inbounds [64 x i8]* %seg_buf, i32 0, i32 0

ST_9: seg_buf_load (197)  [2/2] 2.32ns  loc: sha256.c:60
:13  %seg_buf_load = load i8* %seg_buf_addr, align 1


 <State 10>: 4.64ns
ST_10: seg_buf_load (197)  [1/2] 2.32ns  loc: sha256.c:60
:13  %seg_buf_load = load i8* %seg_buf_addr, align 1

ST_10: digest_addr (198)  [1/1] 0.00ns  loc: sha256.c:60
:14  %digest_addr = getelementptr [32 x i8]* %digest, i32 0, i32 0

ST_10: StgValue_229 (199)  [1/1] 2.32ns  loc: sha256.c:60
:15  store i8 %seg_buf_load, i8* %digest_addr, align 1

ST_10: seg_buf_addr_1 (200)  [1/1] 0.00ns  loc: sha256.c:60
:16  %seg_buf_addr_1 = getelementptr inbounds [64 x i8]* %seg_buf, i32 0, i32 1

ST_10: seg_buf_load_1 (201)  [2/2] 2.32ns  loc: sha256.c:60
:17  %seg_buf_load_1 = load i8* %seg_buf_addr_1, align 1


 <State 11>: 4.64ns
ST_11: seg_buf_load_1 (201)  [1/2] 2.32ns  loc: sha256.c:60
:17  %seg_buf_load_1 = load i8* %seg_buf_addr_1, align 1

ST_11: digest_addr_1 (202)  [1/1] 0.00ns  loc: sha256.c:60
:18  %digest_addr_1 = getelementptr [32 x i8]* %digest, i32 0, i32 1

ST_11: StgValue_234 (203)  [1/1] 2.32ns  loc: sha256.c:60
:19  store i8 %seg_buf_load_1, i8* %digest_addr_1, align 1

ST_11: seg_buf_addr_4 (204)  [1/1] 0.00ns  loc: sha256.c:60
:20  %seg_buf_addr_4 = getelementptr inbounds [64 x i8]* %seg_buf, i32 0, i32 2

ST_11: seg_buf_load_2 (205)  [2/2] 2.32ns  loc: sha256.c:60
:21  %seg_buf_load_2 = load i8* %seg_buf_addr_4, align 1


 <State 12>: 4.64ns
ST_12: seg_buf_load_2 (205)  [1/2] 2.32ns  loc: sha256.c:60
:21  %seg_buf_load_2 = load i8* %seg_buf_addr_4, align 1

ST_12: digest_addr_2 (206)  [1/1] 0.00ns  loc: sha256.c:60
:22  %digest_addr_2 = getelementptr [32 x i8]* %digest, i32 0, i32 2

ST_12: StgValue_239 (207)  [1/1] 2.32ns  loc: sha256.c:60
:23  store i8 %seg_buf_load_2, i8* %digest_addr_2, align 1

ST_12: seg_buf_addr_5 (208)  [1/1] 0.00ns  loc: sha256.c:60
:24  %seg_buf_addr_5 = getelementptr inbounds [64 x i8]* %seg_buf, i32 0, i32 3

ST_12: seg_buf_load_3 (209)  [2/2] 2.32ns  loc: sha256.c:60
:25  %seg_buf_load_3 = load i8* %seg_buf_addr_5, align 1


 <State 13>: 4.64ns
ST_13: seg_buf_load_3 (209)  [1/2] 2.32ns  loc: sha256.c:60
:25  %seg_buf_load_3 = load i8* %seg_buf_addr_5, align 1

ST_13: digest_addr_3 (210)  [1/1] 0.00ns  loc: sha256.c:60
:26  %digest_addr_3 = getelementptr [32 x i8]* %digest, i32 0, i32 3

ST_13: StgValue_244 (211)  [1/1] 2.32ns  loc: sha256.c:60
:27  store i8 %seg_buf_load_3, i8* %digest_addr_3, align 1

ST_13: seg_buf_addr_6 (212)  [1/1] 0.00ns  loc: sha256.c:60
:28  %seg_buf_addr_6 = getelementptr inbounds [64 x i8]* %seg_buf, i32 0, i32 4

ST_13: seg_buf_load_4 (213)  [2/2] 2.32ns  loc: sha256.c:60
:29  %seg_buf_load_4 = load i8* %seg_buf_addr_6, align 1


 <State 14>: 4.64ns
ST_14: seg_buf_load_4 (213)  [1/2] 2.32ns  loc: sha256.c:60
:29  %seg_buf_load_4 = load i8* %seg_buf_addr_6, align 1

ST_14: digest_addr_4 (214)  [1/1] 0.00ns  loc: sha256.c:60
:30  %digest_addr_4 = getelementptr [32 x i8]* %digest, i32 0, i32 4

ST_14: StgValue_249 (215)  [1/1] 2.32ns  loc: sha256.c:60
:31  store i8 %seg_buf_load_4, i8* %digest_addr_4, align 1

ST_14: seg_buf_addr_7 (216)  [1/1] 0.00ns  loc: sha256.c:60
:32  %seg_buf_addr_7 = getelementptr inbounds [64 x i8]* %seg_buf, i32 0, i32 5

ST_14: seg_buf_load_5 (217)  [2/2] 2.32ns  loc: sha256.c:60
:33  %seg_buf_load_5 = load i8* %seg_buf_addr_7, align 1


 <State 15>: 4.64ns
ST_15: seg_buf_load_5 (217)  [1/2] 2.32ns  loc: sha256.c:60
:33  %seg_buf_load_5 = load i8* %seg_buf_addr_7, align 1

ST_15: digest_addr_5 (218)  [1/1] 0.00ns  loc: sha256.c:60
:34  %digest_addr_5 = getelementptr [32 x i8]* %digest, i32 0, i32 5

ST_15: StgValue_254 (219)  [1/1] 2.32ns  loc: sha256.c:60
:35  store i8 %seg_buf_load_5, i8* %digest_addr_5, align 1

ST_15: seg_buf_addr_8 (220)  [1/1] 0.00ns  loc: sha256.c:60
:36  %seg_buf_addr_8 = getelementptr inbounds [64 x i8]* %seg_buf, i32 0, i32 6

ST_15: seg_buf_load_6 (221)  [2/2] 2.32ns  loc: sha256.c:60
:37  %seg_buf_load_6 = load i8* %seg_buf_addr_8, align 1


 <State 16>: 4.64ns
ST_16: seg_buf_load_6 (221)  [1/2] 2.32ns  loc: sha256.c:60
:37  %seg_buf_load_6 = load i8* %seg_buf_addr_8, align 1

ST_16: digest_addr_6 (222)  [1/1] 0.00ns  loc: sha256.c:60
:38  %digest_addr_6 = getelementptr [32 x i8]* %digest, i32 0, i32 6

ST_16: StgValue_259 (223)  [1/1] 2.32ns  loc: sha256.c:60
:39  store i8 %seg_buf_load_6, i8* %digest_addr_6, align 1

ST_16: seg_buf_addr_9 (224)  [1/1] 0.00ns  loc: sha256.c:60
:40  %seg_buf_addr_9 = getelementptr inbounds [64 x i8]* %seg_buf, i32 0, i32 7

ST_16: seg_buf_load_7 (225)  [2/2] 2.32ns  loc: sha256.c:60
:41  %seg_buf_load_7 = load i8* %seg_buf_addr_9, align 1


 <State 17>: 4.64ns
ST_17: seg_buf_load_7 (225)  [1/2] 2.32ns  loc: sha256.c:60
:41  %seg_buf_load_7 = load i8* %seg_buf_addr_9, align 1

ST_17: digest_addr_7 (226)  [1/1] 0.00ns  loc: sha256.c:60
:42  %digest_addr_7 = getelementptr [32 x i8]* %digest, i32 0, i32 7

ST_17: StgValue_264 (227)  [1/1] 2.32ns  loc: sha256.c:60
:43  store i8 %seg_buf_load_7, i8* %digest_addr_7, align 1

ST_17: seg_buf_addr_10 (228)  [1/1] 0.00ns  loc: sha256.c:60
:44  %seg_buf_addr_10 = getelementptr inbounds [64 x i8]* %seg_buf, i32 0, i32 8

ST_17: seg_buf_load_8 (229)  [2/2] 2.32ns  loc: sha256.c:60
:45  %seg_buf_load_8 = load i8* %seg_buf_addr_10, align 1


 <State 18>: 4.64ns
ST_18: seg_buf_load_8 (229)  [1/2] 2.32ns  loc: sha256.c:60
:45  %seg_buf_load_8 = load i8* %seg_buf_addr_10, align 1

ST_18: digest_addr_8 (230)  [1/1] 0.00ns  loc: sha256.c:60
:46  %digest_addr_8 = getelementptr [32 x i8]* %digest, i32 0, i32 8

ST_18: StgValue_269 (231)  [1/1] 2.32ns  loc: sha256.c:60
:47  store i8 %seg_buf_load_8, i8* %digest_addr_8, align 1

ST_18: seg_buf_addr_11 (232)  [1/1] 0.00ns  loc: sha256.c:60
:48  %seg_buf_addr_11 = getelementptr inbounds [64 x i8]* %seg_buf, i32 0, i32 9

ST_18: seg_buf_load_9 (233)  [2/2] 2.32ns  loc: sha256.c:60
:49  %seg_buf_load_9 = load i8* %seg_buf_addr_11, align 1


 <State 19>: 4.64ns
ST_19: seg_buf_load_9 (233)  [1/2] 2.32ns  loc: sha256.c:60
:49  %seg_buf_load_9 = load i8* %seg_buf_addr_11, align 1

ST_19: digest_addr_9 (234)  [1/1] 0.00ns  loc: sha256.c:60
:50  %digest_addr_9 = getelementptr [32 x i8]* %digest, i32 0, i32 9

ST_19: StgValue_274 (235)  [1/1] 2.32ns  loc: sha256.c:60
:51  store i8 %seg_buf_load_9, i8* %digest_addr_9, align 1

ST_19: seg_buf_addr_12 (236)  [1/1] 0.00ns  loc: sha256.c:60
:52  %seg_buf_addr_12 = getelementptr inbounds [64 x i8]* %seg_buf, i32 0, i32 10

ST_19: seg_buf_load_10 (237)  [2/2] 2.32ns  loc: sha256.c:60
:53  %seg_buf_load_10 = load i8* %seg_buf_addr_12, align 1


 <State 20>: 4.64ns
ST_20: seg_buf_load_10 (237)  [1/2] 2.32ns  loc: sha256.c:60
:53  %seg_buf_load_10 = load i8* %seg_buf_addr_12, align 1

ST_20: digest_addr_10 (238)  [1/1] 0.00ns  loc: sha256.c:60
:54  %digest_addr_10 = getelementptr [32 x i8]* %digest, i32 0, i32 10

ST_20: StgValue_279 (239)  [1/1] 2.32ns  loc: sha256.c:60
:55  store i8 %seg_buf_load_10, i8* %digest_addr_10, align 1

ST_20: seg_buf_addr_13 (240)  [1/1] 0.00ns  loc: sha256.c:60
:56  %seg_buf_addr_13 = getelementptr inbounds [64 x i8]* %seg_buf, i32 0, i32 11

ST_20: seg_buf_load_11 (241)  [2/2] 2.32ns  loc: sha256.c:60
:57  %seg_buf_load_11 = load i8* %seg_buf_addr_13, align 1


 <State 21>: 4.64ns
ST_21: seg_buf_load_11 (241)  [1/2] 2.32ns  loc: sha256.c:60
:57  %seg_buf_load_11 = load i8* %seg_buf_addr_13, align 1

ST_21: digest_addr_11 (242)  [1/1] 0.00ns  loc: sha256.c:60
:58  %digest_addr_11 = getelementptr [32 x i8]* %digest, i32 0, i32 11

ST_21: StgValue_284 (243)  [1/1] 2.32ns  loc: sha256.c:60
:59  store i8 %seg_buf_load_11, i8* %digest_addr_11, align 1

ST_21: seg_buf_addr_14 (244)  [1/1] 0.00ns  loc: sha256.c:60
:60  %seg_buf_addr_14 = getelementptr inbounds [64 x i8]* %seg_buf, i32 0, i32 12

ST_21: seg_buf_load_12 (245)  [2/2] 2.32ns  loc: sha256.c:60
:61  %seg_buf_load_12 = load i8* %seg_buf_addr_14, align 1


 <State 22>: 4.64ns
ST_22: seg_buf_load_12 (245)  [1/2] 2.32ns  loc: sha256.c:60
:61  %seg_buf_load_12 = load i8* %seg_buf_addr_14, align 1

ST_22: digest_addr_12 (246)  [1/1] 0.00ns  loc: sha256.c:60
:62  %digest_addr_12 = getelementptr [32 x i8]* %digest, i32 0, i32 12

ST_22: StgValue_289 (247)  [1/1] 2.32ns  loc: sha256.c:60
:63  store i8 %seg_buf_load_12, i8* %digest_addr_12, align 1

ST_22: seg_buf_addr_15 (248)  [1/1] 0.00ns  loc: sha256.c:60
:64  %seg_buf_addr_15 = getelementptr inbounds [64 x i8]* %seg_buf, i32 0, i32 13

ST_22: seg_buf_load_13 (249)  [2/2] 2.32ns  loc: sha256.c:60
:65  %seg_buf_load_13 = load i8* %seg_buf_addr_15, align 1


 <State 23>: 4.64ns
ST_23: seg_buf_load_13 (249)  [1/2] 2.32ns  loc: sha256.c:60
:65  %seg_buf_load_13 = load i8* %seg_buf_addr_15, align 1

ST_23: digest_addr_13 (250)  [1/1] 0.00ns  loc: sha256.c:60
:66  %digest_addr_13 = getelementptr [32 x i8]* %digest, i32 0, i32 13

ST_23: StgValue_294 (251)  [1/1] 2.32ns  loc: sha256.c:60
:67  store i8 %seg_buf_load_13, i8* %digest_addr_13, align 1

ST_23: seg_buf_addr_16 (252)  [1/1] 0.00ns  loc: sha256.c:60
:68  %seg_buf_addr_16 = getelementptr inbounds [64 x i8]* %seg_buf, i32 0, i32 14

ST_23: seg_buf_load_14 (253)  [2/2] 2.32ns  loc: sha256.c:60
:69  %seg_buf_load_14 = load i8* %seg_buf_addr_16, align 1


 <State 24>: 4.64ns
ST_24: seg_buf_load_14 (253)  [1/2] 2.32ns  loc: sha256.c:60
:69  %seg_buf_load_14 = load i8* %seg_buf_addr_16, align 1

ST_24: digest_addr_14 (254)  [1/1] 0.00ns  loc: sha256.c:60
:70  %digest_addr_14 = getelementptr [32 x i8]* %digest, i32 0, i32 14

ST_24: StgValue_299 (255)  [1/1] 2.32ns  loc: sha256.c:60
:71  store i8 %seg_buf_load_14, i8* %digest_addr_14, align 1

ST_24: seg_buf_addr_17 (256)  [1/1] 0.00ns  loc: sha256.c:60
:72  %seg_buf_addr_17 = getelementptr inbounds [64 x i8]* %seg_buf, i32 0, i32 15

ST_24: seg_buf_load_15 (257)  [2/2] 2.32ns  loc: sha256.c:60
:73  %seg_buf_load_15 = load i8* %seg_buf_addr_17, align 1


 <State 25>: 4.64ns
ST_25: seg_buf_load_15 (257)  [1/2] 2.32ns  loc: sha256.c:60
:73  %seg_buf_load_15 = load i8* %seg_buf_addr_17, align 1

ST_25: digest_addr_15 (258)  [1/1] 0.00ns  loc: sha256.c:60
:74  %digest_addr_15 = getelementptr [32 x i8]* %digest, i32 0, i32 15

ST_25: StgValue_304 (259)  [1/1] 2.32ns  loc: sha256.c:60
:75  store i8 %seg_buf_load_15, i8* %digest_addr_15, align 1

ST_25: seg_buf_addr_18 (260)  [1/1] 0.00ns  loc: sha256.c:60
:76  %seg_buf_addr_18 = getelementptr inbounds [64 x i8]* %seg_buf, i32 0, i32 16

ST_25: seg_buf_load_16 (261)  [2/2] 2.32ns  loc: sha256.c:60
:77  %seg_buf_load_16 = load i8* %seg_buf_addr_18, align 1


 <State 26>: 4.64ns
ST_26: seg_buf_load_16 (261)  [1/2] 2.32ns  loc: sha256.c:60
:77  %seg_buf_load_16 = load i8* %seg_buf_addr_18, align 1

ST_26: digest_addr_16 (262)  [1/1] 0.00ns  loc: sha256.c:60
:78  %digest_addr_16 = getelementptr [32 x i8]* %digest, i32 0, i32 16

ST_26: StgValue_309 (263)  [1/1] 2.32ns  loc: sha256.c:60
:79  store i8 %seg_buf_load_16, i8* %digest_addr_16, align 1

ST_26: seg_buf_addr_19 (264)  [1/1] 0.00ns  loc: sha256.c:60
:80  %seg_buf_addr_19 = getelementptr inbounds [64 x i8]* %seg_buf, i32 0, i32 17

ST_26: seg_buf_load_17 (265)  [2/2] 2.32ns  loc: sha256.c:60
:81  %seg_buf_load_17 = load i8* %seg_buf_addr_19, align 1


 <State 27>: 4.64ns
ST_27: seg_buf_load_17 (265)  [1/2] 2.32ns  loc: sha256.c:60
:81  %seg_buf_load_17 = load i8* %seg_buf_addr_19, align 1

ST_27: digest_addr_17 (266)  [1/1] 0.00ns  loc: sha256.c:60
:82  %digest_addr_17 = getelementptr [32 x i8]* %digest, i32 0, i32 17

ST_27: StgValue_314 (267)  [1/1] 2.32ns  loc: sha256.c:60
:83  store i8 %seg_buf_load_17, i8* %digest_addr_17, align 1

ST_27: seg_buf_addr_20 (268)  [1/1] 0.00ns  loc: sha256.c:60
:84  %seg_buf_addr_20 = getelementptr inbounds [64 x i8]* %seg_buf, i32 0, i32 18

ST_27: seg_buf_load_18 (269)  [2/2] 2.32ns  loc: sha256.c:60
:85  %seg_buf_load_18 = load i8* %seg_buf_addr_20, align 1


 <State 28>: 4.64ns
ST_28: seg_buf_load_18 (269)  [1/2] 2.32ns  loc: sha256.c:60
:85  %seg_buf_load_18 = load i8* %seg_buf_addr_20, align 1

ST_28: digest_addr_18 (270)  [1/1] 0.00ns  loc: sha256.c:60
:86  %digest_addr_18 = getelementptr [32 x i8]* %digest, i32 0, i32 18

ST_28: StgValue_319 (271)  [1/1] 2.32ns  loc: sha256.c:60
:87  store i8 %seg_buf_load_18, i8* %digest_addr_18, align 1

ST_28: seg_buf_addr_21 (272)  [1/1] 0.00ns  loc: sha256.c:60
:88  %seg_buf_addr_21 = getelementptr inbounds [64 x i8]* %seg_buf, i32 0, i32 19

ST_28: seg_buf_load_19 (273)  [2/2] 2.32ns  loc: sha256.c:60
:89  %seg_buf_load_19 = load i8* %seg_buf_addr_21, align 1


 <State 29>: 4.64ns
ST_29: seg_buf_load_19 (273)  [1/2] 2.32ns  loc: sha256.c:60
:89  %seg_buf_load_19 = load i8* %seg_buf_addr_21, align 1

ST_29: digest_addr_19 (274)  [1/1] 0.00ns  loc: sha256.c:60
:90  %digest_addr_19 = getelementptr [32 x i8]* %digest, i32 0, i32 19

ST_29: StgValue_324 (275)  [1/1] 2.32ns  loc: sha256.c:60
:91  store i8 %seg_buf_load_19, i8* %digest_addr_19, align 1

ST_29: seg_buf_addr_22 (276)  [1/1] 0.00ns  loc: sha256.c:60
:92  %seg_buf_addr_22 = getelementptr inbounds [64 x i8]* %seg_buf, i32 0, i32 20

ST_29: seg_buf_load_20 (277)  [2/2] 2.32ns  loc: sha256.c:60
:93  %seg_buf_load_20 = load i8* %seg_buf_addr_22, align 1


 <State 30>: 4.64ns
ST_30: seg_buf_load_20 (277)  [1/2] 2.32ns  loc: sha256.c:60
:93  %seg_buf_load_20 = load i8* %seg_buf_addr_22, align 1

ST_30: digest_addr_20 (278)  [1/1] 0.00ns  loc: sha256.c:60
:94  %digest_addr_20 = getelementptr [32 x i8]* %digest, i32 0, i32 20

ST_30: StgValue_329 (279)  [1/1] 2.32ns  loc: sha256.c:60
:95  store i8 %seg_buf_load_20, i8* %digest_addr_20, align 1

ST_30: seg_buf_addr_23 (280)  [1/1] 0.00ns  loc: sha256.c:60
:96  %seg_buf_addr_23 = getelementptr inbounds [64 x i8]* %seg_buf, i32 0, i32 21

ST_30: seg_buf_load_21 (281)  [2/2] 2.32ns  loc: sha256.c:60
:97  %seg_buf_load_21 = load i8* %seg_buf_addr_23, align 1


 <State 31>: 4.64ns
ST_31: seg_buf_load_21 (281)  [1/2] 2.32ns  loc: sha256.c:60
:97  %seg_buf_load_21 = load i8* %seg_buf_addr_23, align 1

ST_31: digest_addr_21 (282)  [1/1] 0.00ns  loc: sha256.c:60
:98  %digest_addr_21 = getelementptr [32 x i8]* %digest, i32 0, i32 21

ST_31: StgValue_334 (283)  [1/1] 2.32ns  loc: sha256.c:60
:99  store i8 %seg_buf_load_21, i8* %digest_addr_21, align 1

ST_31: seg_buf_addr_24 (284)  [1/1] 0.00ns  loc: sha256.c:60
:100  %seg_buf_addr_24 = getelementptr inbounds [64 x i8]* %seg_buf, i32 0, i32 22

ST_31: seg_buf_load_22 (285)  [2/2] 2.32ns  loc: sha256.c:60
:101  %seg_buf_load_22 = load i8* %seg_buf_addr_24, align 1


 <State 32>: 4.64ns
ST_32: seg_buf_load_22 (285)  [1/2] 2.32ns  loc: sha256.c:60
:101  %seg_buf_load_22 = load i8* %seg_buf_addr_24, align 1

ST_32: digest_addr_22 (286)  [1/1] 0.00ns  loc: sha256.c:60
:102  %digest_addr_22 = getelementptr [32 x i8]* %digest, i32 0, i32 22

ST_32: StgValue_339 (287)  [1/1] 2.32ns  loc: sha256.c:60
:103  store i8 %seg_buf_load_22, i8* %digest_addr_22, align 1

ST_32: seg_buf_addr_25 (288)  [1/1] 0.00ns  loc: sha256.c:60
:104  %seg_buf_addr_25 = getelementptr inbounds [64 x i8]* %seg_buf, i32 0, i32 23

ST_32: seg_buf_load_23 (289)  [2/2] 2.32ns  loc: sha256.c:60
:105  %seg_buf_load_23 = load i8* %seg_buf_addr_25, align 1


 <State 33>: 4.64ns
ST_33: seg_buf_load_23 (289)  [1/2] 2.32ns  loc: sha256.c:60
:105  %seg_buf_load_23 = load i8* %seg_buf_addr_25, align 1

ST_33: digest_addr_23 (290)  [1/1] 0.00ns  loc: sha256.c:60
:106  %digest_addr_23 = getelementptr [32 x i8]* %digest, i32 0, i32 23

ST_33: StgValue_344 (291)  [1/1] 2.32ns  loc: sha256.c:60
:107  store i8 %seg_buf_load_23, i8* %digest_addr_23, align 1

ST_33: seg_buf_addr_26 (292)  [1/1] 0.00ns  loc: sha256.c:60
:108  %seg_buf_addr_26 = getelementptr inbounds [64 x i8]* %seg_buf, i32 0, i32 24

ST_33: seg_buf_load_24 (293)  [2/2] 2.32ns  loc: sha256.c:60
:109  %seg_buf_load_24 = load i8* %seg_buf_addr_26, align 1


 <State 34>: 4.64ns
ST_34: seg_buf_load_24 (293)  [1/2] 2.32ns  loc: sha256.c:60
:109  %seg_buf_load_24 = load i8* %seg_buf_addr_26, align 1

ST_34: digest_addr_24 (294)  [1/1] 0.00ns  loc: sha256.c:60
:110  %digest_addr_24 = getelementptr [32 x i8]* %digest, i32 0, i32 24

ST_34: StgValue_349 (295)  [1/1] 2.32ns  loc: sha256.c:60
:111  store i8 %seg_buf_load_24, i8* %digest_addr_24, align 1

ST_34: seg_buf_addr_27 (296)  [1/1] 0.00ns  loc: sha256.c:60
:112  %seg_buf_addr_27 = getelementptr inbounds [64 x i8]* %seg_buf, i32 0, i32 25

ST_34: seg_buf_load_25 (297)  [2/2] 2.32ns  loc: sha256.c:60
:113  %seg_buf_load_25 = load i8* %seg_buf_addr_27, align 1


 <State 35>: 4.64ns
ST_35: seg_buf_load_25 (297)  [1/2] 2.32ns  loc: sha256.c:60
:113  %seg_buf_load_25 = load i8* %seg_buf_addr_27, align 1

ST_35: digest_addr_25 (298)  [1/1] 0.00ns  loc: sha256.c:60
:114  %digest_addr_25 = getelementptr [32 x i8]* %digest, i32 0, i32 25

ST_35: StgValue_354 (299)  [1/1] 2.32ns  loc: sha256.c:60
:115  store i8 %seg_buf_load_25, i8* %digest_addr_25, align 1

ST_35: seg_buf_addr_28 (300)  [1/1] 0.00ns  loc: sha256.c:60
:116  %seg_buf_addr_28 = getelementptr inbounds [64 x i8]* %seg_buf, i32 0, i32 26

ST_35: seg_buf_load_26 (301)  [2/2] 2.32ns  loc: sha256.c:60
:117  %seg_buf_load_26 = load i8* %seg_buf_addr_28, align 1


 <State 36>: 4.64ns
ST_36: seg_buf_load_26 (301)  [1/2] 2.32ns  loc: sha256.c:60
:117  %seg_buf_load_26 = load i8* %seg_buf_addr_28, align 1

ST_36: digest_addr_26 (302)  [1/1] 0.00ns  loc: sha256.c:60
:118  %digest_addr_26 = getelementptr [32 x i8]* %digest, i32 0, i32 26

ST_36: StgValue_359 (303)  [1/1] 2.32ns  loc: sha256.c:60
:119  store i8 %seg_buf_load_26, i8* %digest_addr_26, align 1

ST_36: seg_buf_addr_29 (304)  [1/1] 0.00ns  loc: sha256.c:60
:120  %seg_buf_addr_29 = getelementptr inbounds [64 x i8]* %seg_buf, i32 0, i32 27

ST_36: seg_buf_load_27 (305)  [2/2] 2.32ns  loc: sha256.c:60
:121  %seg_buf_load_27 = load i8* %seg_buf_addr_29, align 1


 <State 37>: 4.64ns
ST_37: seg_buf_load_27 (305)  [1/2] 2.32ns  loc: sha256.c:60
:121  %seg_buf_load_27 = load i8* %seg_buf_addr_29, align 1

ST_37: digest_addr_27 (306)  [1/1] 0.00ns  loc: sha256.c:60
:122  %digest_addr_27 = getelementptr [32 x i8]* %digest, i32 0, i32 27

ST_37: StgValue_364 (307)  [1/1] 2.32ns  loc: sha256.c:60
:123  store i8 %seg_buf_load_27, i8* %digest_addr_27, align 1

ST_37: seg_buf_addr_30 (308)  [1/1] 0.00ns  loc: sha256.c:60
:124  %seg_buf_addr_30 = getelementptr inbounds [64 x i8]* %seg_buf, i32 0, i32 28

ST_37: seg_buf_load_28 (309)  [2/2] 2.32ns  loc: sha256.c:60
:125  %seg_buf_load_28 = load i8* %seg_buf_addr_30, align 1


 <State 38>: 4.64ns
ST_38: seg_buf_load_28 (309)  [1/2] 2.32ns  loc: sha256.c:60
:125  %seg_buf_load_28 = load i8* %seg_buf_addr_30, align 1

ST_38: digest_addr_28 (310)  [1/1] 0.00ns  loc: sha256.c:60
:126  %digest_addr_28 = getelementptr [32 x i8]* %digest, i32 0, i32 28

ST_38: StgValue_369 (311)  [1/1] 2.32ns  loc: sha256.c:60
:127  store i8 %seg_buf_load_28, i8* %digest_addr_28, align 1

ST_38: seg_buf_addr_31 (312)  [1/1] 0.00ns  loc: sha256.c:60
:128  %seg_buf_addr_31 = getelementptr inbounds [64 x i8]* %seg_buf, i32 0, i32 29

ST_38: seg_buf_load_29 (313)  [2/2] 2.32ns  loc: sha256.c:60
:129  %seg_buf_load_29 = load i8* %seg_buf_addr_31, align 1


 <State 39>: 4.64ns
ST_39: seg_buf_load_29 (313)  [1/2] 2.32ns  loc: sha256.c:60
:129  %seg_buf_load_29 = load i8* %seg_buf_addr_31, align 1

ST_39: digest_addr_29 (314)  [1/1] 0.00ns  loc: sha256.c:60
:130  %digest_addr_29 = getelementptr [32 x i8]* %digest, i32 0, i32 29

ST_39: StgValue_374 (315)  [1/1] 2.32ns  loc: sha256.c:60
:131  store i8 %seg_buf_load_29, i8* %digest_addr_29, align 1

ST_39: seg_buf_addr_32 (316)  [1/1] 0.00ns  loc: sha256.c:60
:132  %seg_buf_addr_32 = getelementptr inbounds [64 x i8]* %seg_buf, i32 0, i32 30

ST_39: seg_buf_load_30 (317)  [2/2] 2.32ns  loc: sha256.c:60
:133  %seg_buf_load_30 = load i8* %seg_buf_addr_32, align 1


 <State 40>: 4.64ns
ST_40: seg_buf_load_30 (317)  [1/2] 2.32ns  loc: sha256.c:60
:133  %seg_buf_load_30 = load i8* %seg_buf_addr_32, align 1

ST_40: digest_addr_30 (318)  [1/1] 0.00ns  loc: sha256.c:60
:134  %digest_addr_30 = getelementptr [32 x i8]* %digest, i32 0, i32 30

ST_40: StgValue_379 (319)  [1/1] 2.32ns  loc: sha256.c:60
:135  store i8 %seg_buf_load_30, i8* %digest_addr_30, align 1

ST_40: seg_buf_addr_33 (320)  [1/1] 0.00ns  loc: sha256.c:60
:136  %seg_buf_addr_33 = getelementptr inbounds [64 x i8]* %seg_buf, i32 0, i32 31

ST_40: seg_buf_load_31 (321)  [2/2] 2.32ns  loc: sha256.c:60
:137  %seg_buf_load_31 = load i8* %seg_buf_addr_33, align 1


 <State 41>: 4.64ns
ST_41: seg_buf_load_31 (321)  [1/2] 2.32ns  loc: sha256.c:60
:137  %seg_buf_load_31 = load i8* %seg_buf_addr_33, align 1

ST_41: digest_addr_31 (322)  [1/1] 0.00ns  loc: sha256.c:60
:138  %digest_addr_31 = getelementptr [32 x i8]* %digest, i32 0, i32 31

ST_41: StgValue_384 (323)  [1/1] 2.32ns  loc: sha256.c:60
:139  store i8 %seg_buf_load_31, i8* %digest_addr_31, align 1

ST_41: StgValue_385 (324)  [1/1] 0.00ns  loc: sha256.c:62
:140  ret void



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 2.77ns
The critical path consists of the following:
	s_axi read on port 'bytes' [24]  (1 ns)
	'store' operation (sha256.c:11) of variable 'bytes' on local variable 'bytes' [48]  (1.77 ns)

 <State 2>: 3.26ns
The critical path consists of the following:
	'load' operation ('n_load', sha256.c:40) on local variable 'bytes' [51]  (0 ns)
	'icmp' operation ('tmp', sha256.c:33) [52]  (3.26 ns)

 <State 3>: 5.99ns
The critical path consists of the following:
	'phi' operation ('i') with incoming values : ('i', sha256.c:38) [63]  (0 ns)
	'add' operation ('tmp1', sha256.c:38) [72]  (1.86 ns)
	'add' operation ('sum', sha256.c:33) [74]  (1.86 ns)
	'getelementptr' operation ('data_addr', sha256.c:39) [76]  (0 ns)
	'load' operation ('data_load', sha256.c:39) on array 'data' [77]  (2.27 ns)

 <State 4>: 4.59ns
The critical path consists of the following:
	'load' operation ('data_load', sha256.c:39) on array 'data' [77]  (2.27 ns)
	'store' operation (sha256.c:39) of variable 'data_load', sha256.c:39 on array 'seg_buf', sha256.c:23 [79]  (2.32 ns)

 <State 5>: 4.49ns
The critical path consists of the following:
	'load' operation ('seg_offset_load', sha256.c:41) on local variable 'seg_offset' [93]  (0 ns)
	'add' operation ('seg_offset', sha256.c:41) [95]  (2.9 ns)
	'store' operation (sha256.c:41) of variable 'seg_offset', sha256.c:41 on local variable 'seg_offset' [108]  (1.59 ns)

 <State 6>: 5.99ns
The critical path consists of the following:
	'phi' operation ('i') with incoming values : ('i', sha256.c:46) [125]  (0 ns)
	'add' operation ('tmp2', sha256.c:46) [134]  (1.86 ns)
	'add' operation ('sum2', sha256.c:33) [136]  (1.86 ns)
	'getelementptr' operation ('data_addr_4', sha256.c:48) [138]  (0 ns)
	'load' operation ('data_load_4', sha256.c:48) on array 'data' [139]  (2.27 ns)

 <State 7>: 4.59ns
The critical path consists of the following:
	'load' operation ('data_load_4', sha256.c:48) on array 'data' [139]  (2.27 ns)
	'store' operation (sha256.c:48) of variable 'data_load_4', sha256.c:48 on array 'seg_buf', sha256.c:23 [141]  (2.32 ns)

 <State 8>: 0ns
The critical path consists of the following:

 <State 9>: 2.32ns
The critical path consists of the following:
	'getelementptr' operation ('seg_buf_addr', sha256.c:60) [196]  (0 ns)
	'load' operation ('seg_buf_load', sha256.c:60) on array 'seg_buf', sha256.c:23 [197]  (2.32 ns)

 <State 10>: 4.64ns
The critical path consists of the following:
	'load' operation ('seg_buf_load', sha256.c:60) on array 'seg_buf', sha256.c:23 [197]  (2.32 ns)
	'store' operation (sha256.c:60) of variable 'seg_buf_load', sha256.c:60 on array 'digest' [199]  (2.32 ns)

 <State 11>: 4.64ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_1', sha256.c:60) on array 'seg_buf', sha256.c:23 [201]  (2.32 ns)
	'store' operation (sha256.c:60) of variable 'seg_buf_load_1', sha256.c:60 on array 'digest' [203]  (2.32 ns)

 <State 12>: 4.64ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_2', sha256.c:60) on array 'seg_buf', sha256.c:23 [205]  (2.32 ns)
	'store' operation (sha256.c:60) of variable 'seg_buf_load_2', sha256.c:60 on array 'digest' [207]  (2.32 ns)

 <State 13>: 4.64ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_3', sha256.c:60) on array 'seg_buf', sha256.c:23 [209]  (2.32 ns)
	'store' operation (sha256.c:60) of variable 'seg_buf_load_3', sha256.c:60 on array 'digest' [211]  (2.32 ns)

 <State 14>: 4.64ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_4', sha256.c:60) on array 'seg_buf', sha256.c:23 [213]  (2.32 ns)
	'store' operation (sha256.c:60) of variable 'seg_buf_load_4', sha256.c:60 on array 'digest' [215]  (2.32 ns)

 <State 15>: 4.64ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_5', sha256.c:60) on array 'seg_buf', sha256.c:23 [217]  (2.32 ns)
	'store' operation (sha256.c:60) of variable 'seg_buf_load_5', sha256.c:60 on array 'digest' [219]  (2.32 ns)

 <State 16>: 4.64ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_6', sha256.c:60) on array 'seg_buf', sha256.c:23 [221]  (2.32 ns)
	'store' operation (sha256.c:60) of variable 'seg_buf_load_6', sha256.c:60 on array 'digest' [223]  (2.32 ns)

 <State 17>: 4.64ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_7', sha256.c:60) on array 'seg_buf', sha256.c:23 [225]  (2.32 ns)
	'store' operation (sha256.c:60) of variable 'seg_buf_load_7', sha256.c:60 on array 'digest' [227]  (2.32 ns)

 <State 18>: 4.64ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_8', sha256.c:60) on array 'seg_buf', sha256.c:23 [229]  (2.32 ns)
	'store' operation (sha256.c:60) of variable 'seg_buf_load_8', sha256.c:60 on array 'digest' [231]  (2.32 ns)

 <State 19>: 4.64ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_9', sha256.c:60) on array 'seg_buf', sha256.c:23 [233]  (2.32 ns)
	'store' operation (sha256.c:60) of variable 'seg_buf_load_9', sha256.c:60 on array 'digest' [235]  (2.32 ns)

 <State 20>: 4.64ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_10', sha256.c:60) on array 'seg_buf', sha256.c:23 [237]  (2.32 ns)
	'store' operation (sha256.c:60) of variable 'seg_buf_load_10', sha256.c:60 on array 'digest' [239]  (2.32 ns)

 <State 21>: 4.64ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_11', sha256.c:60) on array 'seg_buf', sha256.c:23 [241]  (2.32 ns)
	'store' operation (sha256.c:60) of variable 'seg_buf_load_11', sha256.c:60 on array 'digest' [243]  (2.32 ns)

 <State 22>: 4.64ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_12', sha256.c:60) on array 'seg_buf', sha256.c:23 [245]  (2.32 ns)
	'store' operation (sha256.c:60) of variable 'seg_buf_load_12', sha256.c:60 on array 'digest' [247]  (2.32 ns)

 <State 23>: 4.64ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_13', sha256.c:60) on array 'seg_buf', sha256.c:23 [249]  (2.32 ns)
	'store' operation (sha256.c:60) of variable 'seg_buf_load_13', sha256.c:60 on array 'digest' [251]  (2.32 ns)

 <State 24>: 4.64ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_14', sha256.c:60) on array 'seg_buf', sha256.c:23 [253]  (2.32 ns)
	'store' operation (sha256.c:60) of variable 'seg_buf_load_14', sha256.c:60 on array 'digest' [255]  (2.32 ns)

 <State 25>: 4.64ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_15', sha256.c:60) on array 'seg_buf', sha256.c:23 [257]  (2.32 ns)
	'store' operation (sha256.c:60) of variable 'seg_buf_load_15', sha256.c:60 on array 'digest' [259]  (2.32 ns)

 <State 26>: 4.64ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_16', sha256.c:60) on array 'seg_buf', sha256.c:23 [261]  (2.32 ns)
	'store' operation (sha256.c:60) of variable 'seg_buf_load_16', sha256.c:60 on array 'digest' [263]  (2.32 ns)

 <State 27>: 4.64ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_17', sha256.c:60) on array 'seg_buf', sha256.c:23 [265]  (2.32 ns)
	'store' operation (sha256.c:60) of variable 'seg_buf_load_17', sha256.c:60 on array 'digest' [267]  (2.32 ns)

 <State 28>: 4.64ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_18', sha256.c:60) on array 'seg_buf', sha256.c:23 [269]  (2.32 ns)
	'store' operation (sha256.c:60) of variable 'seg_buf_load_18', sha256.c:60 on array 'digest' [271]  (2.32 ns)

 <State 29>: 4.64ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_19', sha256.c:60) on array 'seg_buf', sha256.c:23 [273]  (2.32 ns)
	'store' operation (sha256.c:60) of variable 'seg_buf_load_19', sha256.c:60 on array 'digest' [275]  (2.32 ns)

 <State 30>: 4.64ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_20', sha256.c:60) on array 'seg_buf', sha256.c:23 [277]  (2.32 ns)
	'store' operation (sha256.c:60) of variable 'seg_buf_load_20', sha256.c:60 on array 'digest' [279]  (2.32 ns)

 <State 31>: 4.64ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_21', sha256.c:60) on array 'seg_buf', sha256.c:23 [281]  (2.32 ns)
	'store' operation (sha256.c:60) of variable 'seg_buf_load_21', sha256.c:60 on array 'digest' [283]  (2.32 ns)

 <State 32>: 4.64ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_22', sha256.c:60) on array 'seg_buf', sha256.c:23 [285]  (2.32 ns)
	'store' operation (sha256.c:60) of variable 'seg_buf_load_22', sha256.c:60 on array 'digest' [287]  (2.32 ns)

 <State 33>: 4.64ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_23', sha256.c:60) on array 'seg_buf', sha256.c:23 [289]  (2.32 ns)
	'store' operation (sha256.c:60) of variable 'seg_buf_load_23', sha256.c:60 on array 'digest' [291]  (2.32 ns)

 <State 34>: 4.64ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_24', sha256.c:60) on array 'seg_buf', sha256.c:23 [293]  (2.32 ns)
	'store' operation (sha256.c:60) of variable 'seg_buf_load_24', sha256.c:60 on array 'digest' [295]  (2.32 ns)

 <State 35>: 4.64ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_25', sha256.c:60) on array 'seg_buf', sha256.c:23 [297]  (2.32 ns)
	'store' operation (sha256.c:60) of variable 'seg_buf_load_25', sha256.c:60 on array 'digest' [299]  (2.32 ns)

 <State 36>: 4.64ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_26', sha256.c:60) on array 'seg_buf', sha256.c:23 [301]  (2.32 ns)
	'store' operation (sha256.c:60) of variable 'seg_buf_load_26', sha256.c:60 on array 'digest' [303]  (2.32 ns)

 <State 37>: 4.64ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_27', sha256.c:60) on array 'seg_buf', sha256.c:23 [305]  (2.32 ns)
	'store' operation (sha256.c:60) of variable 'seg_buf_load_27', sha256.c:60 on array 'digest' [307]  (2.32 ns)

 <State 38>: 4.64ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_28', sha256.c:60) on array 'seg_buf', sha256.c:23 [309]  (2.32 ns)
	'store' operation (sha256.c:60) of variable 'seg_buf_load_28', sha256.c:60 on array 'digest' [311]  (2.32 ns)

 <State 39>: 4.64ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_29', sha256.c:60) on array 'seg_buf', sha256.c:23 [313]  (2.32 ns)
	'store' operation (sha256.c:60) of variable 'seg_buf_load_29', sha256.c:60 on array 'digest' [315]  (2.32 ns)

 <State 40>: 4.64ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_30', sha256.c:60) on array 'seg_buf', sha256.c:23 [317]  (2.32 ns)
	'store' operation (sha256.c:60) of variable 'seg_buf_load_30', sha256.c:60 on array 'digest' [319]  (2.32 ns)

 <State 41>: 4.64ns
The critical path consists of the following:
	'load' operation ('seg_buf_load_31', sha256.c:60) on array 'seg_buf', sha256.c:23 [321]  (2.32 ns)
	'store' operation (sha256.c:60) of variable 'seg_buf_load_31', sha256.c:60 on array 'digest' [323]  (2.32 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26
	State 27
	State 28
	State 29
	State 30
	State 31
	State 32
	State 33
	State 34
	State 35
	State 36
	State 37
	State 38
	State 39
	State 40
	State 41


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
